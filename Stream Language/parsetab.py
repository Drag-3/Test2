
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN ATTACH CALL CHAIN COMMA CONST DIVIDE ELSE EOF EQUALS EVENT FALSE FEEDBACK FILTEROP FLOAT FN FOR GE GT IDENTIFIER IF INT LAMBDA LBRACE LE LPAREN LT MAP MINUS MULTIPLY NE NEWLINE NOT OR PLUS RBRACE REDUCE RETURN RPAREN SBOOL SEMICOLON SEVENT SFLOAT SINT SSTREAM SSTRING STREAM STREAMMERGE STREAMSPLIT STRING TO_STREAM TRUE TYPEHINTCOLON VAR WHILEprogram : statement_liststatement : declaration\n                | expression SEMICOLON\n                | return_statement SEMICOLON\n                | control_flow\n                | assignment SEMICOLONstatement_list : statement\n                      | statement_list statementfunction_call : IDENTIFIER LPAREN opt_arg_list RPARENopt_arg_list : arg_list\n                    | emptyarg_list : expression\n                | arg_list COMMA expressionfunction_definition : FN IDENTIFIER LPAREN opt_param_list RPAREN block_statement\n                           | FN IDENTIFIER LPAREN opt_param_list RPAREN typehint block_statementreturn_statement : RETURN expressionblock_statement : LBRACE statement_list RBRACElambda_function : FN LPAREN opt_param_list RPAREN LAMBDA block_statement\n                       | FN LPAREN opt_param_list RPAREN typehint LAMBDA block_statement\n                       | LPAREN opt_param_list RPAREN LAMBDA block_statement\n                       | LPAREN opt_param_list RPAREN typehint LAMBDA block_statementopt_param_list : param_list\n                      | emptyparam_list : param\n                  | param_list COMMA paramparam : IDENTIFIER\n             | IDENTIFIER typehintdeclaration : VAR declaration_base SEMICOLON\n                    | CONST declaration_base SEMICOLON\n                    | function_definitiondeclaration_base : IDENTIFIER\n                        | IDENTIFIER ASSIGN expression\n                        | IDENTIFIER typehint\n                        | IDENTIFIER typehint ASSIGN expression\n                        typehint : TYPEHINTCOLON typetype : SINT\n            | SFLOAT\n            | SSTRING\n            | SBOOL\n            | SSTREAM\n            | SEVENTptype : INT\n            | FLOAT\n            | STRING\n            | TRUE\n            | FALSEbinary_arithmetic_operation_rest : PLUS expression\n                        | MINUS expression\n                        | MULTIPLY expression\n                        | DIVIDE expression\n    binary_arithmetic_operation : expression binary_arithmetic_operation_rest\n                        | ptype binary_arithmetic_operation_rest\n    unary_arithmetic_operation : MINUS expression\n                        | PLUS expression\n    binary_logic_operation : expression binary_logic_operation_rest\n                        | ptype binary_logic_operation_rest\n\n    binary_logic_operation_rest : EQUALS ptype\n                        | GT ptype\n                        | LT ptype\n                        | GE ptype\n                        | LE ptype\n                        | AND ptype\n                        | OR ptype\n                        |  EQUALS expression\n                        | GT expression\n                        | LT expression\n                        | GE expression\n                        | LE expression\n                        | AND expression\n                        | OR expression\n    unary_logic_operation : NOT expression\n    logic_expression : binary_logic_operation\n                        | unary_logic_operation\n    function_call_expression : function_call\n    object_call_expression : expression CALL expression\n    stream_operation : unary_stream_operation\n                        | binary_stream_operation\n                        | special_stream_operation\n    unary_stream_operation : IDENTIFIER TO_STREAM\n\n    binary_stream_operation : IDENTIFIER CHAIN IDENTIFIER\n                        | IDENTIFIER STREAMSPLIT IDENTIFIER\n                        | IDENTIFIER STREAMMERGE IDENTIFIER\n                        | IDENTIFIER FEEDBACK IDENTIFIER\n    special_stream_operation : IDENTIFIER FILTEROP LPAREN logic_expression RPAREN\n                        | IDENTIFIER MAP LPAREN logic_expression RPAREN\n                        | IDENTIFIER REDUCE LPAREN logic_expression RPAREN\n    simple_expression : ptype\n                        | type\n                        | IDENTIFIER\n                        | LPAREN expression RPAREN\n                        | lambda_function\n\n    complex_expression : binary_arithmetic_operation\n                        | unary_arithmetic_operation\n                        | logic_expression\n                        | function_call_expression\n                        | object_call_expression\n                        | stream_operation\n    expression : simple_expression\n                | complex_expression\n    control_flow : conditional\n                    | loopconditional : IF LPAREN expression RPAREN block_statement ELSE block_statement\n                    | IF LPAREN expression RPAREN block_statementloop : FOR LPAREN declaration SEMICOLON expression SEMICOLON expression RPAREN block_statement\n            | WHILE LPAREN expression RPAREN block_statementassignment : IDENTIFIER ASSIGN expressionempty :'
    
_lr_action_items = {'VAR':([0,2,3,4,7,11,15,16,52,53,68,69,97,121,125,176,178,180,181,185,189,191,192,195,],[9,9,-7,-2,-5,-30,-100,-101,-8,-3,-4,-6,9,-28,-29,9,-103,-105,-14,9,-15,-17,-102,-104,]),'CONST':([0,2,3,4,7,11,15,16,52,53,68,69,97,121,125,176,178,180,181,185,189,191,192,195,],[10,10,-7,-2,-5,-30,-100,-101,-8,-3,-4,-6,10,-28,-29,10,-103,-105,-14,10,-15,-17,-102,-104,]),'RETURN':([0,2,3,4,7,11,15,16,52,53,68,69,121,125,176,178,180,181,185,189,191,192,195,],[14,14,-7,-2,-5,-30,-100,-101,-8,-3,-4,-6,-28,-29,14,-103,-105,-14,14,-15,-17,-102,-104,]),'IDENTIFIER':([0,2,3,4,7,9,10,11,14,15,16,18,19,43,44,51,52,53,55,57,58,59,60,61,62,63,64,65,66,67,68,69,76,77,79,80,81,82,87,96,98,121,122,125,135,136,137,138,143,147,150,153,165,176,178,180,181,185,188,189,191,192,195,],[17,17,-7,-2,-5,71,71,-30,74,-100,-101,86,92,74,74,74,-8,-3,74,74,74,74,74,74,74,74,74,74,74,74,-4,-6,74,74,131,132,133,134,140,74,74,-28,74,-29,74,74,74,140,140,86,74,74,74,17,-103,-105,-14,17,74,-15,-17,-102,-104,]),'FN':([0,2,3,4,7,11,14,15,16,19,43,44,51,52,53,55,57,58,59,60,61,62,63,64,65,66,67,68,69,76,77,96,97,98,121,122,125,135,136,137,150,153,165,176,178,180,181,185,188,189,191,192,195,],[18,18,-7,-2,-5,-30,75,-100,-101,75,75,75,75,-8,-3,75,75,75,75,75,75,75,75,75,75,75,75,-4,-6,75,75,75,147,75,-28,75,-29,75,75,75,75,75,75,18,-103,-105,-14,18,75,-15,-17,-102,-104,]),'LPAREN':([0,2,3,4,7,11,14,15,16,17,18,19,29,30,31,43,44,51,52,53,55,57,58,59,60,61,62,63,64,65,66,67,68,69,74,75,76,77,83,84,85,86,92,96,98,121,122,125,135,136,137,150,153,165,176,178,180,181,185,188,189,191,192,195,],[19,19,-7,-2,-5,-30,19,-100,-101,77,87,19,96,97,98,19,19,19,-8,-3,19,19,19,19,19,19,19,19,19,19,19,19,-4,-6,77,87,19,19,135,136,137,138,77,19,19,-28,19,-29,19,19,19,19,19,19,19,-103,-105,-14,19,19,-15,-17,-102,-104,]),'IF':([0,2,3,4,7,11,15,16,52,53,68,69,121,125,176,178,180,181,185,189,191,192,195,],[29,29,-7,-2,-5,-30,-100,-101,-8,-3,-4,-6,-28,-29,29,-103,-105,-14,29,-15,-17,-102,-104,]),'FOR':([0,2,3,4,7,11,15,16,52,53,68,69,121,125,176,178,180,181,185,189,191,192,195,],[30,30,-7,-2,-5,-30,-100,-101,-8,-3,-4,-6,-28,-29,30,-103,-105,-14,30,-15,-17,-102,-104,]),'WHILE':([0,2,3,4,7,11,15,16,52,53,68,69,121,125,176,178,180,181,185,189,191,192,195,],[31,31,-7,-2,-5,-30,-100,-101,-8,-3,-4,-6,-28,-29,31,-103,-105,-14,31,-15,-17,-102,-104,]),'INT':([0,2,3,4,7,11,14,15,16,19,43,44,51,52,53,55,57,58,59,60,61,62,63,64,65,66,67,68,69,76,77,96,98,121,122,125,135,136,137,150,153,165,176,178,180,181,185,188,189,191,192,195,],[32,32,-7,-2,-5,-30,32,-100,-101,32,32,32,32,-8,-3,32,32,32,32,32,32,32,32,32,32,32,32,-4,-6,32,32,32,32,-28,32,-29,32,32,32,32,32,32,32,-103,-105,-14,32,32,-15,-17,-102,-104,]),'FLOAT':([0,2,3,4,7,11,14,15,16,19,43,44,51,52,53,55,57,58,59,60,61,62,63,64,65,66,67,68,69,76,77,96,98,121,122,125,135,136,137,150,153,165,176,178,180,181,185,188,189,191,192,195,],[33,33,-7,-2,-5,-30,33,-100,-101,33,33,33,33,-8,-3,33,33,33,33,33,33,33,33,33,33,33,33,-4,-6,33,33,33,33,-28,33,-29,33,33,33,33,33,33,33,-103,-105,-14,33,33,-15,-17,-102,-104,]),'STRING':([0,2,3,4,7,11,14,15,16,19,43,44,51,52,53,55,57,58,59,60,61,62,63,64,65,66,67,68,69,76,77,96,98,121,122,125,135,136,137,150,153,165,176,178,180,181,185,188,189,191,192,195,],[34,34,-7,-2,-5,-30,34,-100,-101,34,34,34,34,-8,-3,34,34,34,34,34,34,34,34,34,34,34,34,-4,-6,34,34,34,34,-28,34,-29,34,34,34,34,34,34,34,-103,-105,-14,34,34,-15,-17,-102,-104,]),'TRUE':([0,2,3,4,7,11,14,15,16,19,43,44,51,52,53,55,57,58,59,60,61,62,63,64,65,66,67,68,69,76,77,96,98,121,122,125,135,136,137,150,153,165,176,178,180,181,185,188,189,191,192,195,],[35,35,-7,-2,-5,-30,35,-100,-101,35,35,35,35,-8,-3,35,35,35,35,35,35,35,35,35,35,35,35,-4,-6,35,35,35,35,-28,35,-29,35,35,35,35,35,35,35,-103,-105,-14,35,35,-15,-17,-102,-104,]),'FALSE':([0,2,3,4,7,11,14,15,16,19,43,44,51,52,53,55,57,58,59,60,61,62,63,64,65,66,67,68,69,76,77,96,98,121,122,125,135,136,137,150,153,165,176,178,180,181,185,188,189,191,192,195,],[36,36,-7,-2,-5,-30,36,-100,-101,36,36,36,36,-8,-3,36,36,36,36,36,36,36,36,36,36,36,36,-4,-6,36,36,36,36,-28,36,-29,36,36,36,36,36,36,36,-103,-105,-14,36,36,-15,-17,-102,-104,]),'SINT':([0,2,3,4,7,11,14,15,16,19,43,44,51,52,53,55,57,58,59,60,61,62,63,64,65,66,67,68,69,76,77,96,98,121,122,124,125,135,136,137,150,153,165,176,178,180,181,185,188,189,191,192,195,],[37,37,-7,-2,-5,-30,37,-100,-101,37,37,37,37,-8,-3,37,37,37,37,37,37,37,37,37,37,37,37,-4,-6,37,37,37,37,-28,37,37,-29,37,37,37,37,37,37,37,-103,-105,-14,37,37,-15,-17,-102,-104,]),'SFLOAT':([0,2,3,4,7,11,14,15,16,19,43,44,51,52,53,55,57,58,59,60,61,62,63,64,65,66,67,68,69,76,77,96,98,121,122,124,125,135,136,137,150,153,165,176,178,180,181,185,188,189,191,192,195,],[38,38,-7,-2,-5,-30,38,-100,-101,38,38,38,38,-8,-3,38,38,38,38,38,38,38,38,38,38,38,38,-4,-6,38,38,38,38,-28,38,38,-29,38,38,38,38,38,38,38,-103,-105,-14,38,38,-15,-17,-102,-104,]),'SSTRING':([0,2,3,4,7,11,14,15,16,19,43,44,51,52,53,55,57,58,59,60,61,62,63,64,65,66,67,68,69,76,77,96,98,121,122,124,125,135,136,137,150,153,165,176,178,180,181,185,188,189,191,192,195,],[39,39,-7,-2,-5,-30,39,-100,-101,39,39,39,39,-8,-3,39,39,39,39,39,39,39,39,39,39,39,39,-4,-6,39,39,39,39,-28,39,39,-29,39,39,39,39,39,39,39,-103,-105,-14,39,39,-15,-17,-102,-104,]),'SBOOL':([0,2,3,4,7,11,14,15,16,19,43,44,51,52,53,55,57,58,59,60,61,62,63,64,65,66,67,68,69,76,77,96,98,121,122,124,125,135,136,137,150,153,165,176,178,180,181,185,188,189,191,192,195,],[40,40,-7,-2,-5,-30,40,-100,-101,40,40,40,40,-8,-3,40,40,40,40,40,40,40,40,40,40,40,40,-4,-6,40,40,40,40,-28,40,40,-29,40,40,40,40,40,40,40,-103,-105,-14,40,40,-15,-17,-102,-104,]),'SSTREAM':([0,2,3,4,7,11,14,15,16,19,43,44,51,52,53,55,57,58,59,60,61,62,63,64,65,66,67,68,69,76,77,96,98,121,122,124,125,135,136,137,150,153,165,176,178,180,181,185,188,189,191,192,195,],[41,41,-7,-2,-5,-30,41,-100,-101,41,41,41,41,-8,-3,41,41,41,41,41,41,41,41,41,41,41,41,-4,-6,41,41,41,41,-28,41,41,-29,41,41,41,41,41,41,41,-103,-105,-14,41,41,-15,-17,-102,-104,]),'SEVENT':([0,2,3,4,7,11,14,15,16,19,43,44,51,52,53,55,57,58,59,60,61,62,63,64,65,66,67,68,69,76,77,96,98,121,122,124,125,135,136,137,150,153,165,176,178,180,181,185,188,189,191,192,195,],[42,42,-7,-2,-5,-30,42,-100,-101,42,42,42,42,-8,-3,42,42,42,42,42,42,42,42,42,42,42,42,-4,-6,42,42,42,42,-28,42,42,-29,42,42,42,42,42,42,42,-103,-105,-14,42,42,-15,-17,-102,-104,]),'MINUS':([0,2,3,4,5,7,11,12,13,14,15,16,17,19,20,21,22,23,24,25,26,27,28,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,73,74,76,77,78,88,92,94,95,96,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,125,126,130,131,132,133,134,135,136,137,141,145,148,149,150,152,153,154,155,156,157,158,165,167,168,169,170,171,175,176,178,179,180,181,183,185,186,188,189,190,191,192,193,195,],[43,43,-7,-2,58,-5,-30,-98,-99,43,-100,-101,-89,43,58,-88,-91,-92,-93,-94,-95,-96,-97,-42,-43,-44,-45,-46,-36,-37,-38,-39,-40,-41,43,43,-72,-73,-74,-76,-77,-78,43,-8,-3,-51,43,-55,43,43,43,43,43,43,43,43,43,43,43,-4,-6,58,-89,43,43,-79,58,-89,-52,-56,43,43,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,-28,43,-29,58,58,-80,-81,-82,-83,43,43,43,-90,58,58,58,43,-9,43,-94,58,58,-94,-94,43,58,58,-84,-85,-86,-20,43,-103,58,-105,-14,-18,43,-21,43,-15,-19,-17,-102,58,-104,]),'PLUS':([0,2,3,4,5,7,11,12,13,14,15,16,17,19,20,21,22,23,24,25,26,27,28,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,73,74,76,77,78,88,92,94,95,96,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,125,126,130,131,132,133,134,135,136,137,141,145,148,149,150,152,153,154,155,156,157,158,165,167,168,169,170,171,175,176,178,179,180,181,183,185,186,188,189,190,191,192,193,195,],[44,44,-7,-2,57,-5,-30,-98,-99,44,-100,-101,-89,44,57,-88,-91,-92,-93,-94,-95,-96,-97,-42,-43,-44,-45,-46,-36,-37,-38,-39,-40,-41,44,44,-72,-73,-74,-76,-77,-78,44,-8,-3,-51,44,-55,44,44,44,44,44,44,44,44,44,44,44,-4,-6,57,-89,44,44,-79,57,-89,-52,-56,44,44,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,-28,44,-29,57,57,-80,-81,-82,-83,44,44,44,-90,57,57,57,44,-9,44,-94,57,57,-94,-94,44,57,57,-84,-85,-86,-20,44,-103,57,-105,-14,-18,44,-21,44,-15,-19,-17,-102,57,-104,]),'NOT':([0,2,3,4,7,11,14,15,16,19,43,44,51,52,53,55,57,58,59,60,61,62,63,64,65,66,67,68,69,76,77,96,98,121,122,125,135,136,137,150,153,165,176,178,180,181,185,188,189,191,192,195,],[51,51,-7,-2,-5,-30,51,-100,-101,51,51,51,51,-8,-3,51,51,51,51,51,51,51,51,51,51,51,51,-4,-6,51,51,51,51,-28,51,-29,51,51,51,51,51,51,51,-103,-105,-14,51,51,-15,-17,-102,-104,]),'$end':([1,2,3,4,7,11,15,16,52,53,68,69,121,125,178,180,181,189,191,192,195,],[0,-1,-7,-2,-5,-30,-100,-101,-8,-3,-4,-6,-28,-29,-103,-105,-14,-15,-17,-102,-104,]),'RBRACE':([3,4,7,11,15,16,52,53,68,69,121,125,178,180,181,185,189,191,192,195,],[-7,-2,-5,-30,-100,-101,-8,-3,-4,-6,-28,-29,-103,-105,-14,191,-15,-17,-102,-104,]),'SEMICOLON':([5,6,8,11,12,13,17,20,21,22,23,24,25,26,27,28,32,33,34,35,36,37,38,39,40,41,42,45,46,47,48,49,50,54,56,70,71,72,73,74,78,94,95,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,123,125,126,131,132,133,134,141,146,149,151,152,167,169,170,171,175,179,181,183,186,189,190,191,],[53,68,69,-30,-98,-99,-89,-87,-88,-91,-92,-93,-94,-95,-96,-97,-42,-43,-44,-45,-46,-36,-37,-38,-39,-40,-41,-72,-73,-74,-76,-77,-78,-51,-55,121,-31,125,-16,-89,-79,-52,-56,-53,-54,-71,-75,-47,-48,-49,-50,-57,-64,-58,-65,-59,-66,-60,-67,-61,-68,-62,-69,-63,-70,-28,-33,-29,-106,-80,-81,-82,-83,-90,165,-32,-35,-9,-34,-84,-85,-86,-20,188,-14,-18,-21,-15,-19,-17,]),'CALL':([5,12,13,17,20,21,22,23,24,25,26,27,28,32,33,34,35,36,37,38,39,40,41,42,45,46,47,48,49,50,54,56,73,74,78,88,92,94,95,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,126,130,131,132,133,134,141,145,148,149,152,154,155,156,157,158,167,168,169,170,171,175,179,183,186,190,191,193,],[55,-98,-99,-89,-87,-88,-91,-92,-93,-94,-95,-96,-97,-42,-43,-44,-45,-46,-36,-37,-38,-39,-40,-41,-72,-73,-74,-76,-77,-78,-51,-55,55,-89,-79,55,-89,-52,-56,55,55,55,55,55,55,55,55,-57,55,-58,55,-59,55,-60,55,-61,55,-62,55,-63,55,55,55,-80,-81,-82,-83,-90,55,55,55,-9,-94,55,-87,-94,-94,55,55,-84,-85,-86,-20,55,-18,-21,-19,-17,55,]),'MULTIPLY':([5,12,13,17,20,21,22,23,24,25,26,27,28,32,33,34,35,36,37,38,39,40,41,42,45,46,47,48,49,50,54,56,73,74,78,88,92,94,95,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,126,130,131,132,133,134,141,145,148,149,152,154,155,156,157,158,167,168,169,170,171,175,179,183,186,190,191,193,],[59,-98,-99,-89,59,-88,-91,-92,-93,-94,-95,-96,-97,-42,-43,-44,-45,-46,-36,-37,-38,-39,-40,-41,-72,-73,-74,-76,-77,-78,-51,-55,59,-89,-79,59,-89,-52,-56,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-80,-81,-82,-83,-90,59,59,59,-9,-94,59,59,-94,-94,59,59,-84,-85,-86,-20,59,-18,-21,-19,-17,59,]),'DIVIDE':([5,12,13,17,20,21,22,23,24,25,26,27,28,32,33,34,35,36,37,38,39,40,41,42,45,46,47,48,49,50,54,56,73,74,78,88,92,94,95,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,126,130,131,132,133,134,141,145,148,149,152,154,155,156,157,158,167,168,169,170,171,175,179,183,186,190,191,193,],[60,-98,-99,-89,60,-88,-91,-92,-93,-94,-95,-96,-97,-42,-43,-44,-45,-46,-36,-37,-38,-39,-40,-41,-72,-73,-74,-76,-77,-78,-51,-55,60,-89,-79,60,-89,-52,-56,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,-80,-81,-82,-83,-90,60,60,60,-9,-94,60,60,-94,-94,60,60,-84,-85,-86,-20,60,-18,-21,-19,-17,60,]),'EQUALS':([5,12,13,17,20,21,22,23,24,25,26,27,28,32,33,34,35,36,37,38,39,40,41,42,45,46,47,48,49,50,54,56,73,74,78,88,92,94,95,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,126,130,131,132,133,134,141,145,148,149,152,154,155,156,157,158,167,168,169,170,171,175,179,183,186,190,191,193,],[61,-98,-99,-89,61,-88,-91,-92,-93,-94,-95,-96,-97,-42,-43,-44,-45,-46,-36,-37,-38,-39,-40,-41,-72,-73,-74,-76,-77,-78,-51,-55,61,-89,-79,61,-89,-52,-56,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,-80,-81,-82,-83,-90,61,61,61,-9,-94,61,61,-94,-94,61,61,-84,-85,-86,-20,61,-18,-21,-19,-17,61,]),'GT':([5,12,13,17,20,21,22,23,24,25,26,27,28,32,33,34,35,36,37,38,39,40,41,42,45,46,47,48,49,50,54,56,73,74,78,88,92,94,95,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,126,130,131,132,133,134,141,145,148,149,152,154,155,156,157,158,167,168,169,170,171,175,179,183,186,190,191,193,],[62,-98,-99,-89,62,-88,-91,-92,-93,-94,-95,-96,-97,-42,-43,-44,-45,-46,-36,-37,-38,-39,-40,-41,-72,-73,-74,-76,-77,-78,-51,-55,62,-89,-79,62,-89,-52,-56,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,-80,-81,-82,-83,-90,62,62,62,-9,-94,62,62,-94,-94,62,62,-84,-85,-86,-20,62,-18,-21,-19,-17,62,]),'LT':([5,12,13,17,20,21,22,23,24,25,26,27,28,32,33,34,35,36,37,38,39,40,41,42,45,46,47,48,49,50,54,56,73,74,78,88,92,94,95,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,126,130,131,132,133,134,141,145,148,149,152,154,155,156,157,158,167,168,169,170,171,175,179,183,186,190,191,193,],[63,-98,-99,-89,63,-88,-91,-92,-93,-94,-95,-96,-97,-42,-43,-44,-45,-46,-36,-37,-38,-39,-40,-41,-72,-73,-74,-76,-77,-78,-51,-55,63,-89,-79,63,-89,-52,-56,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,-80,-81,-82,-83,-90,63,63,63,-9,-94,63,63,-94,-94,63,63,-84,-85,-86,-20,63,-18,-21,-19,-17,63,]),'GE':([5,12,13,17,20,21,22,23,24,25,26,27,28,32,33,34,35,36,37,38,39,40,41,42,45,46,47,48,49,50,54,56,73,74,78,88,92,94,95,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,126,130,131,132,133,134,141,145,148,149,152,154,155,156,157,158,167,168,169,170,171,175,179,183,186,190,191,193,],[64,-98,-99,-89,64,-88,-91,-92,-93,-94,-95,-96,-97,-42,-43,-44,-45,-46,-36,-37,-38,-39,-40,-41,-72,-73,-74,-76,-77,-78,-51,-55,64,-89,-79,64,-89,-52,-56,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,-80,-81,-82,-83,-90,64,64,64,-9,-94,64,64,-94,-94,64,64,-84,-85,-86,-20,64,-18,-21,-19,-17,64,]),'LE':([5,12,13,17,20,21,22,23,24,25,26,27,28,32,33,34,35,36,37,38,39,40,41,42,45,46,47,48,49,50,54,56,73,74,78,88,92,94,95,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,126,130,131,132,133,134,141,145,148,149,152,154,155,156,157,158,167,168,169,170,171,175,179,183,186,190,191,193,],[65,-98,-99,-89,65,-88,-91,-92,-93,-94,-95,-96,-97,-42,-43,-44,-45,-46,-36,-37,-38,-39,-40,-41,-72,-73,-74,-76,-77,-78,-51,-55,65,-89,-79,65,-89,-52,-56,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,-80,-81,-82,-83,-90,65,65,65,-9,-94,65,65,-94,-94,65,65,-84,-85,-86,-20,65,-18,-21,-19,-17,65,]),'AND':([5,12,13,17,20,21,22,23,24,25,26,27,28,32,33,34,35,36,37,38,39,40,41,42,45,46,47,48,49,50,54,56,73,74,78,88,92,94,95,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,126,130,131,132,133,134,141,145,148,149,152,154,155,156,157,158,167,168,169,170,171,175,179,183,186,190,191,193,],[66,-98,-99,-89,66,-88,-91,-92,-93,-94,-95,-96,-97,-42,-43,-44,-45,-46,-36,-37,-38,-39,-40,-41,-72,-73,-74,-76,-77,-78,-51,-55,66,-89,-79,66,-89,-52,-56,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,-80,-81,-82,-83,-90,66,66,66,-9,-94,66,66,-94,-94,66,66,-84,-85,-86,-20,66,-18,-21,-19,-17,66,]),'OR':([5,12,13,17,20,21,22,23,24,25,26,27,28,32,33,34,35,36,37,38,39,40,41,42,45,46,47,48,49,50,54,56,73,74,78,88,92,94,95,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,126,130,131,132,133,134,141,145,148,149,152,154,155,156,157,158,167,168,169,170,171,175,179,183,186,190,191,193,],[67,-98,-99,-89,67,-88,-91,-92,-93,-94,-95,-96,-97,-42,-43,-44,-45,-46,-36,-37,-38,-39,-40,-41,-72,-73,-74,-76,-77,-78,-51,-55,67,-89,-79,67,-89,-52,-56,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,-80,-81,-82,-83,-90,67,67,67,-9,-94,67,67,-94,-94,67,67,-84,-85,-86,-20,67,-18,-21,-19,-17,67,]),'RPAREN':([12,13,19,20,21,22,23,24,25,26,27,28,32,33,34,35,36,37,38,39,40,41,42,45,46,47,48,49,50,54,56,74,77,78,87,88,89,90,91,92,93,94,95,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,127,128,129,130,131,132,133,134,138,139,140,141,144,145,148,151,152,154,157,158,159,163,168,169,170,171,175,183,186,190,191,193,],[-98,-99,-107,-87,-88,-91,-92,-93,-94,-95,-96,-97,-42,-43,-44,-45,-46,-36,-37,-38,-39,-40,-41,-72,-73,-74,-76,-77,-78,-51,-55,-89,-107,-79,-107,141,142,-22,-23,-26,-24,-52,-56,-53,-54,-71,-75,-47,-48,-49,-50,-57,-64,-58,-65,-59,-66,-60,-67,-61,-68,-62,-69,-63,-70,152,-10,-11,-12,-80,-81,-82,-83,-107,160,-26,-90,-27,164,166,-35,-9,169,170,171,172,-25,-13,-84,-85,-86,-20,-18,-21,-19,-17,194,]),'COMMA':([12,13,20,21,22,23,24,25,26,27,28,32,33,34,35,36,37,38,39,40,41,42,45,46,47,48,49,50,54,56,74,78,90,92,93,94,95,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,128,130,131,132,133,134,140,141,144,151,152,163,168,169,170,171,175,183,186,190,191,],[-98,-99,-87,-88,-91,-92,-93,-94,-95,-96,-97,-42,-43,-44,-45,-46,-36,-37,-38,-39,-40,-41,-72,-73,-74,-76,-77,-78,-51,-55,-89,-79,143,-26,-24,-52,-56,-53,-54,-71,-75,-47,-48,-49,-50,-57,-64,-58,-65,-59,-66,-60,-67,-61,-68,-62,-69,-63,-70,153,-12,-80,-81,-82,-83,-26,-90,-27,-35,-9,-25,-13,-84,-85,-86,-20,-18,-21,-19,-17,]),'ASSIGN':([17,37,38,39,40,41,42,71,123,151,],[76,-36,-37,-38,-39,-40,-41,122,150,-35,]),'TO_STREAM':([17,74,92,],[78,78,78,]),'CHAIN':([17,74,92,],[79,79,79,]),'STREAMSPLIT':([17,74,92,],[80,80,80,]),'STREAMMERGE':([17,74,92,],[81,81,81,]),'FEEDBACK':([17,74,92,],[82,82,82,]),'FILTEROP':([17,74,92,],[83,83,83,]),'MAP':([17,74,92,],[84,84,84,]),'REDUCE':([17,74,92,],[85,85,85,]),'LAMBDA':([37,38,39,40,41,42,142,151,160,162,174,],[-36,-37,-38,-39,-40,-41,161,-35,173,177,184,]),'LBRACE':([37,38,39,40,41,42,151,161,164,166,172,173,177,182,184,187,194,],[-36,-37,-38,-39,-40,-41,-35,176,176,176,176,176,176,176,176,176,176,]),'TYPEHINTCOLON':([71,92,140,142,160,172,],[124,124,124,124,124,124,]),'ELSE':([178,191,],[187,-17,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,176,],[2,185,]),'statement':([0,2,176,185,],[3,52,3,52,]),'declaration':([0,2,97,176,185,],[4,4,146,4,4,]),'expression':([0,2,14,19,43,44,51,55,57,58,59,60,61,62,63,64,65,66,67,76,77,96,98,122,135,136,137,150,153,165,176,185,188,],[5,5,73,88,99,100,101,102,103,104,105,106,108,110,112,114,116,118,120,126,130,145,148,149,155,155,155,167,168,179,5,5,193,]),'return_statement':([0,2,176,185,],[6,6,6,6,]),'control_flow':([0,2,176,185,],[7,7,7,7,]),'assignment':([0,2,176,185,],[8,8,8,8,]),'function_definition':([0,2,97,176,185,],[11,11,11,11,11,]),'simple_expression':([0,2,14,19,43,44,51,55,57,58,59,60,61,62,63,64,65,66,67,76,77,96,98,122,135,136,137,150,153,165,176,185,188,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'complex_expression':([0,2,14,19,43,44,51,55,57,58,59,60,61,62,63,64,65,66,67,76,77,96,98,122,135,136,137,150,153,165,176,185,188,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'conditional':([0,2,176,185,],[15,15,15,15,]),'loop':([0,2,176,185,],[16,16,16,16,]),'ptype':([0,2,14,19,43,44,51,55,57,58,59,60,61,62,63,64,65,66,67,76,77,96,98,122,135,136,137,150,153,165,176,185,188,],[20,20,20,20,20,20,20,20,20,20,20,20,107,109,111,113,115,117,119,20,20,20,20,20,156,156,156,20,20,20,20,20,20,]),'type':([0,2,14,19,43,44,51,55,57,58,59,60,61,62,63,64,65,66,67,76,77,96,98,122,124,135,136,137,150,153,165,176,185,188,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,151,21,21,21,21,21,21,21,21,21,]),'lambda_function':([0,2,14,19,43,44,51,55,57,58,59,60,61,62,63,64,65,66,67,76,77,96,98,122,135,136,137,150,153,165,176,185,188,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'binary_arithmetic_operation':([0,2,14,19,43,44,51,55,57,58,59,60,61,62,63,64,65,66,67,76,77,96,98,122,135,136,137,150,153,165,176,185,188,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'unary_arithmetic_operation':([0,2,14,19,43,44,51,55,57,58,59,60,61,62,63,64,65,66,67,76,77,96,98,122,135,136,137,150,153,165,176,185,188,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'logic_expression':([0,2,14,19,43,44,51,55,57,58,59,60,61,62,63,64,65,66,67,76,77,96,98,122,135,136,137,150,153,165,176,185,188,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,154,157,158,25,25,25,25,25,25,]),'function_call_expression':([0,2,14,19,43,44,51,55,57,58,59,60,61,62,63,64,65,66,67,76,77,96,98,122,135,136,137,150,153,165,176,185,188,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'object_call_expression':([0,2,14,19,43,44,51,55,57,58,59,60,61,62,63,64,65,66,67,76,77,96,98,122,135,136,137,150,153,165,176,185,188,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'stream_operation':([0,2,14,19,43,44,51,55,57,58,59,60,61,62,63,64,65,66,67,76,77,96,98,122,135,136,137,150,153,165,176,185,188,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'binary_logic_operation':([0,2,14,19,43,44,51,55,57,58,59,60,61,62,63,64,65,66,67,76,77,96,98,122,135,136,137,150,153,165,176,185,188,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'unary_logic_operation':([0,2,14,19,43,44,51,55,57,58,59,60,61,62,63,64,65,66,67,76,77,96,98,122,135,136,137,150,153,165,176,185,188,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'function_call':([0,2,14,19,43,44,51,55,57,58,59,60,61,62,63,64,65,66,67,76,77,96,98,122,135,136,137,150,153,165,176,185,188,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'unary_stream_operation':([0,2,14,19,43,44,51,55,57,58,59,60,61,62,63,64,65,66,67,76,77,96,98,122,135,136,137,150,153,165,176,185,188,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'binary_stream_operation':([0,2,14,19,43,44,51,55,57,58,59,60,61,62,63,64,65,66,67,76,77,96,98,122,135,136,137,150,153,165,176,185,188,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'special_stream_operation':([0,2,14,19,43,44,51,55,57,58,59,60,61,62,63,64,65,66,67,76,77,96,98,122,135,136,137,150,153,165,176,185,188,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'binary_arithmetic_operation_rest':([5,20,73,88,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,126,130,145,148,149,155,156,167,168,179,193,],[54,94,54,54,54,54,54,54,54,54,54,54,94,54,94,54,94,54,94,54,94,54,94,54,94,54,54,54,54,54,54,54,94,54,54,54,54,]),'binary_logic_operation_rest':([5,20,73,88,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,126,130,145,148,149,155,156,167,168,179,193,],[56,95,56,56,56,56,56,56,56,56,56,56,95,56,95,56,95,56,95,56,95,56,95,56,95,56,56,56,56,56,56,56,95,56,56,56,56,]),'declaration_base':([9,10,],[70,72,]),'opt_param_list':([19,87,138,],[89,139,159,]),'param_list':([19,87,138,],[90,90,90,]),'empty':([19,77,87,138,],[91,129,91,91,]),'param':([19,87,138,143,],[93,93,93,163,]),'typehint':([71,92,140,142,160,172,],[123,144,144,162,174,182,]),'opt_arg_list':([77,],[127,]),'arg_list':([77,],[128,]),'block_statement':([161,164,166,172,173,177,182,184,187,194,],[175,178,180,181,183,186,189,190,192,195,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',10),
  ('statement -> declaration','statement',1,'p_statement','parser.py',16),
  ('statement -> expression SEMICOLON','statement',2,'p_statement','parser.py',17),
  ('statement -> return_statement SEMICOLON','statement',2,'p_statement','parser.py',18),
  ('statement -> control_flow','statement',1,'p_statement','parser.py',19),
  ('statement -> assignment SEMICOLON','statement',2,'p_statement','parser.py',20),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',25),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',26),
  ('function_call -> IDENTIFIER LPAREN opt_arg_list RPAREN','function_call',4,'p_function_call','parser.py',34),
  ('opt_arg_list -> arg_list','opt_arg_list',1,'p_opt_arg_list','parser.py',39),
  ('opt_arg_list -> empty','opt_arg_list',1,'p_opt_arg_list','parser.py',40),
  ('arg_list -> expression','arg_list',1,'p_arg_list','parser.py',45),
  ('arg_list -> arg_list COMMA expression','arg_list',3,'p_arg_list','parser.py',46),
  ('function_definition -> FN IDENTIFIER LPAREN opt_param_list RPAREN block_statement','function_definition',6,'p_function_definition','parser.py',55),
  ('function_definition -> FN IDENTIFIER LPAREN opt_param_list RPAREN typehint block_statement','function_definition',7,'p_function_definition','parser.py',56),
  ('return_statement -> RETURN expression','return_statement',2,'p_return_statement','parser.py',64),
  ('block_statement -> LBRACE statement_list RBRACE','block_statement',3,'p_block_statement','parser.py',68),
  ('lambda_function -> FN LPAREN opt_param_list RPAREN LAMBDA block_statement','lambda_function',6,'p_lambda_function','parser.py',73),
  ('lambda_function -> FN LPAREN opt_param_list RPAREN typehint LAMBDA block_statement','lambda_function',7,'p_lambda_function','parser.py',74),
  ('lambda_function -> LPAREN opt_param_list RPAREN LAMBDA block_statement','lambda_function',5,'p_lambda_function','parser.py',75),
  ('lambda_function -> LPAREN opt_param_list RPAREN typehint LAMBDA block_statement','lambda_function',6,'p_lambda_function','parser.py',76),
  ('opt_param_list -> param_list','opt_param_list',1,'p_opt_param_list','parser.py',92),
  ('opt_param_list -> empty','opt_param_list',1,'p_opt_param_list','parser.py',93),
  ('param_list -> param','param_list',1,'p_param_list','parser.py',98),
  ('param_list -> param_list COMMA param','param_list',3,'p_param_list','parser.py',99),
  ('param -> IDENTIFIER','param',1,'p_param','parser.py',107),
  ('param -> IDENTIFIER typehint','param',2,'p_param','parser.py',108),
  ('declaration -> VAR declaration_base SEMICOLON','declaration',3,'p_declaration','parser.py',116),
  ('declaration -> CONST declaration_base SEMICOLON','declaration',3,'p_declaration','parser.py',117),
  ('declaration -> function_definition','declaration',1,'p_declaration','parser.py',118),
  ('declaration_base -> IDENTIFIER','declaration_base',1,'p_declaration_base','parser.py',127),
  ('declaration_base -> IDENTIFIER ASSIGN expression','declaration_base',3,'p_declaration_base','parser.py',128),
  ('declaration_base -> IDENTIFIER typehint','declaration_base',2,'p_declaration_base','parser.py',129),
  ('declaration_base -> IDENTIFIER typehint ASSIGN expression','declaration_base',4,'p_declaration_base','parser.py',130),
  ('typehint -> TYPEHINTCOLON type','typehint',2,'p_typehint','parser.py',143),
  ('type -> SINT','type',1,'p_type','parser.py',149),
  ('type -> SFLOAT','type',1,'p_type','parser.py',150),
  ('type -> SSTRING','type',1,'p_type','parser.py',151),
  ('type -> SBOOL','type',1,'p_type','parser.py',152),
  ('type -> SSTREAM','type',1,'p_type','parser.py',153),
  ('type -> SEVENT','type',1,'p_type','parser.py',154),
  ('ptype -> INT','ptype',1,'p_primative_type','parser.py',158),
  ('ptype -> FLOAT','ptype',1,'p_primative_type','parser.py',159),
  ('ptype -> STRING','ptype',1,'p_primative_type','parser.py',160),
  ('ptype -> TRUE','ptype',1,'p_primative_type','parser.py',161),
  ('ptype -> FALSE','ptype',1,'p_primative_type','parser.py',162),
  ('binary_arithmetic_operation_rest -> PLUS expression','binary_arithmetic_operation_rest',2,'p_binary_arithmetic_operation_rest','parser.py',169),
  ('binary_arithmetic_operation_rest -> MINUS expression','binary_arithmetic_operation_rest',2,'p_binary_arithmetic_operation_rest','parser.py',170),
  ('binary_arithmetic_operation_rest -> MULTIPLY expression','binary_arithmetic_operation_rest',2,'p_binary_arithmetic_operation_rest','parser.py',171),
  ('binary_arithmetic_operation_rest -> DIVIDE expression','binary_arithmetic_operation_rest',2,'p_binary_arithmetic_operation_rest','parser.py',172),
  ('binary_arithmetic_operation -> expression binary_arithmetic_operation_rest','binary_arithmetic_operation',2,'p_binary_arithmetic_operation','parser.py',177),
  ('binary_arithmetic_operation -> ptype binary_arithmetic_operation_rest','binary_arithmetic_operation',2,'p_binary_arithmetic_operation','parser.py',178),
  ('unary_arithmetic_operation -> MINUS expression','unary_arithmetic_operation',2,'p_unary_arithmetic_operation','parser.py',186),
  ('unary_arithmetic_operation -> PLUS expression','unary_arithmetic_operation',2,'p_unary_arithmetic_operation','parser.py',187),
  ('binary_logic_operation -> expression binary_logic_operation_rest','binary_logic_operation',2,'p_binary_logic_operation','parser.py',192),
  ('binary_logic_operation -> ptype binary_logic_operation_rest','binary_logic_operation',2,'p_binary_logic_operation','parser.py',193),
  ('binary_logic_operation_rest -> EQUALS ptype','binary_logic_operation_rest',2,'p_binary_logic_operation_rest','parser.py',200),
  ('binary_logic_operation_rest -> GT ptype','binary_logic_operation_rest',2,'p_binary_logic_operation_rest','parser.py',201),
  ('binary_logic_operation_rest -> LT ptype','binary_logic_operation_rest',2,'p_binary_logic_operation_rest','parser.py',202),
  ('binary_logic_operation_rest -> GE ptype','binary_logic_operation_rest',2,'p_binary_logic_operation_rest','parser.py',203),
  ('binary_logic_operation_rest -> LE ptype','binary_logic_operation_rest',2,'p_binary_logic_operation_rest','parser.py',204),
  ('binary_logic_operation_rest -> AND ptype','binary_logic_operation_rest',2,'p_binary_logic_operation_rest','parser.py',205),
  ('binary_logic_operation_rest -> OR ptype','binary_logic_operation_rest',2,'p_binary_logic_operation_rest','parser.py',206),
  ('binary_logic_operation_rest -> EQUALS expression','binary_logic_operation_rest',2,'p_binary_logic_operation_rest','parser.py',207),
  ('binary_logic_operation_rest -> GT expression','binary_logic_operation_rest',2,'p_binary_logic_operation_rest','parser.py',208),
  ('binary_logic_operation_rest -> LT expression','binary_logic_operation_rest',2,'p_binary_logic_operation_rest','parser.py',209),
  ('binary_logic_operation_rest -> GE expression','binary_logic_operation_rest',2,'p_binary_logic_operation_rest','parser.py',210),
  ('binary_logic_operation_rest -> LE expression','binary_logic_operation_rest',2,'p_binary_logic_operation_rest','parser.py',211),
  ('binary_logic_operation_rest -> AND expression','binary_logic_operation_rest',2,'p_binary_logic_operation_rest','parser.py',212),
  ('binary_logic_operation_rest -> OR expression','binary_logic_operation_rest',2,'p_binary_logic_operation_rest','parser.py',213),
  ('unary_logic_operation -> NOT expression','unary_logic_operation',2,'p_unary_logic_operation','parser.py',217),
  ('logic_expression -> binary_logic_operation','logic_expression',1,'p_logic_expression','parser.py',222),
  ('logic_expression -> unary_logic_operation','logic_expression',1,'p_logic_expression','parser.py',223),
  ('function_call_expression -> function_call','function_call_expression',1,'p_function_call_expression','parser.py',228),
  ('object_call_expression -> expression CALL expression','object_call_expression',3,'p_object_call_expression','parser.py',233),
  ('stream_operation -> unary_stream_operation','stream_operation',1,'p_stream_operation','parser.py',238),
  ('stream_operation -> binary_stream_operation','stream_operation',1,'p_stream_operation','parser.py',239),
  ('stream_operation -> special_stream_operation','stream_operation',1,'p_stream_operation','parser.py',240),
  ('unary_stream_operation -> IDENTIFIER TO_STREAM','unary_stream_operation',2,'p_unary_stream_operation','parser.py',245),
  ('binary_stream_operation -> IDENTIFIER CHAIN IDENTIFIER','binary_stream_operation',3,'p_binary_stream_operation','parser.py',251),
  ('binary_stream_operation -> IDENTIFIER STREAMSPLIT IDENTIFIER','binary_stream_operation',3,'p_binary_stream_operation','parser.py',252),
  ('binary_stream_operation -> IDENTIFIER STREAMMERGE IDENTIFIER','binary_stream_operation',3,'p_binary_stream_operation','parser.py',253),
  ('binary_stream_operation -> IDENTIFIER FEEDBACK IDENTIFIER','binary_stream_operation',3,'p_binary_stream_operation','parser.py',254),
  ('special_stream_operation -> IDENTIFIER FILTEROP LPAREN logic_expression RPAREN','special_stream_operation',5,'p_special_stream_operation','parser.py',259),
  ('special_stream_operation -> IDENTIFIER MAP LPAREN logic_expression RPAREN','special_stream_operation',5,'p_special_stream_operation','parser.py',260),
  ('special_stream_operation -> IDENTIFIER REDUCE LPAREN logic_expression RPAREN','special_stream_operation',5,'p_special_stream_operation','parser.py',261),
  ('simple_expression -> ptype','simple_expression',1,'p_simple_expression','parser.py',268),
  ('simple_expression -> type','simple_expression',1,'p_simple_expression','parser.py',269),
  ('simple_expression -> IDENTIFIER','simple_expression',1,'p_simple_expression','parser.py',270),
  ('simple_expression -> LPAREN expression RPAREN','simple_expression',3,'p_simple_expression','parser.py',271),
  ('simple_expression -> lambda_function','simple_expression',1,'p_simple_expression','parser.py',272),
  ('complex_expression -> binary_arithmetic_operation','complex_expression',1,'p_complex_expression','parser.py',278),
  ('complex_expression -> unary_arithmetic_operation','complex_expression',1,'p_complex_expression','parser.py',279),
  ('complex_expression -> logic_expression','complex_expression',1,'p_complex_expression','parser.py',280),
  ('complex_expression -> function_call_expression','complex_expression',1,'p_complex_expression','parser.py',281),
  ('complex_expression -> object_call_expression','complex_expression',1,'p_complex_expression','parser.py',282),
  ('complex_expression -> stream_operation','complex_expression',1,'p_complex_expression','parser.py',283),
  ('expression -> simple_expression','expression',1,'p_expression','parser.py',288),
  ('expression -> complex_expression','expression',1,'p_expression','parser.py',289),
  ('control_flow -> conditional','control_flow',1,'p_control_flow','parser.py',293),
  ('control_flow -> loop','control_flow',1,'p_control_flow','parser.py',294),
  ('conditional -> IF LPAREN expression RPAREN block_statement ELSE block_statement','conditional',7,'p_conditional','parser.py',299),
  ('conditional -> IF LPAREN expression RPAREN block_statement','conditional',5,'p_conditional','parser.py',300),
  ('loop -> FOR LPAREN declaration SEMICOLON expression SEMICOLON expression RPAREN block_statement','loop',9,'p_loop','parser.py',308),
  ('loop -> WHILE LPAREN expression RPAREN block_statement','loop',5,'p_loop','parser.py',309),
  ('assignment -> IDENTIFIER ASSIGN expression','assignment',3,'p_assignment','parser.py',316),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',322),
]
