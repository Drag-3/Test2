
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN ATTACH CALL CHAIN COMMA CONST DIVIDE ELSE EQUALS EVENT FALSE FEEDBACK FILTEROP FLOAT FN FOR GE GT IDENTIFIER IF INT LAMBDA LBRACE LE LPAREN LT MAP MINUS MULTIPLY NEWLINE NOT OR PLUS RBRACE REDUCE RETURN RPAREN SBOOL SEMICOLON SEVENT SFLOAT SINT SSTREAM SSTRING STREAM STREAMMERGE STREAMSPLIT STRING TO_STREAM TRUE TYPEHINTCOLON VAR WHILEprogram : statement_liststatement : declaration\n                | expressionstatement_list : statement SEMICOLON\n                      | statement_list statement SEMICOLON\n                      | statement_list NEWLINE statement SEMICOLONfunction_call : IDENTIFIER LPAREN opt_arg_list RPARENopt_arg_list : arg_list\n                    | emptyarg_list : expression\n                | arg_list COMMA expressionfunction_definition : FN IDENTIFIER LPAREN opt_param_list RPAREN LBRACE statement_list RETURN statement RBRACE\n                           | FN IDENTIFIER LPAREN opt_param_list RPAREN typehint LBRACE statement_list RETURN statement RBRACEfunction_body : LBRACE statement_list RBRACEreturn_statement : RETURN expressionlambda_function : FN LPAREN opt_param_list RPAREN LAMBDA LBRACE statement_list RBRACE\n                       | FN LPAREN opt_param_list RPAREN typehint LAMBDA LBRACE statement_list RBRACE\n                       | LPAREN opt_param_list RPAREN LAMBDA LBRACE statement_list RBRACE\n                       | LPAREN opt_param_list RPAREN typehint LAMBDA LBRACE statement_list RBRACEopt_param_list : param_list\n                      | emptyparam_list : param\n                  | param_list COMMA paramparam : IDENTIFIER\n             | IDENTIFIER typehintdeclaration : VAR declaration_base\n                    | CONST declaration_base\n                    | function_definitiondeclaration_base : IDENTIFIER\n                        | IDENTIFIER ASSIGN expression\n                        | IDENTIFIER typehint\n                        | IDENTIFIER typehint ASSIGN expression\n                        typehint : TYPEHINTCOLON typetype : SINT\n            | SFLOAT\n            | SSTRING\n            | SBOOL\n            | SSTREAM\n            | SEVENTptype : INT\n            | FLOAT\n            | STRING\n            | TRUE\n            | FALSEbinary_arithmetic_operation : expression PLUS expression\n                        | expression MINUS expression\n                        | expression MULTIPLY expression\n                        | expression DIVIDE expression\n\n    unary_arithmetic_operation : MINUS expression\n                        | PLUS expression\n    binary_logic_operation : expression binary_logic_operation_rest\n                        | ptype binary_logic_operation_rest\n\n    binary_logic_operation_rest : EQUALS ptype\n                        | GT ptype\n                        | LT ptype\n                        | GE ptype\n                        | LE ptype\n                        | AND ptype\n                        | OR ptype\n                        |  EQUALS expression\n                        | GT expression\n                        | LT expression\n                        | GE expression\n                        | LE expression\n                        | AND expression\n                        | OR expression\n    unary_logic_operation : NOT expression\n    logic_expression : binary_logic_operation\n                        | unary_logic_operation\n    function_call_expression : function_call\n    object_call_expression : expression CALL expression\n    stream_operation : unary_stream_operation\n                        | binary_stream_operation\n                        | special_stream_operation\n    unary_stream_operation : IDENTIFIER TO_STREAM\n\n    binary_stream_operation : IDENTIFIER CHAIN IDENTIFIER\n                        | IDENTIFIER STREAMSPLIT IDENTIFIER\n                        | IDENTIFIER STREAMMERGE IDENTIFIER\n                        | IDENTIFIER FEEDBACK IDENTIFIER\n    special_stream_operation : IDENTIFIER FILTEROP LPAREN logic_expression RPAREN\n                        | IDENTIFIER MAP LPAREN logic_expression RPAREN\n                        | IDENTIFIER REDUCE LPAREN logic_expression RPAREN\n    simple_expression : ptype\n                        | type\n                        | IDENTIFIER\n                        | LPAREN expression RPAREN\n                        | lambda_function\n                        | control_flow\n    complex_expression : binary_arithmetic_operation\n                        | unary_arithmetic_operation\n                        | logic_expression\n                        | function_call_expression\n                        | object_call_expression\n                        | stream_operation\n    expression : simple_expression\n                | complex_expression\n    control_flow : conditional\n                    | loopconditional : IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACEconditional : IF LPAREN expression RPAREN LBRACE statement_list RBRACEloop : FOR LPAREN declaration SEMICOLON expression SEMICOLON expression RPAREN LBRACE statement_list RBRACE\n            | WHILE LPAREN expression RPAREN LBRACE statement_list RBRACEempty :'
    
_lr_action_items = {'VAR':([0,2,50,51,90,93,139,166,168,170,171,173,175,176,177,179,180,181,182,183,185,189,190,192,197,199,200,203,204,],[6,6,6,-4,6,-5,-6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'CONST':([0,2,50,51,90,93,139,166,168,170,171,173,175,176,177,179,180,181,182,183,185,189,190,192,197,199,200,203,204,],[7,7,7,-4,7,-5,-6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'FN':([0,2,13,37,38,48,50,51,52,53,54,55,56,58,59,60,61,62,63,64,70,89,90,91,93,114,128,129,130,139,141,146,156,166,168,170,171,173,175,176,177,178,179,180,181,182,183,185,189,190,192,197,199,200,203,204,],[11,11,85,85,85,85,11,-4,85,85,85,85,85,85,85,85,85,85,85,85,85,85,137,85,-5,85,85,85,85,-6,85,85,85,11,11,11,11,11,11,11,11,85,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'IDENTIFIER':([0,2,6,7,11,13,37,38,48,50,51,52,53,54,55,56,58,59,60,61,62,63,64,69,70,72,73,74,75,89,91,93,114,117,128,129,130,133,137,139,141,146,156,166,168,170,171,173,175,176,177,178,179,180,181,182,183,185,189,190,192,197,199,200,203,204,],[12,12,66,66,68,83,12,12,12,12,-4,12,12,12,12,12,12,12,12,12,12,12,12,119,12,124,125,126,127,12,12,-5,12,119,12,12,12,119,68,-6,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'LPAREN':([0,2,11,12,13,37,38,45,46,47,48,50,51,52,53,54,55,56,58,59,60,61,62,63,64,68,70,76,77,78,83,85,89,91,93,114,128,129,130,139,141,146,156,166,168,170,171,173,175,176,177,178,179,180,181,182,183,185,189,190,192,197,199,200,203,204,],[13,13,69,70,13,13,13,89,90,91,13,13,-4,13,13,13,13,13,13,13,13,13,13,13,13,117,13,128,129,130,70,69,13,13,-5,13,13,13,13,-6,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'INT':([0,2,13,37,38,48,50,51,52,53,54,55,56,58,59,60,61,62,63,64,70,89,91,93,114,128,129,130,139,141,146,156,166,168,170,171,173,175,176,177,178,179,180,181,182,183,185,189,190,192,197,199,200,203,204,],[24,24,24,24,24,24,24,-4,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,-5,24,24,24,24,-6,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'FLOAT':([0,2,13,37,38,48,50,51,52,53,54,55,56,58,59,60,61,62,63,64,70,89,91,93,114,128,129,130,139,141,146,156,166,168,170,171,173,175,176,177,178,179,180,181,182,183,185,189,190,192,197,199,200,203,204,],[25,25,25,25,25,25,25,-4,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,-5,25,25,25,25,-6,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'STRING':([0,2,13,37,38,48,50,51,52,53,54,55,56,58,59,60,61,62,63,64,70,89,91,93,114,128,129,130,139,141,146,156,166,168,170,171,173,175,176,177,178,179,180,181,182,183,185,189,190,192,197,199,200,203,204,],[26,26,26,26,26,26,26,-4,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,-5,26,26,26,26,-6,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'TRUE':([0,2,13,37,38,48,50,51,52,53,54,55,56,58,59,60,61,62,63,64,70,89,91,93,114,128,129,130,139,141,146,156,166,168,170,171,173,175,176,177,178,179,180,181,182,183,185,189,190,192,197,199,200,203,204,],[27,27,27,27,27,27,27,-4,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-5,27,27,27,27,-6,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'FALSE':([0,2,13,37,38,48,50,51,52,53,54,55,56,58,59,60,61,62,63,64,70,89,91,93,114,128,129,130,139,141,146,156,166,168,170,171,173,175,176,177,178,179,180,181,182,183,185,189,190,192,197,199,200,203,204,],[28,28,28,28,28,28,28,-4,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,-5,28,28,28,28,-6,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'SINT':([0,2,13,37,38,48,50,51,52,53,54,55,56,58,59,60,61,62,63,64,70,89,91,93,114,116,128,129,130,139,141,146,156,166,168,170,171,173,175,176,177,178,179,180,181,182,183,185,189,190,192,197,199,200,203,204,],[29,29,29,29,29,29,29,-4,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,-5,29,29,29,29,29,-6,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'SFLOAT':([0,2,13,37,38,48,50,51,52,53,54,55,56,58,59,60,61,62,63,64,70,89,91,93,114,116,128,129,130,139,141,146,156,166,168,170,171,173,175,176,177,178,179,180,181,182,183,185,189,190,192,197,199,200,203,204,],[30,30,30,30,30,30,30,-4,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,-5,30,30,30,30,30,-6,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'SSTRING':([0,2,13,37,38,48,50,51,52,53,54,55,56,58,59,60,61,62,63,64,70,89,91,93,114,116,128,129,130,139,141,146,156,166,168,170,171,173,175,176,177,178,179,180,181,182,183,185,189,190,192,197,199,200,203,204,],[31,31,31,31,31,31,31,-4,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-5,31,31,31,31,31,-6,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'SBOOL':([0,2,13,37,38,48,50,51,52,53,54,55,56,58,59,60,61,62,63,64,70,89,91,93,114,116,128,129,130,139,141,146,156,166,168,170,171,173,175,176,177,178,179,180,181,182,183,185,189,190,192,197,199,200,203,204,],[32,32,32,32,32,32,32,-4,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-5,32,32,32,32,32,-6,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'SSTREAM':([0,2,13,37,38,48,50,51,52,53,54,55,56,58,59,60,61,62,63,64,70,89,91,93,114,116,128,129,130,139,141,146,156,166,168,170,171,173,175,176,177,178,179,180,181,182,183,185,189,190,192,197,199,200,203,204,],[33,33,33,33,33,33,33,-4,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,-5,33,33,33,33,33,-6,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'SEVENT':([0,2,13,37,38,48,50,51,52,53,54,55,56,58,59,60,61,62,63,64,70,89,91,93,114,116,128,129,130,139,141,146,156,166,168,170,171,173,175,176,177,178,179,180,181,182,183,185,189,190,192,197,199,200,203,204,],[34,34,34,34,34,34,34,-4,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,-5,34,34,34,34,34,-6,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'MINUS':([0,2,5,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,70,71,79,83,86,87,88,89,91,92,93,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,123,124,125,126,127,128,129,130,131,135,138,139,140,141,145,146,147,148,149,150,151,156,158,162,163,164,165,166,168,169,170,171,173,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,197,198,199,200,203,204,206,207,],[38,38,53,-95,-96,-85,38,-83,-84,-87,-88,-89,-90,-91,-92,-93,-94,-40,-41,-42,-43,-44,-34,-35,-36,-37,-38,-39,-97,-98,38,38,-68,-69,-70,-72,-73,-74,38,38,-4,38,38,38,38,38,-51,38,38,38,38,38,38,38,38,-75,53,-85,-52,53,53,38,38,53,-5,53,53,53,53,53,-53,53,-54,53,-55,53,-56,53,-57,53,-58,53,-59,53,38,53,-76,-77,-78,-79,38,38,38,-86,53,53,-6,53,38,-7,38,-91,53,-83,-91,-91,38,53,53,-80,-81,-82,38,38,53,38,38,38,38,38,38,38,38,38,38,38,38,-18,38,-100,53,-102,38,38,-16,38,-19,38,-17,38,38,38,38,-99,-101,]),'PLUS':([0,2,5,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,70,71,79,83,86,87,88,89,91,92,93,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,123,124,125,126,127,128,129,130,131,135,138,139,140,141,145,146,147,148,149,150,151,156,158,162,163,164,165,166,168,169,170,171,173,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,197,198,199,200,203,204,206,207,],[37,37,52,-95,-96,-85,37,-83,-84,-87,-88,-89,-90,-91,-92,-93,-94,-40,-41,-42,-43,-44,-34,-35,-36,-37,-38,-39,-97,-98,37,37,-68,-69,-70,-72,-73,-74,37,37,-4,37,37,37,37,37,-51,37,37,37,37,37,37,37,37,-75,52,-85,-52,52,52,37,37,52,-5,52,52,52,52,52,-53,52,-54,52,-55,52,-56,52,-57,52,-58,52,-59,52,37,52,-76,-77,-78,-79,37,37,37,-86,52,52,-6,52,37,-7,37,-91,52,-83,-91,-91,37,52,52,-80,-81,-82,37,37,52,37,37,37,37,37,37,37,37,37,37,37,37,-18,37,-100,52,-102,37,37,-16,37,-19,37,-17,37,37,37,37,-99,-101,]),'IF':([0,2,13,37,38,48,50,51,52,53,54,55,56,58,59,60,61,62,63,64,70,89,91,93,114,128,129,130,139,141,146,156,166,168,170,171,173,175,176,177,178,179,180,181,182,183,185,189,190,192,197,199,200,203,204,],[45,45,45,45,45,45,45,-4,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,-5,45,45,45,45,-6,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'FOR':([0,2,13,37,38,48,50,51,52,53,54,55,56,58,59,60,61,62,63,64,70,89,91,93,114,128,129,130,139,141,146,156,166,168,170,171,173,175,176,177,178,179,180,181,182,183,185,189,190,192,197,199,200,203,204,],[46,46,46,46,46,46,46,-4,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-5,46,46,46,46,-6,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'WHILE':([0,2,13,37,38,48,50,51,52,53,54,55,56,58,59,60,61,62,63,64,70,89,91,93,114,128,129,130,139,141,146,156,166,168,170,171,173,175,176,177,178,179,180,181,182,183,185,189,190,192,197,199,200,203,204,],[47,47,47,47,47,47,47,-4,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,-5,47,47,47,47,-6,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'NOT':([0,2,13,37,38,48,50,51,52,53,54,55,56,58,59,60,61,62,63,64,70,89,91,93,114,128,129,130,139,141,146,156,166,168,170,171,173,175,176,177,178,179,180,181,182,183,185,189,190,192,197,199,200,203,204,],[48,48,48,48,48,48,48,-4,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-5,48,48,48,48,-6,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'$end':([1,2,51,93,139,],[0,-1,-4,-5,-6,]),'NEWLINE':([2,51,93,139,175,177,179,180,182,185,190,192,203,204,],[50,-4,-5,-6,50,50,50,50,50,50,50,50,50,50,]),'SEMICOLON':([3,4,5,8,9,10,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,39,40,41,42,43,44,49,57,65,66,67,71,86,87,88,92,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,115,124,125,126,127,131,136,140,142,145,158,163,164,165,169,184,186,188,191,193,198,201,205,206,207,],[51,-2,-3,-28,-95,-96,-85,-83,-84,-87,-88,-89,-90,-91,-92,-93,-94,-40,-41,-42,-43,-44,-34,-35,-36,-37,-38,-39,-97,-98,-68,-69,-70,-72,-73,-74,93,-51,-26,-29,-27,-75,-52,-50,-49,-67,139,-45,-46,-47,-48,-71,-53,-60,-54,-61,-55,-62,-56,-63,-57,-64,-58,-65,-59,-66,-31,-76,-77,-78,-79,-86,156,-30,-33,-7,-32,-80,-81,-82,178,-18,-100,-102,-16,-19,-17,-12,-13,-99,-101,]),'RBRACE':([4,5,8,9,10,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,39,40,41,42,43,44,51,57,65,66,67,71,86,87,88,92,93,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,115,124,125,126,127,131,139,140,142,145,158,163,164,165,175,177,179,182,184,185,186,188,191,192,193,196,198,201,202,203,204,205,206,207,],[-2,-3,-28,-95,-96,-85,-83,-84,-87,-88,-89,-90,-91,-92,-93,-94,-40,-41,-42,-43,-44,-34,-35,-36,-37,-38,-39,-97,-98,-68,-69,-70,-72,-73,-74,-4,-51,-26,-29,-27,-75,-52,-50,-49,-67,-5,-45,-46,-47,-48,-71,-53,-60,-54,-61,-55,-62,-56,-63,-57,-64,-58,-65,-59,-66,-31,-76,-77,-78,-79,-86,-6,-30,-33,-7,-32,-80,-81,-82,184,186,188,191,-18,193,-100,-102,-16,198,-19,201,-17,-12,205,206,207,-13,-99,-101,]),'MULTIPLY':([5,9,10,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,39,40,41,42,43,44,57,71,79,83,86,87,88,92,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,123,124,125,126,127,131,135,138,140,145,147,148,149,150,151,158,162,163,164,165,169,184,186,187,188,191,193,198,206,207,],[54,-95,-96,-85,-83,-84,-87,-88,-89,-90,-91,-92,-93,-94,-40,-41,-42,-43,-44,-34,-35,-36,-37,-38,-39,-97,-98,-68,-69,-70,-72,-73,-74,-51,-75,54,-85,-52,54,54,54,54,54,54,54,54,-53,54,-54,54,-55,54,-56,54,-57,54,-58,54,-59,54,54,-76,-77,-78,-79,-86,54,54,54,-7,-91,54,-83,-91,-91,54,54,-80,-81,-82,54,-18,-100,54,-102,-16,-19,-17,-99,-101,]),'DIVIDE':([5,9,10,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,39,40,41,42,43,44,57,71,79,83,86,87,88,92,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,123,124,125,126,127,131,135,138,140,145,147,148,149,150,151,158,162,163,164,165,169,184,186,187,188,191,193,198,206,207,],[55,-95,-96,-85,-83,-84,-87,-88,-89,-90,-91,-92,-93,-94,-40,-41,-42,-43,-44,-34,-35,-36,-37,-38,-39,-97,-98,-68,-69,-70,-72,-73,-74,-51,-75,55,-85,-52,55,55,55,55,55,55,55,55,-53,55,-54,55,-55,55,-56,55,-57,55,-58,55,-59,55,55,-76,-77,-78,-79,-86,55,55,55,-7,-91,55,-83,-91,-91,55,55,-80,-81,-82,55,-18,-100,55,-102,-16,-19,-17,-99,-101,]),'CALL':([5,9,10,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,39,40,41,42,43,44,57,71,79,83,86,87,88,92,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,123,124,125,126,127,131,135,138,140,145,147,148,149,150,151,158,162,163,164,165,169,184,186,187,188,191,193,198,206,207,],[56,-95,-96,-85,-83,-84,-87,-88,-89,-90,-91,-92,-93,-94,-40,-41,-42,-43,-44,-34,-35,-36,-37,-38,-39,-97,-98,-68,-69,-70,-72,-73,-74,-51,-75,56,-85,-52,56,56,56,56,56,56,56,56,-53,56,-54,56,-55,56,-56,56,-57,56,-58,56,-59,56,56,-76,-77,-78,-79,-86,56,56,56,-7,-91,56,-83,-91,-91,56,56,-80,-81,-82,56,-18,-100,56,-102,-16,-19,-17,-99,-101,]),'EQUALS':([5,9,10,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,39,40,41,42,43,44,57,71,79,83,86,87,88,92,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,123,124,125,126,127,131,135,138,140,145,147,148,149,150,151,158,162,163,164,165,169,184,186,187,188,191,193,198,206,207,],[58,-95,-96,-85,58,-84,-87,-88,-89,-90,-91,-92,-93,-94,-40,-41,-42,-43,-44,-34,-35,-36,-37,-38,-39,-97,-98,-68,-69,-70,-72,-73,-74,-51,-75,58,-85,-52,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,-76,-77,-78,-79,-86,58,58,58,-7,-91,58,58,-91,-91,58,58,-80,-81,-82,58,-18,-100,58,-102,-16,-19,-17,-99,-101,]),'GT':([5,9,10,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,39,40,41,42,43,44,57,71,79,83,86,87,88,92,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,123,124,125,126,127,131,135,138,140,145,147,148,149,150,151,158,162,163,164,165,169,184,186,187,188,191,193,198,206,207,],[59,-95,-96,-85,59,-84,-87,-88,-89,-90,-91,-92,-93,-94,-40,-41,-42,-43,-44,-34,-35,-36,-37,-38,-39,-97,-98,-68,-69,-70,-72,-73,-74,-51,-75,59,-85,-52,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-76,-77,-78,-79,-86,59,59,59,-7,-91,59,59,-91,-91,59,59,-80,-81,-82,59,-18,-100,59,-102,-16,-19,-17,-99,-101,]),'LT':([5,9,10,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,39,40,41,42,43,44,57,71,79,83,86,87,88,92,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,123,124,125,126,127,131,135,138,140,145,147,148,149,150,151,158,162,163,164,165,169,184,186,187,188,191,193,198,206,207,],[60,-95,-96,-85,60,-84,-87,-88,-89,-90,-91,-92,-93,-94,-40,-41,-42,-43,-44,-34,-35,-36,-37,-38,-39,-97,-98,-68,-69,-70,-72,-73,-74,-51,-75,60,-85,-52,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,-76,-77,-78,-79,-86,60,60,60,-7,-91,60,60,-91,-91,60,60,-80,-81,-82,60,-18,-100,60,-102,-16,-19,-17,-99,-101,]),'GE':([5,9,10,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,39,40,41,42,43,44,57,71,79,83,86,87,88,92,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,123,124,125,126,127,131,135,138,140,145,147,148,149,150,151,158,162,163,164,165,169,184,186,187,188,191,193,198,206,207,],[61,-95,-96,-85,61,-84,-87,-88,-89,-90,-91,-92,-93,-94,-40,-41,-42,-43,-44,-34,-35,-36,-37,-38,-39,-97,-98,-68,-69,-70,-72,-73,-74,-51,-75,61,-85,-52,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,-76,-77,-78,-79,-86,61,61,61,-7,-91,61,61,-91,-91,61,61,-80,-81,-82,61,-18,-100,61,-102,-16,-19,-17,-99,-101,]),'LE':([5,9,10,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,39,40,41,42,43,44,57,71,79,83,86,87,88,92,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,123,124,125,126,127,131,135,138,140,145,147,148,149,150,151,158,162,163,164,165,169,184,186,187,188,191,193,198,206,207,],[62,-95,-96,-85,62,-84,-87,-88,-89,-90,-91,-92,-93,-94,-40,-41,-42,-43,-44,-34,-35,-36,-37,-38,-39,-97,-98,-68,-69,-70,-72,-73,-74,-51,-75,62,-85,-52,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,-76,-77,-78,-79,-86,62,62,62,-7,-91,62,62,-91,-91,62,62,-80,-81,-82,62,-18,-100,62,-102,-16,-19,-17,-99,-101,]),'AND':([5,9,10,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,39,40,41,42,43,44,57,71,79,83,86,87,88,92,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,123,124,125,126,127,131,135,138,140,145,147,148,149,150,151,158,162,163,164,165,169,184,186,187,188,191,193,198,206,207,],[63,-95,-96,-85,63,-84,-87,-88,-89,-90,-91,-92,-93,-94,-40,-41,-42,-43,-44,-34,-35,-36,-37,-38,-39,-97,-98,-68,-69,-70,-72,-73,-74,-51,-75,63,-85,-52,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,-76,-77,-78,-79,-86,63,63,63,-7,-91,63,63,-91,-91,63,63,-80,-81,-82,63,-18,-100,63,-102,-16,-19,-17,-99,-101,]),'OR':([5,9,10,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,39,40,41,42,43,44,57,71,79,83,86,87,88,92,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,123,124,125,126,127,131,135,138,140,145,147,148,149,150,151,158,162,163,164,165,169,184,186,187,188,191,193,198,206,207,],[64,-95,-96,-85,64,-84,-87,-88,-89,-90,-91,-92,-93,-94,-40,-41,-42,-43,-44,-34,-35,-36,-37,-38,-39,-97,-98,-68,-69,-70,-72,-73,-74,-51,-75,64,-85,-52,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,-76,-77,-78,-79,-86,64,64,64,-7,-91,64,64,-91,-91,64,64,-80,-81,-82,64,-18,-100,64,-102,-16,-19,-17,-99,-101,]),'RPAREN':([9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,39,40,41,42,43,44,57,69,70,71,79,80,81,82,83,84,86,87,88,92,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,117,118,119,120,121,122,123,124,125,126,127,131,134,135,138,142,143,145,147,150,151,154,162,163,164,165,184,186,187,188,191,193,198,206,207,],[-95,-96,-85,-103,-83,-84,-87,-88,-89,-90,-91,-92,-93,-94,-40,-41,-42,-43,-44,-34,-35,-36,-37,-38,-39,-97,-98,-68,-69,-70,-72,-73,-74,-51,-103,-103,-75,131,132,-20,-21,-24,-22,-52,-50,-49,-67,-45,-46,-47,-48,-71,-53,-60,-54,-61,-55,-62,-56,-63,-57,-64,-58,-65,-59,-66,-103,144,-24,145,-8,-9,-10,-76,-77,-78,-79,-86,-25,155,157,-33,159,-7,163,164,165,-23,-11,-80,-81,-82,-18,-100,195,-102,-16,-19,-17,-99,-101,]),'COMMA':([9,10,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,39,40,41,42,43,44,57,71,81,83,84,86,87,88,92,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,119,121,123,124,125,126,127,131,134,142,145,154,162,163,164,165,184,186,188,191,193,198,206,207,],[-95,-96,-85,-83,-84,-87,-88,-89,-90,-91,-92,-93,-94,-40,-41,-42,-43,-44,-34,-35,-36,-37,-38,-39,-97,-98,-68,-69,-70,-72,-73,-74,-51,-75,133,-24,-22,-52,-50,-49,-67,-45,-46,-47,-48,-71,-53,-60,-54,-61,-55,-62,-56,-63,-57,-64,-58,-65,-59,-66,-24,146,-10,-76,-77,-78,-79,-86,-25,-33,-7,-23,-11,-80,-81,-82,-18,-100,-102,-16,-19,-17,-99,-101,]),'TO_STREAM':([12,83,],[71,71,]),'CHAIN':([12,83,],[72,72,]),'STREAMSPLIT':([12,83,],[73,73,]),'STREAMMERGE':([12,83,],[74,74,]),'FEEDBACK':([12,83,],[75,75,]),'FILTEROP':([12,83,],[76,76,]),'MAP':([12,83,],[77,77,]),'REDUCE':([12,83,],[78,78,]),'ASSIGN':([29,30,31,32,33,34,66,115,142,],[-34,-35,-36,-37,-38,-39,114,141,-33,]),'LAMBDA':([29,30,31,32,33,34,132,142,144,153,161,],[-34,-35,-36,-37,-38,-39,152,-33,160,167,174,]),'LBRACE':([29,30,31,32,33,34,142,152,155,157,159,160,167,172,174,194,195,],[-34,-35,-36,-37,-38,-39,-33,166,168,170,171,173,176,181,183,199,200,]),'RETURN':([51,93,139,180,190,],[-4,-5,-6,189,197,]),'TYPEHINTCOLON':([66,83,119,132,144,159,],[116,116,116,116,116,116,]),'ELSE':([186,],[194,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,166,168,170,171,173,176,181,183,199,200,],[2,175,177,179,180,182,185,190,192,203,204,]),'statement':([0,2,50,166,168,170,171,173,175,176,177,179,180,181,182,183,185,189,190,192,197,199,200,203,204,],[3,49,94,3,3,3,3,3,49,3,49,49,49,3,49,3,49,196,49,49,202,3,3,49,49,]),'declaration':([0,2,50,90,166,168,170,171,173,175,176,177,179,180,181,182,183,185,189,190,192,197,199,200,203,204,],[4,4,4,136,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'expression':([0,2,13,37,38,48,50,52,53,54,55,56,58,59,60,61,62,63,64,70,89,91,114,128,129,130,141,146,156,166,168,170,171,173,175,176,177,178,179,180,181,182,183,185,189,190,192,197,199,200,203,204,],[5,5,79,87,88,92,5,95,96,97,98,99,101,103,105,107,109,111,113,123,135,138,140,148,148,148,158,162,169,5,5,5,5,5,5,5,5,187,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'function_definition':([0,2,50,90,166,168,170,171,173,175,176,177,179,180,181,182,183,185,189,190,192,197,199,200,203,204,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'simple_expression':([0,2,13,37,38,48,50,52,53,54,55,56,58,59,60,61,62,63,64,70,89,91,114,128,129,130,141,146,156,166,168,170,171,173,175,176,177,178,179,180,181,182,183,185,189,190,192,197,199,200,203,204,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'complex_expression':([0,2,13,37,38,48,50,52,53,54,55,56,58,59,60,61,62,63,64,70,89,91,114,128,129,130,141,146,156,166,168,170,171,173,175,176,177,178,179,180,181,182,183,185,189,190,192,197,199,200,203,204,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'ptype':([0,2,13,37,38,48,50,52,53,54,55,56,58,59,60,61,62,63,64,70,89,91,114,128,129,130,141,146,156,166,168,170,171,173,175,176,177,178,179,180,181,182,183,185,189,190,192,197,199,200,203,204,],[14,14,14,14,14,14,14,14,14,14,14,14,100,102,104,106,108,110,112,14,14,14,14,149,149,149,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'type':([0,2,13,37,38,48,50,52,53,54,55,56,58,59,60,61,62,63,64,70,89,91,114,116,128,129,130,141,146,156,166,168,170,171,173,175,176,177,178,179,180,181,182,183,185,189,190,192,197,199,200,203,204,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,142,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'lambda_function':([0,2,13,37,38,48,50,52,53,54,55,56,58,59,60,61,62,63,64,70,89,91,114,128,129,130,141,146,156,166,168,170,171,173,175,176,177,178,179,180,181,182,183,185,189,190,192,197,199,200,203,204,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'control_flow':([0,2,13,37,38,48,50,52,53,54,55,56,58,59,60,61,62,63,64,70,89,91,114,128,129,130,141,146,156,166,168,170,171,173,175,176,177,178,179,180,181,182,183,185,189,190,192,197,199,200,203,204,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'binary_arithmetic_operation':([0,2,13,37,38,48,50,52,53,54,55,56,58,59,60,61,62,63,64,70,89,91,114,128,129,130,141,146,156,166,168,170,171,173,175,176,177,178,179,180,181,182,183,185,189,190,192,197,199,200,203,204,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'unary_arithmetic_operation':([0,2,13,37,38,48,50,52,53,54,55,56,58,59,60,61,62,63,64,70,89,91,114,128,129,130,141,146,156,166,168,170,171,173,175,176,177,178,179,180,181,182,183,185,189,190,192,197,199,200,203,204,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'logic_expression':([0,2,13,37,38,48,50,52,53,54,55,56,58,59,60,61,62,63,64,70,89,91,114,128,129,130,141,146,156,166,168,170,171,173,175,176,177,178,179,180,181,182,183,185,189,190,192,197,199,200,203,204,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,147,150,151,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'function_call_expression':([0,2,13,37,38,48,50,52,53,54,55,56,58,59,60,61,62,63,64,70,89,91,114,128,129,130,141,146,156,166,168,170,171,173,175,176,177,178,179,180,181,182,183,185,189,190,192,197,199,200,203,204,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'object_call_expression':([0,2,13,37,38,48,50,52,53,54,55,56,58,59,60,61,62,63,64,70,89,91,114,128,129,130,141,146,156,166,168,170,171,173,175,176,177,178,179,180,181,182,183,185,189,190,192,197,199,200,203,204,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'stream_operation':([0,2,13,37,38,48,50,52,53,54,55,56,58,59,60,61,62,63,64,70,89,91,114,128,129,130,141,146,156,166,168,170,171,173,175,176,177,178,179,180,181,182,183,185,189,190,192,197,199,200,203,204,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'conditional':([0,2,13,37,38,48,50,52,53,54,55,56,58,59,60,61,62,63,64,70,89,91,114,128,129,130,141,146,156,166,168,170,171,173,175,176,177,178,179,180,181,182,183,185,189,190,192,197,199,200,203,204,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'loop':([0,2,13,37,38,48,50,52,53,54,55,56,58,59,60,61,62,63,64,70,89,91,114,128,129,130,141,146,156,166,168,170,171,173,175,176,177,178,179,180,181,182,183,185,189,190,192,197,199,200,203,204,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'binary_logic_operation':([0,2,13,37,38,48,50,52,53,54,55,56,58,59,60,61,62,63,64,70,89,91,114,128,129,130,141,146,156,166,168,170,171,173,175,176,177,178,179,180,181,182,183,185,189,190,192,197,199,200,203,204,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'unary_logic_operation':([0,2,13,37,38,48,50,52,53,54,55,56,58,59,60,61,62,63,64,70,89,91,114,128,129,130,141,146,156,166,168,170,171,173,175,176,177,178,179,180,181,182,183,185,189,190,192,197,199,200,203,204,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'function_call':([0,2,13,37,38,48,50,52,53,54,55,56,58,59,60,61,62,63,64,70,89,91,114,128,129,130,141,146,156,166,168,170,171,173,175,176,177,178,179,180,181,182,183,185,189,190,192,197,199,200,203,204,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'unary_stream_operation':([0,2,13,37,38,48,50,52,53,54,55,56,58,59,60,61,62,63,64,70,89,91,114,128,129,130,141,146,156,166,168,170,171,173,175,176,177,178,179,180,181,182,183,185,189,190,192,197,199,200,203,204,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'binary_stream_operation':([0,2,13,37,38,48,50,52,53,54,55,56,58,59,60,61,62,63,64,70,89,91,114,128,129,130,141,146,156,166,168,170,171,173,175,176,177,178,179,180,181,182,183,185,189,190,192,197,199,200,203,204,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'special_stream_operation':([0,2,13,37,38,48,50,52,53,54,55,56,58,59,60,61,62,63,64,70,89,91,114,128,129,130,141,146,156,166,168,170,171,173,175,176,177,178,179,180,181,182,183,185,189,190,192,197,199,200,203,204,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'binary_logic_operation_rest':([5,14,79,87,88,92,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,123,135,138,140,148,149,158,162,169,187,],[57,86,57,57,57,57,57,57,57,57,57,86,57,86,57,86,57,86,57,86,57,86,57,86,57,57,57,57,57,57,86,57,57,57,57,]),'declaration_base':([6,7,],[65,67,]),'opt_param_list':([13,69,117,],[80,118,143,]),'param_list':([13,69,117,],[81,81,81,]),'empty':([13,69,70,117,],[82,82,122,82,]),'param':([13,69,117,133,],[84,84,84,154,]),'typehint':([66,83,119,132,144,159,],[115,134,134,153,161,172,]),'opt_arg_list':([70,],[120,]),'arg_list':([70,],[121,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',10),
  ('statement -> declaration','statement',1,'p_statement','parser.py',16),
  ('statement -> expression','statement',1,'p_statement','parser.py',17),
  ('statement_list -> statement SEMICOLON','statement_list',2,'p_statement_list','parser.py',22),
  ('statement_list -> statement_list statement SEMICOLON','statement_list',3,'p_statement_list','parser.py',23),
  ('statement_list -> statement_list NEWLINE statement SEMICOLON','statement_list',4,'p_statement_list','parser.py',24),
  ('function_call -> IDENTIFIER LPAREN opt_arg_list RPAREN','function_call',4,'p_function_call','parser.py',32),
  ('opt_arg_list -> arg_list','opt_arg_list',1,'p_opt_arg_list','parser.py',37),
  ('opt_arg_list -> empty','opt_arg_list',1,'p_opt_arg_list','parser.py',38),
  ('arg_list -> expression','arg_list',1,'p_arg_list','parser.py',43),
  ('arg_list -> arg_list COMMA expression','arg_list',3,'p_arg_list','parser.py',44),
  ('function_definition -> FN IDENTIFIER LPAREN opt_param_list RPAREN LBRACE statement_list RETURN statement RBRACE','function_definition',10,'p_function_definition','parser.py',53),
  ('function_definition -> FN IDENTIFIER LPAREN opt_param_list RPAREN typehint LBRACE statement_list RETURN statement RBRACE','function_definition',11,'p_function_definition','parser.py',54),
  ('function_body -> LBRACE statement_list RBRACE','function_body',3,'p_function_body','parser.py',63),
  ('return_statement -> RETURN expression','return_statement',2,'p_return_statement','parser.py',67),
  ('lambda_function -> FN LPAREN opt_param_list RPAREN LAMBDA LBRACE statement_list RBRACE','lambda_function',8,'p_lambda_function','parser.py',72),
  ('lambda_function -> FN LPAREN opt_param_list RPAREN typehint LAMBDA LBRACE statement_list RBRACE','lambda_function',9,'p_lambda_function','parser.py',73),
  ('lambda_function -> LPAREN opt_param_list RPAREN LAMBDA LBRACE statement_list RBRACE','lambda_function',7,'p_lambda_function','parser.py',74),
  ('lambda_function -> LPAREN opt_param_list RPAREN typehint LAMBDA LBRACE statement_list RBRACE','lambda_function',8,'p_lambda_function','parser.py',75),
  ('opt_param_list -> param_list','opt_param_list',1,'p_opt_param_list','parser.py',84),
  ('opt_param_list -> empty','opt_param_list',1,'p_opt_param_list','parser.py',85),
  ('param_list -> param','param_list',1,'p_param_list','parser.py',90),
  ('param_list -> param_list COMMA param','param_list',3,'p_param_list','parser.py',91),
  ('param -> IDENTIFIER','param',1,'p_param','parser.py',99),
  ('param -> IDENTIFIER typehint','param',2,'p_param','parser.py',100),
  ('declaration -> VAR declaration_base','declaration',2,'p_declaration','parser.py',108),
  ('declaration -> CONST declaration_base','declaration',2,'p_declaration','parser.py',109),
  ('declaration -> function_definition','declaration',1,'p_declaration','parser.py',110),
  ('declaration_base -> IDENTIFIER','declaration_base',1,'p_declaration_base','parser.py',119),
  ('declaration_base -> IDENTIFIER ASSIGN expression','declaration_base',3,'p_declaration_base','parser.py',120),
  ('declaration_base -> IDENTIFIER typehint','declaration_base',2,'p_declaration_base','parser.py',121),
  ('declaration_base -> IDENTIFIER typehint ASSIGN expression','declaration_base',4,'p_declaration_base','parser.py',122),
  ('typehint -> TYPEHINTCOLON type','typehint',2,'p_typehint','parser.py',135),
  ('type -> SINT','type',1,'p_type','parser.py',141),
  ('type -> SFLOAT','type',1,'p_type','parser.py',142),
  ('type -> SSTRING','type',1,'p_type','parser.py',143),
  ('type -> SBOOL','type',1,'p_type','parser.py',144),
  ('type -> SSTREAM','type',1,'p_type','parser.py',145),
  ('type -> SEVENT','type',1,'p_type','parser.py',146),
  ('ptype -> INT','ptype',1,'p_primative_type','parser.py',150),
  ('ptype -> FLOAT','ptype',1,'p_primative_type','parser.py',151),
  ('ptype -> STRING','ptype',1,'p_primative_type','parser.py',152),
  ('ptype -> TRUE','ptype',1,'p_primative_type','parser.py',153),
  ('ptype -> FALSE','ptype',1,'p_primative_type','parser.py',154),
  ('binary_arithmetic_operation -> expression PLUS expression','binary_arithmetic_operation',3,'p_binary_arithmetic_operation','parser.py',161),
  ('binary_arithmetic_operation -> expression MINUS expression','binary_arithmetic_operation',3,'p_binary_arithmetic_operation','parser.py',162),
  ('binary_arithmetic_operation -> expression MULTIPLY expression','binary_arithmetic_operation',3,'p_binary_arithmetic_operation','parser.py',163),
  ('binary_arithmetic_operation -> expression DIVIDE expression','binary_arithmetic_operation',3,'p_binary_arithmetic_operation','parser.py',164),
  ('unary_arithmetic_operation -> MINUS expression','unary_arithmetic_operation',2,'p_unary_arithmetic_operation','parser.py',171),
  ('unary_arithmetic_operation -> PLUS expression','unary_arithmetic_operation',2,'p_unary_arithmetic_operation','parser.py',172),
  ('binary_logic_operation -> expression binary_logic_operation_rest','binary_logic_operation',2,'p_binary_logic_operation','parser.py',177),
  ('binary_logic_operation -> ptype binary_logic_operation_rest','binary_logic_operation',2,'p_binary_logic_operation','parser.py',178),
  ('binary_logic_operation_rest -> EQUALS ptype','binary_logic_operation_rest',2,'p_binary_logic_operation_rest','parser.py',185),
  ('binary_logic_operation_rest -> GT ptype','binary_logic_operation_rest',2,'p_binary_logic_operation_rest','parser.py',186),
  ('binary_logic_operation_rest -> LT ptype','binary_logic_operation_rest',2,'p_binary_logic_operation_rest','parser.py',187),
  ('binary_logic_operation_rest -> GE ptype','binary_logic_operation_rest',2,'p_binary_logic_operation_rest','parser.py',188),
  ('binary_logic_operation_rest -> LE ptype','binary_logic_operation_rest',2,'p_binary_logic_operation_rest','parser.py',189),
  ('binary_logic_operation_rest -> AND ptype','binary_logic_operation_rest',2,'p_binary_logic_operation_rest','parser.py',190),
  ('binary_logic_operation_rest -> OR ptype','binary_logic_operation_rest',2,'p_binary_logic_operation_rest','parser.py',191),
  ('binary_logic_operation_rest -> EQUALS expression','binary_logic_operation_rest',2,'p_binary_logic_operation_rest','parser.py',192),
  ('binary_logic_operation_rest -> GT expression','binary_logic_operation_rest',2,'p_binary_logic_operation_rest','parser.py',193),
  ('binary_logic_operation_rest -> LT expression','binary_logic_operation_rest',2,'p_binary_logic_operation_rest','parser.py',194),
  ('binary_logic_operation_rest -> GE expression','binary_logic_operation_rest',2,'p_binary_logic_operation_rest','parser.py',195),
  ('binary_logic_operation_rest -> LE expression','binary_logic_operation_rest',2,'p_binary_logic_operation_rest','parser.py',196),
  ('binary_logic_operation_rest -> AND expression','binary_logic_operation_rest',2,'p_binary_logic_operation_rest','parser.py',197),
  ('binary_logic_operation_rest -> OR expression','binary_logic_operation_rest',2,'p_binary_logic_operation_rest','parser.py',198),
  ('unary_logic_operation -> NOT expression','unary_logic_operation',2,'p_unary_logic_operation','parser.py',202),
  ('logic_expression -> binary_logic_operation','logic_expression',1,'p_logic_expression','parser.py',207),
  ('logic_expression -> unary_logic_operation','logic_expression',1,'p_logic_expression','parser.py',208),
  ('function_call_expression -> function_call','function_call_expression',1,'p_function_call_expression','parser.py',213),
  ('object_call_expression -> expression CALL expression','object_call_expression',3,'p_object_call_expression','parser.py',218),
  ('stream_operation -> unary_stream_operation','stream_operation',1,'p_stream_operation','parser.py',223),
  ('stream_operation -> binary_stream_operation','stream_operation',1,'p_stream_operation','parser.py',224),
  ('stream_operation -> special_stream_operation','stream_operation',1,'p_stream_operation','parser.py',225),
  ('unary_stream_operation -> IDENTIFIER TO_STREAM','unary_stream_operation',2,'p_unary_stream_operation','parser.py',230),
  ('binary_stream_operation -> IDENTIFIER CHAIN IDENTIFIER','binary_stream_operation',3,'p_binary_stream_operation','parser.py',236),
  ('binary_stream_operation -> IDENTIFIER STREAMSPLIT IDENTIFIER','binary_stream_operation',3,'p_binary_stream_operation','parser.py',237),
  ('binary_stream_operation -> IDENTIFIER STREAMMERGE IDENTIFIER','binary_stream_operation',3,'p_binary_stream_operation','parser.py',238),
  ('binary_stream_operation -> IDENTIFIER FEEDBACK IDENTIFIER','binary_stream_operation',3,'p_binary_stream_operation','parser.py',239),
  ('special_stream_operation -> IDENTIFIER FILTEROP LPAREN logic_expression RPAREN','special_stream_operation',5,'p_special_stream_operation','parser.py',244),
  ('special_stream_operation -> IDENTIFIER MAP LPAREN logic_expression RPAREN','special_stream_operation',5,'p_special_stream_operation','parser.py',245),
  ('special_stream_operation -> IDENTIFIER REDUCE LPAREN logic_expression RPAREN','special_stream_operation',5,'p_special_stream_operation','parser.py',246),
  ('simple_expression -> ptype','simple_expression',1,'p_simple_expression','parser.py',253),
  ('simple_expression -> type','simple_expression',1,'p_simple_expression','parser.py',254),
  ('simple_expression -> IDENTIFIER','simple_expression',1,'p_simple_expression','parser.py',255),
  ('simple_expression -> LPAREN expression RPAREN','simple_expression',3,'p_simple_expression','parser.py',256),
  ('simple_expression -> lambda_function','simple_expression',1,'p_simple_expression','parser.py',257),
  ('simple_expression -> control_flow','simple_expression',1,'p_simple_expression','parser.py',258),
  ('complex_expression -> binary_arithmetic_operation','complex_expression',1,'p_complex_expression','parser.py',263),
  ('complex_expression -> unary_arithmetic_operation','complex_expression',1,'p_complex_expression','parser.py',264),
  ('complex_expression -> logic_expression','complex_expression',1,'p_complex_expression','parser.py',265),
  ('complex_expression -> function_call_expression','complex_expression',1,'p_complex_expression','parser.py',266),
  ('complex_expression -> object_call_expression','complex_expression',1,'p_complex_expression','parser.py',267),
  ('complex_expression -> stream_operation','complex_expression',1,'p_complex_expression','parser.py',268),
  ('expression -> simple_expression','expression',1,'p_expression','parser.py',273),
  ('expression -> complex_expression','expression',1,'p_expression','parser.py',274),
  ('control_flow -> conditional','control_flow',1,'p_control_flow','parser.py',278),
  ('control_flow -> loop','control_flow',1,'p_control_flow','parser.py',279),
  ('conditional -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE','conditional',11,'p_conditional','parser.py',284),
  ('conditional -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE','conditional',7,'p_conditional_no_else','parser.py',288),
  ('loop -> FOR LPAREN declaration SEMICOLON expression SEMICOLON expression RPAREN LBRACE statement_list RBRACE','loop',11,'p_loop','parser.py',293),
  ('loop -> WHILE LPAREN expression RPAREN LBRACE statement_list RBRACE','loop',7,'p_loop','parser.py',294),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',304),
]
