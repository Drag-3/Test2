Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ATTACH
    CALL
    EOF
    EVENT
    FILTEROP
    LBRACKET
    MAP
    NEWLINE
    RBRACKET
    REDUCE
    STREAM

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement -> declaration
Rule 3     statement -> expression SEMICOLON
Rule 4     statement -> return_statement SEMICOLON
Rule 5     statement -> control_flow
Rule 6     statement -> assignment SEMICOLON
Rule 7     statement_list -> statement
Rule 8     statement_list -> statement_list statement
Rule 9     function_call -> IDENTIFIER LPAREN opt_arg_list RPAREN
Rule 10    opt_arg_list -> arg_list
Rule 11    opt_arg_list -> empty
Rule 12    arg_list -> expression
Rule 13    arg_list -> arg_list COMMA expression
Rule 14    function_definition -> FN IDENTIFIER LPAREN opt_param_list RPAREN block_statement
Rule 15    function_definition -> FN IDENTIFIER LPAREN opt_param_list RPAREN typehint block_statement
Rule 16    return_statement -> RETURN expression
Rule 17    block_statement -> LBRACE statement_list RBRACE
Rule 18    lambda_function -> FN LPAREN opt_param_list RPAREN LAMBDA block_statement
Rule 19    lambda_function -> FN LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
Rule 20    lambda_function -> LPAREN opt_param_list RPAREN LAMBDA block_statement
Rule 21    lambda_function -> LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
Rule 22    lambda_function -> LPAREN opt_param_list RPAREN LAMBDA expression
Rule 23    opt_param_list -> param_list
Rule 24    opt_param_list -> empty
Rule 25    param_list -> param
Rule 26    param_list -> param_list COMMA param
Rule 27    param -> IDENTIFIER
Rule 28    param -> IDENTIFIER typehint
Rule 29    declaration -> VAR declaration_base SEMICOLON
Rule 30    declaration -> CONST declaration_base SEMICOLON
Rule 31    declaration -> function_definition
Rule 32    declaration_base -> IDENTIFIER
Rule 33    declaration_base -> IDENTIFIER ASSIGN expression
Rule 34    declaration_base -> IDENTIFIER typehint
Rule 35    declaration_base -> IDENTIFIER typehint ASSIGN expression
Rule 36    typehint -> TYPEHINTCOLON type
Rule 37    type -> SINT
Rule 38    type -> SFLOAT
Rule 39    type -> SSTRING
Rule 40    type -> SBOOL
Rule 41    type -> SSTREAM
Rule 42    type -> SEVENT
Rule 43    ptype -> INT
Rule 44    ptype -> FLOAT
Rule 45    ptype -> STRING
Rule 46    ptype -> TRUE
Rule 47    ptype -> FALSE
Rule 48    expression -> expression PLUS expression
Rule 49    expression -> expression MINUS expression
Rule 50    expression -> expression MULTIPLY expression
Rule 51    expression -> expression DIVIDE expression
Rule 52    expression -> expression EQUALS expression
Rule 53    expression -> expression MODULUS expression
Rule 54    expression -> expression NE expression
Rule 55    expression -> expression GT expression
Rule 56    expression -> expression LT expression
Rule 57    expression -> expression GE expression
Rule 58    expression -> expression LE expression
Rule 59    expression -> expression AND expression
Rule 60    expression -> expression OR expression
Rule 61    expression -> expression CHAIN expression
Rule 62    expression -> expression STREAMSPLIT expression
Rule 63    expression -> expression STREAMMERGE expression
Rule 64    expression -> expression FEEDBACK expression
Rule 65    expression -> MINUS expression
Rule 66    expression -> PLUS expression
Rule 67    expression -> NOT expression
Rule 68    control_flow -> conditional
Rule 69    control_flow -> loop
Rule 70    control_flow -> break
Rule 71    control_flow -> continue
Rule 72    expression -> LPAREN expression RPAREN
Rule 73    expression -> INT
Rule 74    expression -> FLOAT
Rule 75    expression -> STRING
Rule 76    expression -> TRUE
Rule 77    expression -> FALSE
Rule 78    expression -> IDENTIFIER
Rule 79    expression -> function_call
Rule 80    expression -> expression TO_STREAM
Rule 81    expression -> lambda_function
Rule 82    conditional -> IF LPAREN expression RPAREN block_statement ELSE block_statement
Rule 83    conditional -> IF LPAREN expression RPAREN block_statement
Rule 84    loop -> FOR LPAREN declaration SEMICOLON expression SEMICOLON expression RPAREN block_statement
Rule 85    loop -> WHILE LPAREN expression RPAREN block_statement
Rule 86    break -> BREAK SEMICOLON
Rule 87    continue -> CONTINUE SEMICOLON
Rule 88    assignment -> IDENTIFIER ASSIGN expression
Rule 89    empty -> <empty>

Terminals, with rules where they appear

AND                  : 59
ASSIGN               : 33 35 88
ATTACH               : 
BREAK                : 86
CALL                 : 
CHAIN                : 61
COMMA                : 13 26
CONST                : 30
CONTINUE             : 87
DIVIDE               : 51
ELSE                 : 82
EOF                  : 
EQUALS               : 52
EVENT                : 
FALSE                : 47 77
FEEDBACK             : 64
FILTEROP             : 
FLOAT                : 44 74
FN                   : 14 15 18 19
FOR                  : 84
GE                   : 57
GT                   : 55
IDENTIFIER           : 9 14 15 27 28 32 33 34 35 78 88
IF                   : 82 83
INT                  : 43 73
LAMBDA               : 18 19 20 21 22
LBRACE               : 17
LBRACKET             : 
LE                   : 58
LPAREN               : 9 14 15 18 19 20 21 22 72 82 83 84 85
LT                   : 56
MAP                  : 
MINUS                : 49 65
MODULUS              : 53
MULTIPLY             : 50
NE                   : 54
NEWLINE              : 
NOT                  : 67
OR                   : 60
PLUS                 : 48 66
RBRACE               : 17
RBRACKET             : 
REDUCE               : 
RETURN               : 16
RPAREN               : 9 14 15 18 19 20 21 22 72 82 83 84 85
SBOOL                : 40
SEMICOLON            : 3 4 6 29 30 84 84 86 87
SEVENT               : 42
SFLOAT               : 38
SINT                 : 37
SSTREAM              : 41
SSTRING              : 39
STREAM               : 
STREAMMERGE          : 63
STREAMSPLIT          : 62
STRING               : 45 75
TO_STREAM            : 80
TRUE                 : 46 76
TYPEHINTCOLON        : 36
VAR                  : 29
WHILE                : 85
error                : 

Nonterminals, with rules where they appear

arg_list             : 10 13
assignment           : 6
block_statement      : 14 15 18 19 20 21 82 82 83 84 85
break                : 70
conditional          : 68
continue             : 71
control_flow         : 5
declaration          : 2 84
declaration_base     : 29 30
empty                : 11 24
expression           : 3 12 13 16 22 33 35 48 48 49 49 50 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60 60 61 61 62 62 63 63 64 64 65 66 67 72 80 82 83 84 84 85 88
function_call        : 79
function_definition  : 31
lambda_function      : 81
loop                 : 69
opt_arg_list         : 9
opt_param_list       : 14 15 18 19 20 21 22
param                : 25 26
param_list           : 23 26
program              : 0
ptype                : 
return_statement     : 4
statement            : 7 8
statement_list       : 1 8 17
type                 : 36
typehint             : 15 19 21 28 34 35

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (7) statement_list -> . statement
    (8) statement_list -> . statement_list statement
    (2) statement -> . declaration
    (3) statement -> . expression SEMICOLON
    (4) statement -> . return_statement SEMICOLON
    (5) statement -> . control_flow
    (6) statement -> . assignment SEMICOLON
    (29) declaration -> . VAR declaration_base SEMICOLON
    (30) declaration -> . CONST declaration_base SEMICOLON
    (31) declaration -> . function_definition
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression MULTIPLY expression
    (51) expression -> . expression DIVIDE expression
    (52) expression -> . expression EQUALS expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression NE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression GE expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . expression CHAIN expression
    (62) expression -> . expression STREAMSPLIT expression
    (63) expression -> . expression STREAMMERGE expression
    (64) expression -> . expression FEEDBACK expression
    (65) expression -> . MINUS expression
    (66) expression -> . PLUS expression
    (67) expression -> . NOT expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . INT
    (74) expression -> . FLOAT
    (75) expression -> . STRING
    (76) expression -> . TRUE
    (77) expression -> . FALSE
    (78) expression -> . IDENTIFIER
    (79) expression -> . function_call
    (80) expression -> . expression TO_STREAM
    (81) expression -> . lambda_function
    (16) return_statement -> . RETURN expression
    (68) control_flow -> . conditional
    (69) control_flow -> . loop
    (70) control_flow -> . break
    (71) control_flow -> . continue
    (88) assignment -> . IDENTIFIER ASSIGN expression
    (14) function_definition -> . FN IDENTIFIER LPAREN opt_param_list RPAREN block_statement
    (15) function_definition -> . FN IDENTIFIER LPAREN opt_param_list RPAREN typehint block_statement
    (9) function_call -> . IDENTIFIER LPAREN opt_arg_list RPAREN
    (18) lambda_function -> . FN LPAREN opt_param_list RPAREN LAMBDA block_statement
    (19) lambda_function -> . FN LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (20) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA block_statement
    (21) lambda_function -> . LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (22) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA expression
    (82) conditional -> . IF LPAREN expression RPAREN block_statement ELSE block_statement
    (83) conditional -> . IF LPAREN expression RPAREN block_statement
    (84) loop -> . FOR LPAREN declaration SEMICOLON expression SEMICOLON expression RPAREN block_statement
    (85) loop -> . WHILE LPAREN expression RPAREN block_statement
    (86) break -> . BREAK SEMICOLON
    (87) continue -> . CONTINUE SEMICOLON

    VAR             shift and go to state 9
    CONST           shift and go to state 10
    MINUS           shift and go to state 13
    PLUS            shift and go to state 12
    NOT             shift and go to state 14
    LPAREN          shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    IDENTIFIER      shift and go to state 21
    RETURN          shift and go to state 24
    FN              shift and go to state 29
    IF              shift and go to state 30
    FOR             shift and go to state 31
    WHILE           shift and go to state 32
    BREAK           shift and go to state 33
    CONTINUE        shift and go to state 34

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    expression                     shift and go to state 5
    return_statement               shift and go to state 6
    control_flow                   shift and go to state 7
    assignment                     shift and go to state 8
    function_definition            shift and go to state 11
    function_call                  shift and go to state 22
    lambda_function                shift and go to state 23
    conditional                    shift and go to state 25
    loop                           shift and go to state 26
    break                          shift and go to state 27
    continue                       shift and go to state 28

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .
    (8) statement_list -> statement_list . statement
    (2) statement -> . declaration
    (3) statement -> . expression SEMICOLON
    (4) statement -> . return_statement SEMICOLON
    (5) statement -> . control_flow
    (6) statement -> . assignment SEMICOLON
    (29) declaration -> . VAR declaration_base SEMICOLON
    (30) declaration -> . CONST declaration_base SEMICOLON
    (31) declaration -> . function_definition
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression MULTIPLY expression
    (51) expression -> . expression DIVIDE expression
    (52) expression -> . expression EQUALS expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression NE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression GE expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . expression CHAIN expression
    (62) expression -> . expression STREAMSPLIT expression
    (63) expression -> . expression STREAMMERGE expression
    (64) expression -> . expression FEEDBACK expression
    (65) expression -> . MINUS expression
    (66) expression -> . PLUS expression
    (67) expression -> . NOT expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . INT
    (74) expression -> . FLOAT
    (75) expression -> . STRING
    (76) expression -> . TRUE
    (77) expression -> . FALSE
    (78) expression -> . IDENTIFIER
    (79) expression -> . function_call
    (80) expression -> . expression TO_STREAM
    (81) expression -> . lambda_function
    (16) return_statement -> . RETURN expression
    (68) control_flow -> . conditional
    (69) control_flow -> . loop
    (70) control_flow -> . break
    (71) control_flow -> . continue
    (88) assignment -> . IDENTIFIER ASSIGN expression
    (14) function_definition -> . FN IDENTIFIER LPAREN opt_param_list RPAREN block_statement
    (15) function_definition -> . FN IDENTIFIER LPAREN opt_param_list RPAREN typehint block_statement
    (9) function_call -> . IDENTIFIER LPAREN opt_arg_list RPAREN
    (18) lambda_function -> . FN LPAREN opt_param_list RPAREN LAMBDA block_statement
    (19) lambda_function -> . FN LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (20) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA block_statement
    (21) lambda_function -> . LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (22) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA expression
    (82) conditional -> . IF LPAREN expression RPAREN block_statement ELSE block_statement
    (83) conditional -> . IF LPAREN expression RPAREN block_statement
    (84) loop -> . FOR LPAREN declaration SEMICOLON expression SEMICOLON expression RPAREN block_statement
    (85) loop -> . WHILE LPAREN expression RPAREN block_statement
    (86) break -> . BREAK SEMICOLON
    (87) continue -> . CONTINUE SEMICOLON

    $end            reduce using rule 1 (program -> statement_list .)
    VAR             shift and go to state 9
    CONST           shift and go to state 10
    MINUS           shift and go to state 13
    PLUS            shift and go to state 12
    NOT             shift and go to state 14
    LPAREN          shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    IDENTIFIER      shift and go to state 21
    RETURN          shift and go to state 24
    FN              shift and go to state 29
    IF              shift and go to state 30
    FOR             shift and go to state 31
    WHILE           shift and go to state 32
    BREAK           shift and go to state 33
    CONTINUE        shift and go to state 34

    statement                      shift and go to state 35
    declaration                    shift and go to state 4
    expression                     shift and go to state 5
    return_statement               shift and go to state 6
    control_flow                   shift and go to state 7
    assignment                     shift and go to state 8
    function_definition            shift and go to state 11
    function_call                  shift and go to state 22
    lambda_function                shift and go to state 23
    conditional                    shift and go to state 25
    loop                           shift and go to state 26
    break                          shift and go to state 27
    continue                       shift and go to state 28

state 3

    (7) statement_list -> statement .

    VAR             reduce using rule 7 (statement_list -> statement .)
    CONST           reduce using rule 7 (statement_list -> statement .)
    MINUS           reduce using rule 7 (statement_list -> statement .)
    PLUS            reduce using rule 7 (statement_list -> statement .)
    NOT             reduce using rule 7 (statement_list -> statement .)
    LPAREN          reduce using rule 7 (statement_list -> statement .)
    INT             reduce using rule 7 (statement_list -> statement .)
    FLOAT           reduce using rule 7 (statement_list -> statement .)
    STRING          reduce using rule 7 (statement_list -> statement .)
    TRUE            reduce using rule 7 (statement_list -> statement .)
    FALSE           reduce using rule 7 (statement_list -> statement .)
    IDENTIFIER      reduce using rule 7 (statement_list -> statement .)
    RETURN          reduce using rule 7 (statement_list -> statement .)
    FN              reduce using rule 7 (statement_list -> statement .)
    IF              reduce using rule 7 (statement_list -> statement .)
    FOR             reduce using rule 7 (statement_list -> statement .)
    WHILE           reduce using rule 7 (statement_list -> statement .)
    BREAK           reduce using rule 7 (statement_list -> statement .)
    CONTINUE        reduce using rule 7 (statement_list -> statement .)
    $end            reduce using rule 7 (statement_list -> statement .)
    RBRACE          reduce using rule 7 (statement_list -> statement .)


state 4

    (2) statement -> declaration .

    VAR             reduce using rule 2 (statement -> declaration .)
    CONST           reduce using rule 2 (statement -> declaration .)
    MINUS           reduce using rule 2 (statement -> declaration .)
    PLUS            reduce using rule 2 (statement -> declaration .)
    NOT             reduce using rule 2 (statement -> declaration .)
    LPAREN          reduce using rule 2 (statement -> declaration .)
    INT             reduce using rule 2 (statement -> declaration .)
    FLOAT           reduce using rule 2 (statement -> declaration .)
    STRING          reduce using rule 2 (statement -> declaration .)
    TRUE            reduce using rule 2 (statement -> declaration .)
    FALSE           reduce using rule 2 (statement -> declaration .)
    IDENTIFIER      reduce using rule 2 (statement -> declaration .)
    RETURN          reduce using rule 2 (statement -> declaration .)
    FN              reduce using rule 2 (statement -> declaration .)
    IF              reduce using rule 2 (statement -> declaration .)
    FOR             reduce using rule 2 (statement -> declaration .)
    WHILE           reduce using rule 2 (statement -> declaration .)
    BREAK           reduce using rule 2 (statement -> declaration .)
    CONTINUE        reduce using rule 2 (statement -> declaration .)
    $end            reduce using rule 2 (statement -> declaration .)
    RBRACE          reduce using rule 2 (statement -> declaration .)


state 5

    (3) statement -> expression . SEMICOLON
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . MULTIPLY expression
    (51) expression -> expression . DIVIDE expression
    (52) expression -> expression . EQUALS expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . NE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . GE expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (61) expression -> expression . CHAIN expression
    (62) expression -> expression . STREAMSPLIT expression
    (63) expression -> expression . STREAMMERGE expression
    (64) expression -> expression . FEEDBACK expression
    (80) expression -> expression . TO_STREAM

    SEMICOLON       shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    EQUALS          shift and go to state 41
    MODULUS         shift and go to state 42
    NE              shift and go to state 43
    GT              shift and go to state 44
    LT              shift and go to state 45
    GE              shift and go to state 46
    LE              shift and go to state 47
    AND             shift and go to state 48
    OR              shift and go to state 49
    CHAIN           shift and go to state 50
    STREAMSPLIT     shift and go to state 51
    STREAMMERGE     shift and go to state 52
    FEEDBACK        shift and go to state 53
    TO_STREAM       shift and go to state 54


state 6

    (4) statement -> return_statement . SEMICOLON

    SEMICOLON       shift and go to state 55


state 7

    (5) statement -> control_flow .

    VAR             reduce using rule 5 (statement -> control_flow .)
    CONST           reduce using rule 5 (statement -> control_flow .)
    MINUS           reduce using rule 5 (statement -> control_flow .)
    PLUS            reduce using rule 5 (statement -> control_flow .)
    NOT             reduce using rule 5 (statement -> control_flow .)
    LPAREN          reduce using rule 5 (statement -> control_flow .)
    INT             reduce using rule 5 (statement -> control_flow .)
    FLOAT           reduce using rule 5 (statement -> control_flow .)
    STRING          reduce using rule 5 (statement -> control_flow .)
    TRUE            reduce using rule 5 (statement -> control_flow .)
    FALSE           reduce using rule 5 (statement -> control_flow .)
    IDENTIFIER      reduce using rule 5 (statement -> control_flow .)
    RETURN          reduce using rule 5 (statement -> control_flow .)
    FN              reduce using rule 5 (statement -> control_flow .)
    IF              reduce using rule 5 (statement -> control_flow .)
    FOR             reduce using rule 5 (statement -> control_flow .)
    WHILE           reduce using rule 5 (statement -> control_flow .)
    BREAK           reduce using rule 5 (statement -> control_flow .)
    CONTINUE        reduce using rule 5 (statement -> control_flow .)
    $end            reduce using rule 5 (statement -> control_flow .)
    RBRACE          reduce using rule 5 (statement -> control_flow .)


state 8

    (6) statement -> assignment . SEMICOLON

    SEMICOLON       shift and go to state 56


state 9

    (29) declaration -> VAR . declaration_base SEMICOLON
    (32) declaration_base -> . IDENTIFIER
    (33) declaration_base -> . IDENTIFIER ASSIGN expression
    (34) declaration_base -> . IDENTIFIER typehint
    (35) declaration_base -> . IDENTIFIER typehint ASSIGN expression

    IDENTIFIER      shift and go to state 58

    declaration_base               shift and go to state 57

state 10

    (30) declaration -> CONST . declaration_base SEMICOLON
    (32) declaration_base -> . IDENTIFIER
    (33) declaration_base -> . IDENTIFIER ASSIGN expression
    (34) declaration_base -> . IDENTIFIER typehint
    (35) declaration_base -> . IDENTIFIER typehint ASSIGN expression

    IDENTIFIER      shift and go to state 58

    declaration_base               shift and go to state 59

state 11

    (31) declaration -> function_definition .

    VAR             reduce using rule 31 (declaration -> function_definition .)
    CONST           reduce using rule 31 (declaration -> function_definition .)
    MINUS           reduce using rule 31 (declaration -> function_definition .)
    PLUS            reduce using rule 31 (declaration -> function_definition .)
    NOT             reduce using rule 31 (declaration -> function_definition .)
    LPAREN          reduce using rule 31 (declaration -> function_definition .)
    INT             reduce using rule 31 (declaration -> function_definition .)
    FLOAT           reduce using rule 31 (declaration -> function_definition .)
    STRING          reduce using rule 31 (declaration -> function_definition .)
    TRUE            reduce using rule 31 (declaration -> function_definition .)
    FALSE           reduce using rule 31 (declaration -> function_definition .)
    IDENTIFIER      reduce using rule 31 (declaration -> function_definition .)
    RETURN          reduce using rule 31 (declaration -> function_definition .)
    FN              reduce using rule 31 (declaration -> function_definition .)
    IF              reduce using rule 31 (declaration -> function_definition .)
    FOR             reduce using rule 31 (declaration -> function_definition .)
    WHILE           reduce using rule 31 (declaration -> function_definition .)
    BREAK           reduce using rule 31 (declaration -> function_definition .)
    CONTINUE        reduce using rule 31 (declaration -> function_definition .)
    $end            reduce using rule 31 (declaration -> function_definition .)
    SEMICOLON       reduce using rule 31 (declaration -> function_definition .)
    RBRACE          reduce using rule 31 (declaration -> function_definition .)


state 12

    (66) expression -> PLUS . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression MULTIPLY expression
    (51) expression -> . expression DIVIDE expression
    (52) expression -> . expression EQUALS expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression NE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression GE expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . expression CHAIN expression
    (62) expression -> . expression STREAMSPLIT expression
    (63) expression -> . expression STREAMMERGE expression
    (64) expression -> . expression FEEDBACK expression
    (65) expression -> . MINUS expression
    (66) expression -> . PLUS expression
    (67) expression -> . NOT expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . INT
    (74) expression -> . FLOAT
    (75) expression -> . STRING
    (76) expression -> . TRUE
    (77) expression -> . FALSE
    (78) expression -> . IDENTIFIER
    (79) expression -> . function_call
    (80) expression -> . expression TO_STREAM
    (81) expression -> . lambda_function
    (9) function_call -> . IDENTIFIER LPAREN opt_arg_list RPAREN
    (18) lambda_function -> . FN LPAREN opt_param_list RPAREN LAMBDA block_statement
    (19) lambda_function -> . FN LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (20) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA block_statement
    (21) lambda_function -> . LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (22) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA expression

    MINUS           shift and go to state 13
    PLUS            shift and go to state 12
    NOT             shift and go to state 14
    LPAREN          shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    IDENTIFIER      shift and go to state 61
    FN              shift and go to state 62

    expression                     shift and go to state 60
    function_call                  shift and go to state 22
    lambda_function                shift and go to state 23

state 13

    (65) expression -> MINUS . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression MULTIPLY expression
    (51) expression -> . expression DIVIDE expression
    (52) expression -> . expression EQUALS expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression NE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression GE expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . expression CHAIN expression
    (62) expression -> . expression STREAMSPLIT expression
    (63) expression -> . expression STREAMMERGE expression
    (64) expression -> . expression FEEDBACK expression
    (65) expression -> . MINUS expression
    (66) expression -> . PLUS expression
    (67) expression -> . NOT expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . INT
    (74) expression -> . FLOAT
    (75) expression -> . STRING
    (76) expression -> . TRUE
    (77) expression -> . FALSE
    (78) expression -> . IDENTIFIER
    (79) expression -> . function_call
    (80) expression -> . expression TO_STREAM
    (81) expression -> . lambda_function
    (9) function_call -> . IDENTIFIER LPAREN opt_arg_list RPAREN
    (18) lambda_function -> . FN LPAREN opt_param_list RPAREN LAMBDA block_statement
    (19) lambda_function -> . FN LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (20) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA block_statement
    (21) lambda_function -> . LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (22) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA expression

    MINUS           shift and go to state 13
    PLUS            shift and go to state 12
    NOT             shift and go to state 14
    LPAREN          shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    IDENTIFIER      shift and go to state 61
    FN              shift and go to state 62

    expression                     shift and go to state 63
    function_call                  shift and go to state 22
    lambda_function                shift and go to state 23

state 14

    (67) expression -> NOT . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression MULTIPLY expression
    (51) expression -> . expression DIVIDE expression
    (52) expression -> . expression EQUALS expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression NE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression GE expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . expression CHAIN expression
    (62) expression -> . expression STREAMSPLIT expression
    (63) expression -> . expression STREAMMERGE expression
    (64) expression -> . expression FEEDBACK expression
    (65) expression -> . MINUS expression
    (66) expression -> . PLUS expression
    (67) expression -> . NOT expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . INT
    (74) expression -> . FLOAT
    (75) expression -> . STRING
    (76) expression -> . TRUE
    (77) expression -> . FALSE
    (78) expression -> . IDENTIFIER
    (79) expression -> . function_call
    (80) expression -> . expression TO_STREAM
    (81) expression -> . lambda_function
    (9) function_call -> . IDENTIFIER LPAREN opt_arg_list RPAREN
    (18) lambda_function -> . FN LPAREN opt_param_list RPAREN LAMBDA block_statement
    (19) lambda_function -> . FN LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (20) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA block_statement
    (21) lambda_function -> . LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (22) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA expression

    MINUS           shift and go to state 13
    PLUS            shift and go to state 12
    NOT             shift and go to state 14
    LPAREN          shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    IDENTIFIER      shift and go to state 61
    FN              shift and go to state 62

    expression                     shift and go to state 64
    function_call                  shift and go to state 22
    lambda_function                shift and go to state 23

state 15

    (72) expression -> LPAREN . expression RPAREN
    (20) lambda_function -> LPAREN . opt_param_list RPAREN LAMBDA block_statement
    (21) lambda_function -> LPAREN . opt_param_list RPAREN typehint LAMBDA block_statement
    (22) lambda_function -> LPAREN . opt_param_list RPAREN LAMBDA expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression MULTIPLY expression
    (51) expression -> . expression DIVIDE expression
    (52) expression -> . expression EQUALS expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression NE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression GE expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . expression CHAIN expression
    (62) expression -> . expression STREAMSPLIT expression
    (63) expression -> . expression STREAMMERGE expression
    (64) expression -> . expression FEEDBACK expression
    (65) expression -> . MINUS expression
    (66) expression -> . PLUS expression
    (67) expression -> . NOT expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . INT
    (74) expression -> . FLOAT
    (75) expression -> . STRING
    (76) expression -> . TRUE
    (77) expression -> . FALSE
    (78) expression -> . IDENTIFIER
    (79) expression -> . function_call
    (80) expression -> . expression TO_STREAM
    (81) expression -> . lambda_function
    (23) opt_param_list -> . param_list
    (24) opt_param_list -> . empty
    (9) function_call -> . IDENTIFIER LPAREN opt_arg_list RPAREN
    (18) lambda_function -> . FN LPAREN opt_param_list RPAREN LAMBDA block_statement
    (19) lambda_function -> . FN LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (20) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA block_statement
    (21) lambda_function -> . LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (22) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA expression
    (25) param_list -> . param
    (26) param_list -> . param_list COMMA param
    (89) empty -> .
    (27) param -> . IDENTIFIER
    (28) param -> . IDENTIFIER typehint

    MINUS           shift and go to state 13
    PLUS            shift and go to state 12
    NOT             shift and go to state 14
    LPAREN          shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    IDENTIFIER      shift and go to state 67
    FN              shift and go to state 62
    RPAREN          reduce using rule 89 (empty -> .)

    expression                     shift and go to state 65
    opt_param_list                 shift and go to state 66
    function_call                  shift and go to state 22
    lambda_function                shift and go to state 23
    param_list                     shift and go to state 68
    empty                          shift and go to state 69
    param                          shift and go to state 70

state 16

    (73) expression -> INT .

    SEMICOLON       reduce using rule 73 (expression -> INT .)
    PLUS            reduce using rule 73 (expression -> INT .)
    MINUS           reduce using rule 73 (expression -> INT .)
    MULTIPLY        reduce using rule 73 (expression -> INT .)
    DIVIDE          reduce using rule 73 (expression -> INT .)
    EQUALS          reduce using rule 73 (expression -> INT .)
    MODULUS         reduce using rule 73 (expression -> INT .)
    NE              reduce using rule 73 (expression -> INT .)
    GT              reduce using rule 73 (expression -> INT .)
    LT              reduce using rule 73 (expression -> INT .)
    GE              reduce using rule 73 (expression -> INT .)
    LE              reduce using rule 73 (expression -> INT .)
    AND             reduce using rule 73 (expression -> INT .)
    OR              reduce using rule 73 (expression -> INT .)
    CHAIN           reduce using rule 73 (expression -> INT .)
    STREAMSPLIT     reduce using rule 73 (expression -> INT .)
    STREAMMERGE     reduce using rule 73 (expression -> INT .)
    FEEDBACK        reduce using rule 73 (expression -> INT .)
    TO_STREAM       reduce using rule 73 (expression -> INT .)
    RPAREN          reduce using rule 73 (expression -> INT .)
    COMMA           reduce using rule 73 (expression -> INT .)


state 17

    (74) expression -> FLOAT .

    SEMICOLON       reduce using rule 74 (expression -> FLOAT .)
    PLUS            reduce using rule 74 (expression -> FLOAT .)
    MINUS           reduce using rule 74 (expression -> FLOAT .)
    MULTIPLY        reduce using rule 74 (expression -> FLOAT .)
    DIVIDE          reduce using rule 74 (expression -> FLOAT .)
    EQUALS          reduce using rule 74 (expression -> FLOAT .)
    MODULUS         reduce using rule 74 (expression -> FLOAT .)
    NE              reduce using rule 74 (expression -> FLOAT .)
    GT              reduce using rule 74 (expression -> FLOAT .)
    LT              reduce using rule 74 (expression -> FLOAT .)
    GE              reduce using rule 74 (expression -> FLOAT .)
    LE              reduce using rule 74 (expression -> FLOAT .)
    AND             reduce using rule 74 (expression -> FLOAT .)
    OR              reduce using rule 74 (expression -> FLOAT .)
    CHAIN           reduce using rule 74 (expression -> FLOAT .)
    STREAMSPLIT     reduce using rule 74 (expression -> FLOAT .)
    STREAMMERGE     reduce using rule 74 (expression -> FLOAT .)
    FEEDBACK        reduce using rule 74 (expression -> FLOAT .)
    TO_STREAM       reduce using rule 74 (expression -> FLOAT .)
    RPAREN          reduce using rule 74 (expression -> FLOAT .)
    COMMA           reduce using rule 74 (expression -> FLOAT .)


state 18

    (75) expression -> STRING .

    SEMICOLON       reduce using rule 75 (expression -> STRING .)
    PLUS            reduce using rule 75 (expression -> STRING .)
    MINUS           reduce using rule 75 (expression -> STRING .)
    MULTIPLY        reduce using rule 75 (expression -> STRING .)
    DIVIDE          reduce using rule 75 (expression -> STRING .)
    EQUALS          reduce using rule 75 (expression -> STRING .)
    MODULUS         reduce using rule 75 (expression -> STRING .)
    NE              reduce using rule 75 (expression -> STRING .)
    GT              reduce using rule 75 (expression -> STRING .)
    LT              reduce using rule 75 (expression -> STRING .)
    GE              reduce using rule 75 (expression -> STRING .)
    LE              reduce using rule 75 (expression -> STRING .)
    AND             reduce using rule 75 (expression -> STRING .)
    OR              reduce using rule 75 (expression -> STRING .)
    CHAIN           reduce using rule 75 (expression -> STRING .)
    STREAMSPLIT     reduce using rule 75 (expression -> STRING .)
    STREAMMERGE     reduce using rule 75 (expression -> STRING .)
    FEEDBACK        reduce using rule 75 (expression -> STRING .)
    TO_STREAM       reduce using rule 75 (expression -> STRING .)
    RPAREN          reduce using rule 75 (expression -> STRING .)
    COMMA           reduce using rule 75 (expression -> STRING .)


state 19

    (76) expression -> TRUE .

    SEMICOLON       reduce using rule 76 (expression -> TRUE .)
    PLUS            reduce using rule 76 (expression -> TRUE .)
    MINUS           reduce using rule 76 (expression -> TRUE .)
    MULTIPLY        reduce using rule 76 (expression -> TRUE .)
    DIVIDE          reduce using rule 76 (expression -> TRUE .)
    EQUALS          reduce using rule 76 (expression -> TRUE .)
    MODULUS         reduce using rule 76 (expression -> TRUE .)
    NE              reduce using rule 76 (expression -> TRUE .)
    GT              reduce using rule 76 (expression -> TRUE .)
    LT              reduce using rule 76 (expression -> TRUE .)
    GE              reduce using rule 76 (expression -> TRUE .)
    LE              reduce using rule 76 (expression -> TRUE .)
    AND             reduce using rule 76 (expression -> TRUE .)
    OR              reduce using rule 76 (expression -> TRUE .)
    CHAIN           reduce using rule 76 (expression -> TRUE .)
    STREAMSPLIT     reduce using rule 76 (expression -> TRUE .)
    STREAMMERGE     reduce using rule 76 (expression -> TRUE .)
    FEEDBACK        reduce using rule 76 (expression -> TRUE .)
    TO_STREAM       reduce using rule 76 (expression -> TRUE .)
    RPAREN          reduce using rule 76 (expression -> TRUE .)
    COMMA           reduce using rule 76 (expression -> TRUE .)


state 20

    (77) expression -> FALSE .

    SEMICOLON       reduce using rule 77 (expression -> FALSE .)
    PLUS            reduce using rule 77 (expression -> FALSE .)
    MINUS           reduce using rule 77 (expression -> FALSE .)
    MULTIPLY        reduce using rule 77 (expression -> FALSE .)
    DIVIDE          reduce using rule 77 (expression -> FALSE .)
    EQUALS          reduce using rule 77 (expression -> FALSE .)
    MODULUS         reduce using rule 77 (expression -> FALSE .)
    NE              reduce using rule 77 (expression -> FALSE .)
    GT              reduce using rule 77 (expression -> FALSE .)
    LT              reduce using rule 77 (expression -> FALSE .)
    GE              reduce using rule 77 (expression -> FALSE .)
    LE              reduce using rule 77 (expression -> FALSE .)
    AND             reduce using rule 77 (expression -> FALSE .)
    OR              reduce using rule 77 (expression -> FALSE .)
    CHAIN           reduce using rule 77 (expression -> FALSE .)
    STREAMSPLIT     reduce using rule 77 (expression -> FALSE .)
    STREAMMERGE     reduce using rule 77 (expression -> FALSE .)
    FEEDBACK        reduce using rule 77 (expression -> FALSE .)
    TO_STREAM       reduce using rule 77 (expression -> FALSE .)
    RPAREN          reduce using rule 77 (expression -> FALSE .)
    COMMA           reduce using rule 77 (expression -> FALSE .)


state 21

    (78) expression -> IDENTIFIER .
    (88) assignment -> IDENTIFIER . ASSIGN expression
    (9) function_call -> IDENTIFIER . LPAREN opt_arg_list RPAREN

    SEMICOLON       reduce using rule 78 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 78 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 78 (expression -> IDENTIFIER .)
    MULTIPLY        reduce using rule 78 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 78 (expression -> IDENTIFIER .)
    EQUALS          reduce using rule 78 (expression -> IDENTIFIER .)
    MODULUS         reduce using rule 78 (expression -> IDENTIFIER .)
    NE              reduce using rule 78 (expression -> IDENTIFIER .)
    GT              reduce using rule 78 (expression -> IDENTIFIER .)
    LT              reduce using rule 78 (expression -> IDENTIFIER .)
    GE              reduce using rule 78 (expression -> IDENTIFIER .)
    LE              reduce using rule 78 (expression -> IDENTIFIER .)
    AND             reduce using rule 78 (expression -> IDENTIFIER .)
    OR              reduce using rule 78 (expression -> IDENTIFIER .)
    CHAIN           reduce using rule 78 (expression -> IDENTIFIER .)
    STREAMSPLIT     reduce using rule 78 (expression -> IDENTIFIER .)
    STREAMMERGE     reduce using rule 78 (expression -> IDENTIFIER .)
    FEEDBACK        reduce using rule 78 (expression -> IDENTIFIER .)
    TO_STREAM       reduce using rule 78 (expression -> IDENTIFIER .)
    ASSIGN          shift and go to state 71
    LPAREN          shift and go to state 72


state 22

    (79) expression -> function_call .

    SEMICOLON       reduce using rule 79 (expression -> function_call .)
    PLUS            reduce using rule 79 (expression -> function_call .)
    MINUS           reduce using rule 79 (expression -> function_call .)
    MULTIPLY        reduce using rule 79 (expression -> function_call .)
    DIVIDE          reduce using rule 79 (expression -> function_call .)
    EQUALS          reduce using rule 79 (expression -> function_call .)
    MODULUS         reduce using rule 79 (expression -> function_call .)
    NE              reduce using rule 79 (expression -> function_call .)
    GT              reduce using rule 79 (expression -> function_call .)
    LT              reduce using rule 79 (expression -> function_call .)
    GE              reduce using rule 79 (expression -> function_call .)
    LE              reduce using rule 79 (expression -> function_call .)
    AND             reduce using rule 79 (expression -> function_call .)
    OR              reduce using rule 79 (expression -> function_call .)
    CHAIN           reduce using rule 79 (expression -> function_call .)
    STREAMSPLIT     reduce using rule 79 (expression -> function_call .)
    STREAMMERGE     reduce using rule 79 (expression -> function_call .)
    FEEDBACK        reduce using rule 79 (expression -> function_call .)
    TO_STREAM       reduce using rule 79 (expression -> function_call .)
    RPAREN          reduce using rule 79 (expression -> function_call .)
    COMMA           reduce using rule 79 (expression -> function_call .)


state 23

    (81) expression -> lambda_function .

    SEMICOLON       reduce using rule 81 (expression -> lambda_function .)
    PLUS            reduce using rule 81 (expression -> lambda_function .)
    MINUS           reduce using rule 81 (expression -> lambda_function .)
    MULTIPLY        reduce using rule 81 (expression -> lambda_function .)
    DIVIDE          reduce using rule 81 (expression -> lambda_function .)
    EQUALS          reduce using rule 81 (expression -> lambda_function .)
    MODULUS         reduce using rule 81 (expression -> lambda_function .)
    NE              reduce using rule 81 (expression -> lambda_function .)
    GT              reduce using rule 81 (expression -> lambda_function .)
    LT              reduce using rule 81 (expression -> lambda_function .)
    GE              reduce using rule 81 (expression -> lambda_function .)
    LE              reduce using rule 81 (expression -> lambda_function .)
    AND             reduce using rule 81 (expression -> lambda_function .)
    OR              reduce using rule 81 (expression -> lambda_function .)
    CHAIN           reduce using rule 81 (expression -> lambda_function .)
    STREAMSPLIT     reduce using rule 81 (expression -> lambda_function .)
    STREAMMERGE     reduce using rule 81 (expression -> lambda_function .)
    FEEDBACK        reduce using rule 81 (expression -> lambda_function .)
    TO_STREAM       reduce using rule 81 (expression -> lambda_function .)
    RPAREN          reduce using rule 81 (expression -> lambda_function .)
    COMMA           reduce using rule 81 (expression -> lambda_function .)


state 24

    (16) return_statement -> RETURN . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression MULTIPLY expression
    (51) expression -> . expression DIVIDE expression
    (52) expression -> . expression EQUALS expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression NE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression GE expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . expression CHAIN expression
    (62) expression -> . expression STREAMSPLIT expression
    (63) expression -> . expression STREAMMERGE expression
    (64) expression -> . expression FEEDBACK expression
    (65) expression -> . MINUS expression
    (66) expression -> . PLUS expression
    (67) expression -> . NOT expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . INT
    (74) expression -> . FLOAT
    (75) expression -> . STRING
    (76) expression -> . TRUE
    (77) expression -> . FALSE
    (78) expression -> . IDENTIFIER
    (79) expression -> . function_call
    (80) expression -> . expression TO_STREAM
    (81) expression -> . lambda_function
    (9) function_call -> . IDENTIFIER LPAREN opt_arg_list RPAREN
    (18) lambda_function -> . FN LPAREN opt_param_list RPAREN LAMBDA block_statement
    (19) lambda_function -> . FN LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (20) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA block_statement
    (21) lambda_function -> . LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (22) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA expression

    MINUS           shift and go to state 13
    PLUS            shift and go to state 12
    NOT             shift and go to state 14
    LPAREN          shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    IDENTIFIER      shift and go to state 61
    FN              shift and go to state 62

    expression                     shift and go to state 73
    function_call                  shift and go to state 22
    lambda_function                shift and go to state 23

state 25

    (68) control_flow -> conditional .

    VAR             reduce using rule 68 (control_flow -> conditional .)
    CONST           reduce using rule 68 (control_flow -> conditional .)
    MINUS           reduce using rule 68 (control_flow -> conditional .)
    PLUS            reduce using rule 68 (control_flow -> conditional .)
    NOT             reduce using rule 68 (control_flow -> conditional .)
    LPAREN          reduce using rule 68 (control_flow -> conditional .)
    INT             reduce using rule 68 (control_flow -> conditional .)
    FLOAT           reduce using rule 68 (control_flow -> conditional .)
    STRING          reduce using rule 68 (control_flow -> conditional .)
    TRUE            reduce using rule 68 (control_flow -> conditional .)
    FALSE           reduce using rule 68 (control_flow -> conditional .)
    IDENTIFIER      reduce using rule 68 (control_flow -> conditional .)
    RETURN          reduce using rule 68 (control_flow -> conditional .)
    FN              reduce using rule 68 (control_flow -> conditional .)
    IF              reduce using rule 68 (control_flow -> conditional .)
    FOR             reduce using rule 68 (control_flow -> conditional .)
    WHILE           reduce using rule 68 (control_flow -> conditional .)
    BREAK           reduce using rule 68 (control_flow -> conditional .)
    CONTINUE        reduce using rule 68 (control_flow -> conditional .)
    $end            reduce using rule 68 (control_flow -> conditional .)
    RBRACE          reduce using rule 68 (control_flow -> conditional .)


state 26

    (69) control_flow -> loop .

    VAR             reduce using rule 69 (control_flow -> loop .)
    CONST           reduce using rule 69 (control_flow -> loop .)
    MINUS           reduce using rule 69 (control_flow -> loop .)
    PLUS            reduce using rule 69 (control_flow -> loop .)
    NOT             reduce using rule 69 (control_flow -> loop .)
    LPAREN          reduce using rule 69 (control_flow -> loop .)
    INT             reduce using rule 69 (control_flow -> loop .)
    FLOAT           reduce using rule 69 (control_flow -> loop .)
    STRING          reduce using rule 69 (control_flow -> loop .)
    TRUE            reduce using rule 69 (control_flow -> loop .)
    FALSE           reduce using rule 69 (control_flow -> loop .)
    IDENTIFIER      reduce using rule 69 (control_flow -> loop .)
    RETURN          reduce using rule 69 (control_flow -> loop .)
    FN              reduce using rule 69 (control_flow -> loop .)
    IF              reduce using rule 69 (control_flow -> loop .)
    FOR             reduce using rule 69 (control_flow -> loop .)
    WHILE           reduce using rule 69 (control_flow -> loop .)
    BREAK           reduce using rule 69 (control_flow -> loop .)
    CONTINUE        reduce using rule 69 (control_flow -> loop .)
    $end            reduce using rule 69 (control_flow -> loop .)
    RBRACE          reduce using rule 69 (control_flow -> loop .)


state 27

    (70) control_flow -> break .

    VAR             reduce using rule 70 (control_flow -> break .)
    CONST           reduce using rule 70 (control_flow -> break .)
    MINUS           reduce using rule 70 (control_flow -> break .)
    PLUS            reduce using rule 70 (control_flow -> break .)
    NOT             reduce using rule 70 (control_flow -> break .)
    LPAREN          reduce using rule 70 (control_flow -> break .)
    INT             reduce using rule 70 (control_flow -> break .)
    FLOAT           reduce using rule 70 (control_flow -> break .)
    STRING          reduce using rule 70 (control_flow -> break .)
    TRUE            reduce using rule 70 (control_flow -> break .)
    FALSE           reduce using rule 70 (control_flow -> break .)
    IDENTIFIER      reduce using rule 70 (control_flow -> break .)
    RETURN          reduce using rule 70 (control_flow -> break .)
    FN              reduce using rule 70 (control_flow -> break .)
    IF              reduce using rule 70 (control_flow -> break .)
    FOR             reduce using rule 70 (control_flow -> break .)
    WHILE           reduce using rule 70 (control_flow -> break .)
    BREAK           reduce using rule 70 (control_flow -> break .)
    CONTINUE        reduce using rule 70 (control_flow -> break .)
    $end            reduce using rule 70 (control_flow -> break .)
    RBRACE          reduce using rule 70 (control_flow -> break .)


state 28

    (71) control_flow -> continue .

    VAR             reduce using rule 71 (control_flow -> continue .)
    CONST           reduce using rule 71 (control_flow -> continue .)
    MINUS           reduce using rule 71 (control_flow -> continue .)
    PLUS            reduce using rule 71 (control_flow -> continue .)
    NOT             reduce using rule 71 (control_flow -> continue .)
    LPAREN          reduce using rule 71 (control_flow -> continue .)
    INT             reduce using rule 71 (control_flow -> continue .)
    FLOAT           reduce using rule 71 (control_flow -> continue .)
    STRING          reduce using rule 71 (control_flow -> continue .)
    TRUE            reduce using rule 71 (control_flow -> continue .)
    FALSE           reduce using rule 71 (control_flow -> continue .)
    IDENTIFIER      reduce using rule 71 (control_flow -> continue .)
    RETURN          reduce using rule 71 (control_flow -> continue .)
    FN              reduce using rule 71 (control_flow -> continue .)
    IF              reduce using rule 71 (control_flow -> continue .)
    FOR             reduce using rule 71 (control_flow -> continue .)
    WHILE           reduce using rule 71 (control_flow -> continue .)
    BREAK           reduce using rule 71 (control_flow -> continue .)
    CONTINUE        reduce using rule 71 (control_flow -> continue .)
    $end            reduce using rule 71 (control_flow -> continue .)
    RBRACE          reduce using rule 71 (control_flow -> continue .)


state 29

    (14) function_definition -> FN . IDENTIFIER LPAREN opt_param_list RPAREN block_statement
    (15) function_definition -> FN . IDENTIFIER LPAREN opt_param_list RPAREN typehint block_statement
    (18) lambda_function -> FN . LPAREN opt_param_list RPAREN LAMBDA block_statement
    (19) lambda_function -> FN . LPAREN opt_param_list RPAREN typehint LAMBDA block_statement

    IDENTIFIER      shift and go to state 74
    LPAREN          shift and go to state 75


state 30

    (82) conditional -> IF . LPAREN expression RPAREN block_statement ELSE block_statement
    (83) conditional -> IF . LPAREN expression RPAREN block_statement

    LPAREN          shift and go to state 76


state 31

    (84) loop -> FOR . LPAREN declaration SEMICOLON expression SEMICOLON expression RPAREN block_statement

    LPAREN          shift and go to state 77


state 32

    (85) loop -> WHILE . LPAREN expression RPAREN block_statement

    LPAREN          shift and go to state 78


state 33

    (86) break -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 79


state 34

    (87) continue -> CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 80


state 35

    (8) statement_list -> statement_list statement .

    VAR             reduce using rule 8 (statement_list -> statement_list statement .)
    CONST           reduce using rule 8 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 8 (statement_list -> statement_list statement .)
    PLUS            reduce using rule 8 (statement_list -> statement_list statement .)
    NOT             reduce using rule 8 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 8 (statement_list -> statement_list statement .)
    INT             reduce using rule 8 (statement_list -> statement_list statement .)
    FLOAT           reduce using rule 8 (statement_list -> statement_list statement .)
    STRING          reduce using rule 8 (statement_list -> statement_list statement .)
    TRUE            reduce using rule 8 (statement_list -> statement_list statement .)
    FALSE           reduce using rule 8 (statement_list -> statement_list statement .)
    IDENTIFIER      reduce using rule 8 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 8 (statement_list -> statement_list statement .)
    FN              reduce using rule 8 (statement_list -> statement_list statement .)
    IF              reduce using rule 8 (statement_list -> statement_list statement .)
    FOR             reduce using rule 8 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 8 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 8 (statement_list -> statement_list statement .)
    CONTINUE        reduce using rule 8 (statement_list -> statement_list statement .)
    $end            reduce using rule 8 (statement_list -> statement_list statement .)
    RBRACE          reduce using rule 8 (statement_list -> statement_list statement .)


state 36

    (3) statement -> expression SEMICOLON .

    VAR             reduce using rule 3 (statement -> expression SEMICOLON .)
    CONST           reduce using rule 3 (statement -> expression SEMICOLON .)
    MINUS           reduce using rule 3 (statement -> expression SEMICOLON .)
    PLUS            reduce using rule 3 (statement -> expression SEMICOLON .)
    NOT             reduce using rule 3 (statement -> expression SEMICOLON .)
    LPAREN          reduce using rule 3 (statement -> expression SEMICOLON .)
    INT             reduce using rule 3 (statement -> expression SEMICOLON .)
    FLOAT           reduce using rule 3 (statement -> expression SEMICOLON .)
    STRING          reduce using rule 3 (statement -> expression SEMICOLON .)
    TRUE            reduce using rule 3 (statement -> expression SEMICOLON .)
    FALSE           reduce using rule 3 (statement -> expression SEMICOLON .)
    IDENTIFIER      reduce using rule 3 (statement -> expression SEMICOLON .)
    RETURN          reduce using rule 3 (statement -> expression SEMICOLON .)
    FN              reduce using rule 3 (statement -> expression SEMICOLON .)
    IF              reduce using rule 3 (statement -> expression SEMICOLON .)
    FOR             reduce using rule 3 (statement -> expression SEMICOLON .)
    WHILE           reduce using rule 3 (statement -> expression SEMICOLON .)
    BREAK           reduce using rule 3 (statement -> expression SEMICOLON .)
    CONTINUE        reduce using rule 3 (statement -> expression SEMICOLON .)
    $end            reduce using rule 3 (statement -> expression SEMICOLON .)
    RBRACE          reduce using rule 3 (statement -> expression SEMICOLON .)


state 37

    (48) expression -> expression PLUS . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression MULTIPLY expression
    (51) expression -> . expression DIVIDE expression
    (52) expression -> . expression EQUALS expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression NE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression GE expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . expression CHAIN expression
    (62) expression -> . expression STREAMSPLIT expression
    (63) expression -> . expression STREAMMERGE expression
    (64) expression -> . expression FEEDBACK expression
    (65) expression -> . MINUS expression
    (66) expression -> . PLUS expression
    (67) expression -> . NOT expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . INT
    (74) expression -> . FLOAT
    (75) expression -> . STRING
    (76) expression -> . TRUE
    (77) expression -> . FALSE
    (78) expression -> . IDENTIFIER
    (79) expression -> . function_call
    (80) expression -> . expression TO_STREAM
    (81) expression -> . lambda_function
    (9) function_call -> . IDENTIFIER LPAREN opt_arg_list RPAREN
    (18) lambda_function -> . FN LPAREN opt_param_list RPAREN LAMBDA block_statement
    (19) lambda_function -> . FN LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (20) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA block_statement
    (21) lambda_function -> . LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (22) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA expression

    MINUS           shift and go to state 13
    PLUS            shift and go to state 12
    NOT             shift and go to state 14
    LPAREN          shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    IDENTIFIER      shift and go to state 61
    FN              shift and go to state 62

    expression                     shift and go to state 81
    function_call                  shift and go to state 22
    lambda_function                shift and go to state 23

state 38

    (49) expression -> expression MINUS . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression MULTIPLY expression
    (51) expression -> . expression DIVIDE expression
    (52) expression -> . expression EQUALS expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression NE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression GE expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . expression CHAIN expression
    (62) expression -> . expression STREAMSPLIT expression
    (63) expression -> . expression STREAMMERGE expression
    (64) expression -> . expression FEEDBACK expression
    (65) expression -> . MINUS expression
    (66) expression -> . PLUS expression
    (67) expression -> . NOT expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . INT
    (74) expression -> . FLOAT
    (75) expression -> . STRING
    (76) expression -> . TRUE
    (77) expression -> . FALSE
    (78) expression -> . IDENTIFIER
    (79) expression -> . function_call
    (80) expression -> . expression TO_STREAM
    (81) expression -> . lambda_function
    (9) function_call -> . IDENTIFIER LPAREN opt_arg_list RPAREN
    (18) lambda_function -> . FN LPAREN opt_param_list RPAREN LAMBDA block_statement
    (19) lambda_function -> . FN LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (20) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA block_statement
    (21) lambda_function -> . LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (22) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA expression

    MINUS           shift and go to state 13
    PLUS            shift and go to state 12
    NOT             shift and go to state 14
    LPAREN          shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    IDENTIFIER      shift and go to state 61
    FN              shift and go to state 62

    expression                     shift and go to state 82
    function_call                  shift and go to state 22
    lambda_function                shift and go to state 23

state 39

    (50) expression -> expression MULTIPLY . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression MULTIPLY expression
    (51) expression -> . expression DIVIDE expression
    (52) expression -> . expression EQUALS expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression NE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression GE expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . expression CHAIN expression
    (62) expression -> . expression STREAMSPLIT expression
    (63) expression -> . expression STREAMMERGE expression
    (64) expression -> . expression FEEDBACK expression
    (65) expression -> . MINUS expression
    (66) expression -> . PLUS expression
    (67) expression -> . NOT expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . INT
    (74) expression -> . FLOAT
    (75) expression -> . STRING
    (76) expression -> . TRUE
    (77) expression -> . FALSE
    (78) expression -> . IDENTIFIER
    (79) expression -> . function_call
    (80) expression -> . expression TO_STREAM
    (81) expression -> . lambda_function
    (9) function_call -> . IDENTIFIER LPAREN opt_arg_list RPAREN
    (18) lambda_function -> . FN LPAREN opt_param_list RPAREN LAMBDA block_statement
    (19) lambda_function -> . FN LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (20) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA block_statement
    (21) lambda_function -> . LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (22) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA expression

    MINUS           shift and go to state 13
    PLUS            shift and go to state 12
    NOT             shift and go to state 14
    LPAREN          shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    IDENTIFIER      shift and go to state 61
    FN              shift and go to state 62

    expression                     shift and go to state 83
    function_call                  shift and go to state 22
    lambda_function                shift and go to state 23

state 40

    (51) expression -> expression DIVIDE . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression MULTIPLY expression
    (51) expression -> . expression DIVIDE expression
    (52) expression -> . expression EQUALS expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression NE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression GE expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . expression CHAIN expression
    (62) expression -> . expression STREAMSPLIT expression
    (63) expression -> . expression STREAMMERGE expression
    (64) expression -> . expression FEEDBACK expression
    (65) expression -> . MINUS expression
    (66) expression -> . PLUS expression
    (67) expression -> . NOT expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . INT
    (74) expression -> . FLOAT
    (75) expression -> . STRING
    (76) expression -> . TRUE
    (77) expression -> . FALSE
    (78) expression -> . IDENTIFIER
    (79) expression -> . function_call
    (80) expression -> . expression TO_STREAM
    (81) expression -> . lambda_function
    (9) function_call -> . IDENTIFIER LPAREN opt_arg_list RPAREN
    (18) lambda_function -> . FN LPAREN opt_param_list RPAREN LAMBDA block_statement
    (19) lambda_function -> . FN LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (20) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA block_statement
    (21) lambda_function -> . LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (22) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA expression

    MINUS           shift and go to state 13
    PLUS            shift and go to state 12
    NOT             shift and go to state 14
    LPAREN          shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    IDENTIFIER      shift and go to state 61
    FN              shift and go to state 62

    expression                     shift and go to state 84
    function_call                  shift and go to state 22
    lambda_function                shift and go to state 23

state 41

    (52) expression -> expression EQUALS . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression MULTIPLY expression
    (51) expression -> . expression DIVIDE expression
    (52) expression -> . expression EQUALS expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression NE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression GE expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . expression CHAIN expression
    (62) expression -> . expression STREAMSPLIT expression
    (63) expression -> . expression STREAMMERGE expression
    (64) expression -> . expression FEEDBACK expression
    (65) expression -> . MINUS expression
    (66) expression -> . PLUS expression
    (67) expression -> . NOT expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . INT
    (74) expression -> . FLOAT
    (75) expression -> . STRING
    (76) expression -> . TRUE
    (77) expression -> . FALSE
    (78) expression -> . IDENTIFIER
    (79) expression -> . function_call
    (80) expression -> . expression TO_STREAM
    (81) expression -> . lambda_function
    (9) function_call -> . IDENTIFIER LPAREN opt_arg_list RPAREN
    (18) lambda_function -> . FN LPAREN opt_param_list RPAREN LAMBDA block_statement
    (19) lambda_function -> . FN LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (20) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA block_statement
    (21) lambda_function -> . LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (22) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA expression

    MINUS           shift and go to state 13
    PLUS            shift and go to state 12
    NOT             shift and go to state 14
    LPAREN          shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    IDENTIFIER      shift and go to state 61
    FN              shift and go to state 62

    expression                     shift and go to state 85
    function_call                  shift and go to state 22
    lambda_function                shift and go to state 23

state 42

    (53) expression -> expression MODULUS . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression MULTIPLY expression
    (51) expression -> . expression DIVIDE expression
    (52) expression -> . expression EQUALS expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression NE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression GE expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . expression CHAIN expression
    (62) expression -> . expression STREAMSPLIT expression
    (63) expression -> . expression STREAMMERGE expression
    (64) expression -> . expression FEEDBACK expression
    (65) expression -> . MINUS expression
    (66) expression -> . PLUS expression
    (67) expression -> . NOT expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . INT
    (74) expression -> . FLOAT
    (75) expression -> . STRING
    (76) expression -> . TRUE
    (77) expression -> . FALSE
    (78) expression -> . IDENTIFIER
    (79) expression -> . function_call
    (80) expression -> . expression TO_STREAM
    (81) expression -> . lambda_function
    (9) function_call -> . IDENTIFIER LPAREN opt_arg_list RPAREN
    (18) lambda_function -> . FN LPAREN opt_param_list RPAREN LAMBDA block_statement
    (19) lambda_function -> . FN LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (20) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA block_statement
    (21) lambda_function -> . LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (22) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA expression

    MINUS           shift and go to state 13
    PLUS            shift and go to state 12
    NOT             shift and go to state 14
    LPAREN          shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    IDENTIFIER      shift and go to state 61
    FN              shift and go to state 62

    expression                     shift and go to state 86
    function_call                  shift and go to state 22
    lambda_function                shift and go to state 23

state 43

    (54) expression -> expression NE . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression MULTIPLY expression
    (51) expression -> . expression DIVIDE expression
    (52) expression -> . expression EQUALS expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression NE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression GE expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . expression CHAIN expression
    (62) expression -> . expression STREAMSPLIT expression
    (63) expression -> . expression STREAMMERGE expression
    (64) expression -> . expression FEEDBACK expression
    (65) expression -> . MINUS expression
    (66) expression -> . PLUS expression
    (67) expression -> . NOT expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . INT
    (74) expression -> . FLOAT
    (75) expression -> . STRING
    (76) expression -> . TRUE
    (77) expression -> . FALSE
    (78) expression -> . IDENTIFIER
    (79) expression -> . function_call
    (80) expression -> . expression TO_STREAM
    (81) expression -> . lambda_function
    (9) function_call -> . IDENTIFIER LPAREN opt_arg_list RPAREN
    (18) lambda_function -> . FN LPAREN opt_param_list RPAREN LAMBDA block_statement
    (19) lambda_function -> . FN LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (20) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA block_statement
    (21) lambda_function -> . LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (22) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA expression

    MINUS           shift and go to state 13
    PLUS            shift and go to state 12
    NOT             shift and go to state 14
    LPAREN          shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    IDENTIFIER      shift and go to state 61
    FN              shift and go to state 62

    expression                     shift and go to state 87
    function_call                  shift and go to state 22
    lambda_function                shift and go to state 23

state 44

    (55) expression -> expression GT . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression MULTIPLY expression
    (51) expression -> . expression DIVIDE expression
    (52) expression -> . expression EQUALS expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression NE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression GE expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . expression CHAIN expression
    (62) expression -> . expression STREAMSPLIT expression
    (63) expression -> . expression STREAMMERGE expression
    (64) expression -> . expression FEEDBACK expression
    (65) expression -> . MINUS expression
    (66) expression -> . PLUS expression
    (67) expression -> . NOT expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . INT
    (74) expression -> . FLOAT
    (75) expression -> . STRING
    (76) expression -> . TRUE
    (77) expression -> . FALSE
    (78) expression -> . IDENTIFIER
    (79) expression -> . function_call
    (80) expression -> . expression TO_STREAM
    (81) expression -> . lambda_function
    (9) function_call -> . IDENTIFIER LPAREN opt_arg_list RPAREN
    (18) lambda_function -> . FN LPAREN opt_param_list RPAREN LAMBDA block_statement
    (19) lambda_function -> . FN LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (20) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA block_statement
    (21) lambda_function -> . LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (22) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA expression

    MINUS           shift and go to state 13
    PLUS            shift and go to state 12
    NOT             shift and go to state 14
    LPAREN          shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    IDENTIFIER      shift and go to state 61
    FN              shift and go to state 62

    expression                     shift and go to state 88
    function_call                  shift and go to state 22
    lambda_function                shift and go to state 23

state 45

    (56) expression -> expression LT . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression MULTIPLY expression
    (51) expression -> . expression DIVIDE expression
    (52) expression -> . expression EQUALS expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression NE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression GE expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . expression CHAIN expression
    (62) expression -> . expression STREAMSPLIT expression
    (63) expression -> . expression STREAMMERGE expression
    (64) expression -> . expression FEEDBACK expression
    (65) expression -> . MINUS expression
    (66) expression -> . PLUS expression
    (67) expression -> . NOT expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . INT
    (74) expression -> . FLOAT
    (75) expression -> . STRING
    (76) expression -> . TRUE
    (77) expression -> . FALSE
    (78) expression -> . IDENTIFIER
    (79) expression -> . function_call
    (80) expression -> . expression TO_STREAM
    (81) expression -> . lambda_function
    (9) function_call -> . IDENTIFIER LPAREN opt_arg_list RPAREN
    (18) lambda_function -> . FN LPAREN opt_param_list RPAREN LAMBDA block_statement
    (19) lambda_function -> . FN LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (20) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA block_statement
    (21) lambda_function -> . LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (22) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA expression

    MINUS           shift and go to state 13
    PLUS            shift and go to state 12
    NOT             shift and go to state 14
    LPAREN          shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    IDENTIFIER      shift and go to state 61
    FN              shift and go to state 62

    expression                     shift and go to state 89
    function_call                  shift and go to state 22
    lambda_function                shift and go to state 23

state 46

    (57) expression -> expression GE . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression MULTIPLY expression
    (51) expression -> . expression DIVIDE expression
    (52) expression -> . expression EQUALS expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression NE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression GE expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . expression CHAIN expression
    (62) expression -> . expression STREAMSPLIT expression
    (63) expression -> . expression STREAMMERGE expression
    (64) expression -> . expression FEEDBACK expression
    (65) expression -> . MINUS expression
    (66) expression -> . PLUS expression
    (67) expression -> . NOT expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . INT
    (74) expression -> . FLOAT
    (75) expression -> . STRING
    (76) expression -> . TRUE
    (77) expression -> . FALSE
    (78) expression -> . IDENTIFIER
    (79) expression -> . function_call
    (80) expression -> . expression TO_STREAM
    (81) expression -> . lambda_function
    (9) function_call -> . IDENTIFIER LPAREN opt_arg_list RPAREN
    (18) lambda_function -> . FN LPAREN opt_param_list RPAREN LAMBDA block_statement
    (19) lambda_function -> . FN LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (20) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA block_statement
    (21) lambda_function -> . LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (22) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA expression

    MINUS           shift and go to state 13
    PLUS            shift and go to state 12
    NOT             shift and go to state 14
    LPAREN          shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    IDENTIFIER      shift and go to state 61
    FN              shift and go to state 62

    expression                     shift and go to state 90
    function_call                  shift and go to state 22
    lambda_function                shift and go to state 23

state 47

    (58) expression -> expression LE . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression MULTIPLY expression
    (51) expression -> . expression DIVIDE expression
    (52) expression -> . expression EQUALS expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression NE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression GE expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . expression CHAIN expression
    (62) expression -> . expression STREAMSPLIT expression
    (63) expression -> . expression STREAMMERGE expression
    (64) expression -> . expression FEEDBACK expression
    (65) expression -> . MINUS expression
    (66) expression -> . PLUS expression
    (67) expression -> . NOT expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . INT
    (74) expression -> . FLOAT
    (75) expression -> . STRING
    (76) expression -> . TRUE
    (77) expression -> . FALSE
    (78) expression -> . IDENTIFIER
    (79) expression -> . function_call
    (80) expression -> . expression TO_STREAM
    (81) expression -> . lambda_function
    (9) function_call -> . IDENTIFIER LPAREN opt_arg_list RPAREN
    (18) lambda_function -> . FN LPAREN opt_param_list RPAREN LAMBDA block_statement
    (19) lambda_function -> . FN LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (20) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA block_statement
    (21) lambda_function -> . LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (22) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA expression

    MINUS           shift and go to state 13
    PLUS            shift and go to state 12
    NOT             shift and go to state 14
    LPAREN          shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    IDENTIFIER      shift and go to state 61
    FN              shift and go to state 62

    expression                     shift and go to state 91
    function_call                  shift and go to state 22
    lambda_function                shift and go to state 23

state 48

    (59) expression -> expression AND . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression MULTIPLY expression
    (51) expression -> . expression DIVIDE expression
    (52) expression -> . expression EQUALS expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression NE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression GE expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . expression CHAIN expression
    (62) expression -> . expression STREAMSPLIT expression
    (63) expression -> . expression STREAMMERGE expression
    (64) expression -> . expression FEEDBACK expression
    (65) expression -> . MINUS expression
    (66) expression -> . PLUS expression
    (67) expression -> . NOT expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . INT
    (74) expression -> . FLOAT
    (75) expression -> . STRING
    (76) expression -> . TRUE
    (77) expression -> . FALSE
    (78) expression -> . IDENTIFIER
    (79) expression -> . function_call
    (80) expression -> . expression TO_STREAM
    (81) expression -> . lambda_function
    (9) function_call -> . IDENTIFIER LPAREN opt_arg_list RPAREN
    (18) lambda_function -> . FN LPAREN opt_param_list RPAREN LAMBDA block_statement
    (19) lambda_function -> . FN LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (20) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA block_statement
    (21) lambda_function -> . LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (22) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA expression

    MINUS           shift and go to state 13
    PLUS            shift and go to state 12
    NOT             shift and go to state 14
    LPAREN          shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    IDENTIFIER      shift and go to state 61
    FN              shift and go to state 62

    expression                     shift and go to state 92
    function_call                  shift and go to state 22
    lambda_function                shift and go to state 23

state 49

    (60) expression -> expression OR . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression MULTIPLY expression
    (51) expression -> . expression DIVIDE expression
    (52) expression -> . expression EQUALS expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression NE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression GE expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . expression CHAIN expression
    (62) expression -> . expression STREAMSPLIT expression
    (63) expression -> . expression STREAMMERGE expression
    (64) expression -> . expression FEEDBACK expression
    (65) expression -> . MINUS expression
    (66) expression -> . PLUS expression
    (67) expression -> . NOT expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . INT
    (74) expression -> . FLOAT
    (75) expression -> . STRING
    (76) expression -> . TRUE
    (77) expression -> . FALSE
    (78) expression -> . IDENTIFIER
    (79) expression -> . function_call
    (80) expression -> . expression TO_STREAM
    (81) expression -> . lambda_function
    (9) function_call -> . IDENTIFIER LPAREN opt_arg_list RPAREN
    (18) lambda_function -> . FN LPAREN opt_param_list RPAREN LAMBDA block_statement
    (19) lambda_function -> . FN LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (20) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA block_statement
    (21) lambda_function -> . LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (22) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA expression

    MINUS           shift and go to state 13
    PLUS            shift and go to state 12
    NOT             shift and go to state 14
    LPAREN          shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    IDENTIFIER      shift and go to state 61
    FN              shift and go to state 62

    expression                     shift and go to state 93
    function_call                  shift and go to state 22
    lambda_function                shift and go to state 23

state 50

    (61) expression -> expression CHAIN . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression MULTIPLY expression
    (51) expression -> . expression DIVIDE expression
    (52) expression -> . expression EQUALS expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression NE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression GE expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . expression CHAIN expression
    (62) expression -> . expression STREAMSPLIT expression
    (63) expression -> . expression STREAMMERGE expression
    (64) expression -> . expression FEEDBACK expression
    (65) expression -> . MINUS expression
    (66) expression -> . PLUS expression
    (67) expression -> . NOT expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . INT
    (74) expression -> . FLOAT
    (75) expression -> . STRING
    (76) expression -> . TRUE
    (77) expression -> . FALSE
    (78) expression -> . IDENTIFIER
    (79) expression -> . function_call
    (80) expression -> . expression TO_STREAM
    (81) expression -> . lambda_function
    (9) function_call -> . IDENTIFIER LPAREN opt_arg_list RPAREN
    (18) lambda_function -> . FN LPAREN opt_param_list RPAREN LAMBDA block_statement
    (19) lambda_function -> . FN LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (20) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA block_statement
    (21) lambda_function -> . LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (22) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA expression

    MINUS           shift and go to state 13
    PLUS            shift and go to state 12
    NOT             shift and go to state 14
    LPAREN          shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    IDENTIFIER      shift and go to state 61
    FN              shift and go to state 62

    expression                     shift and go to state 94
    function_call                  shift and go to state 22
    lambda_function                shift and go to state 23

state 51

    (62) expression -> expression STREAMSPLIT . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression MULTIPLY expression
    (51) expression -> . expression DIVIDE expression
    (52) expression -> . expression EQUALS expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression NE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression GE expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . expression CHAIN expression
    (62) expression -> . expression STREAMSPLIT expression
    (63) expression -> . expression STREAMMERGE expression
    (64) expression -> . expression FEEDBACK expression
    (65) expression -> . MINUS expression
    (66) expression -> . PLUS expression
    (67) expression -> . NOT expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . INT
    (74) expression -> . FLOAT
    (75) expression -> . STRING
    (76) expression -> . TRUE
    (77) expression -> . FALSE
    (78) expression -> . IDENTIFIER
    (79) expression -> . function_call
    (80) expression -> . expression TO_STREAM
    (81) expression -> . lambda_function
    (9) function_call -> . IDENTIFIER LPAREN opt_arg_list RPAREN
    (18) lambda_function -> . FN LPAREN opt_param_list RPAREN LAMBDA block_statement
    (19) lambda_function -> . FN LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (20) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA block_statement
    (21) lambda_function -> . LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (22) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA expression

    MINUS           shift and go to state 13
    PLUS            shift and go to state 12
    NOT             shift and go to state 14
    LPAREN          shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    IDENTIFIER      shift and go to state 61
    FN              shift and go to state 62

    expression                     shift and go to state 95
    function_call                  shift and go to state 22
    lambda_function                shift and go to state 23

state 52

    (63) expression -> expression STREAMMERGE . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression MULTIPLY expression
    (51) expression -> . expression DIVIDE expression
    (52) expression -> . expression EQUALS expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression NE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression GE expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . expression CHAIN expression
    (62) expression -> . expression STREAMSPLIT expression
    (63) expression -> . expression STREAMMERGE expression
    (64) expression -> . expression FEEDBACK expression
    (65) expression -> . MINUS expression
    (66) expression -> . PLUS expression
    (67) expression -> . NOT expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . INT
    (74) expression -> . FLOAT
    (75) expression -> . STRING
    (76) expression -> . TRUE
    (77) expression -> . FALSE
    (78) expression -> . IDENTIFIER
    (79) expression -> . function_call
    (80) expression -> . expression TO_STREAM
    (81) expression -> . lambda_function
    (9) function_call -> . IDENTIFIER LPAREN opt_arg_list RPAREN
    (18) lambda_function -> . FN LPAREN opt_param_list RPAREN LAMBDA block_statement
    (19) lambda_function -> . FN LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (20) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA block_statement
    (21) lambda_function -> . LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (22) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA expression

    MINUS           shift and go to state 13
    PLUS            shift and go to state 12
    NOT             shift and go to state 14
    LPAREN          shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    IDENTIFIER      shift and go to state 61
    FN              shift and go to state 62

    expression                     shift and go to state 96
    function_call                  shift and go to state 22
    lambda_function                shift and go to state 23

state 53

    (64) expression -> expression FEEDBACK . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression MULTIPLY expression
    (51) expression -> . expression DIVIDE expression
    (52) expression -> . expression EQUALS expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression NE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression GE expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . expression CHAIN expression
    (62) expression -> . expression STREAMSPLIT expression
    (63) expression -> . expression STREAMMERGE expression
    (64) expression -> . expression FEEDBACK expression
    (65) expression -> . MINUS expression
    (66) expression -> . PLUS expression
    (67) expression -> . NOT expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . INT
    (74) expression -> . FLOAT
    (75) expression -> . STRING
    (76) expression -> . TRUE
    (77) expression -> . FALSE
    (78) expression -> . IDENTIFIER
    (79) expression -> . function_call
    (80) expression -> . expression TO_STREAM
    (81) expression -> . lambda_function
    (9) function_call -> . IDENTIFIER LPAREN opt_arg_list RPAREN
    (18) lambda_function -> . FN LPAREN opt_param_list RPAREN LAMBDA block_statement
    (19) lambda_function -> . FN LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (20) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA block_statement
    (21) lambda_function -> . LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (22) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA expression

    MINUS           shift and go to state 13
    PLUS            shift and go to state 12
    NOT             shift and go to state 14
    LPAREN          shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    IDENTIFIER      shift and go to state 61
    FN              shift and go to state 62

    expression                     shift and go to state 97
    function_call                  shift and go to state 22
    lambda_function                shift and go to state 23

state 54

    (80) expression -> expression TO_STREAM .

    SEMICOLON       reduce using rule 80 (expression -> expression TO_STREAM .)
    PLUS            reduce using rule 80 (expression -> expression TO_STREAM .)
    MINUS           reduce using rule 80 (expression -> expression TO_STREAM .)
    MULTIPLY        reduce using rule 80 (expression -> expression TO_STREAM .)
    DIVIDE          reduce using rule 80 (expression -> expression TO_STREAM .)
    EQUALS          reduce using rule 80 (expression -> expression TO_STREAM .)
    MODULUS         reduce using rule 80 (expression -> expression TO_STREAM .)
    NE              reduce using rule 80 (expression -> expression TO_STREAM .)
    GT              reduce using rule 80 (expression -> expression TO_STREAM .)
    LT              reduce using rule 80 (expression -> expression TO_STREAM .)
    GE              reduce using rule 80 (expression -> expression TO_STREAM .)
    LE              reduce using rule 80 (expression -> expression TO_STREAM .)
    AND             reduce using rule 80 (expression -> expression TO_STREAM .)
    OR              reduce using rule 80 (expression -> expression TO_STREAM .)
    CHAIN           reduce using rule 80 (expression -> expression TO_STREAM .)
    STREAMSPLIT     reduce using rule 80 (expression -> expression TO_STREAM .)
    STREAMMERGE     reduce using rule 80 (expression -> expression TO_STREAM .)
    FEEDBACK        reduce using rule 80 (expression -> expression TO_STREAM .)
    TO_STREAM       reduce using rule 80 (expression -> expression TO_STREAM .)
    RPAREN          reduce using rule 80 (expression -> expression TO_STREAM .)
    COMMA           reduce using rule 80 (expression -> expression TO_STREAM .)


state 55

    (4) statement -> return_statement SEMICOLON .

    VAR             reduce using rule 4 (statement -> return_statement SEMICOLON .)
    CONST           reduce using rule 4 (statement -> return_statement SEMICOLON .)
    MINUS           reduce using rule 4 (statement -> return_statement SEMICOLON .)
    PLUS            reduce using rule 4 (statement -> return_statement SEMICOLON .)
    NOT             reduce using rule 4 (statement -> return_statement SEMICOLON .)
    LPAREN          reduce using rule 4 (statement -> return_statement SEMICOLON .)
    INT             reduce using rule 4 (statement -> return_statement SEMICOLON .)
    FLOAT           reduce using rule 4 (statement -> return_statement SEMICOLON .)
    STRING          reduce using rule 4 (statement -> return_statement SEMICOLON .)
    TRUE            reduce using rule 4 (statement -> return_statement SEMICOLON .)
    FALSE           reduce using rule 4 (statement -> return_statement SEMICOLON .)
    IDENTIFIER      reduce using rule 4 (statement -> return_statement SEMICOLON .)
    RETURN          reduce using rule 4 (statement -> return_statement SEMICOLON .)
    FN              reduce using rule 4 (statement -> return_statement SEMICOLON .)
    IF              reduce using rule 4 (statement -> return_statement SEMICOLON .)
    FOR             reduce using rule 4 (statement -> return_statement SEMICOLON .)
    WHILE           reduce using rule 4 (statement -> return_statement SEMICOLON .)
    BREAK           reduce using rule 4 (statement -> return_statement SEMICOLON .)
    CONTINUE        reduce using rule 4 (statement -> return_statement SEMICOLON .)
    $end            reduce using rule 4 (statement -> return_statement SEMICOLON .)
    RBRACE          reduce using rule 4 (statement -> return_statement SEMICOLON .)


state 56

    (6) statement -> assignment SEMICOLON .

    VAR             reduce using rule 6 (statement -> assignment SEMICOLON .)
    CONST           reduce using rule 6 (statement -> assignment SEMICOLON .)
    MINUS           reduce using rule 6 (statement -> assignment SEMICOLON .)
    PLUS            reduce using rule 6 (statement -> assignment SEMICOLON .)
    NOT             reduce using rule 6 (statement -> assignment SEMICOLON .)
    LPAREN          reduce using rule 6 (statement -> assignment SEMICOLON .)
    INT             reduce using rule 6 (statement -> assignment SEMICOLON .)
    FLOAT           reduce using rule 6 (statement -> assignment SEMICOLON .)
    STRING          reduce using rule 6 (statement -> assignment SEMICOLON .)
    TRUE            reduce using rule 6 (statement -> assignment SEMICOLON .)
    FALSE           reduce using rule 6 (statement -> assignment SEMICOLON .)
    IDENTIFIER      reduce using rule 6 (statement -> assignment SEMICOLON .)
    RETURN          reduce using rule 6 (statement -> assignment SEMICOLON .)
    FN              reduce using rule 6 (statement -> assignment SEMICOLON .)
    IF              reduce using rule 6 (statement -> assignment SEMICOLON .)
    FOR             reduce using rule 6 (statement -> assignment SEMICOLON .)
    WHILE           reduce using rule 6 (statement -> assignment SEMICOLON .)
    BREAK           reduce using rule 6 (statement -> assignment SEMICOLON .)
    CONTINUE        reduce using rule 6 (statement -> assignment SEMICOLON .)
    $end            reduce using rule 6 (statement -> assignment SEMICOLON .)
    RBRACE          reduce using rule 6 (statement -> assignment SEMICOLON .)


state 57

    (29) declaration -> VAR declaration_base . SEMICOLON

    SEMICOLON       shift and go to state 98


state 58

    (32) declaration_base -> IDENTIFIER .
    (33) declaration_base -> IDENTIFIER . ASSIGN expression
    (34) declaration_base -> IDENTIFIER . typehint
    (35) declaration_base -> IDENTIFIER . typehint ASSIGN expression
    (36) typehint -> . TYPEHINTCOLON type

    SEMICOLON       reduce using rule 32 (declaration_base -> IDENTIFIER .)
    ASSIGN          shift and go to state 99
    TYPEHINTCOLON   shift and go to state 101

    typehint                       shift and go to state 100

state 59

    (30) declaration -> CONST declaration_base . SEMICOLON

    SEMICOLON       shift and go to state 102


state 60

    (66) expression -> PLUS expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . MULTIPLY expression
    (51) expression -> expression . DIVIDE expression
    (52) expression -> expression . EQUALS expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . NE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . GE expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (61) expression -> expression . CHAIN expression
    (62) expression -> expression . STREAMSPLIT expression
    (63) expression -> expression . STREAMMERGE expression
    (64) expression -> expression . FEEDBACK expression
    (80) expression -> expression . TO_STREAM

    SEMICOLON       reduce using rule 66 (expression -> PLUS expression .)
    PLUS            reduce using rule 66 (expression -> PLUS expression .)
    MINUS           reduce using rule 66 (expression -> PLUS expression .)
    MULTIPLY        reduce using rule 66 (expression -> PLUS expression .)
    DIVIDE          reduce using rule 66 (expression -> PLUS expression .)
    EQUALS          reduce using rule 66 (expression -> PLUS expression .)
    MODULUS         reduce using rule 66 (expression -> PLUS expression .)
    NE              reduce using rule 66 (expression -> PLUS expression .)
    GT              reduce using rule 66 (expression -> PLUS expression .)
    LT              reduce using rule 66 (expression -> PLUS expression .)
    GE              reduce using rule 66 (expression -> PLUS expression .)
    LE              reduce using rule 66 (expression -> PLUS expression .)
    AND             reduce using rule 66 (expression -> PLUS expression .)
    OR              reduce using rule 66 (expression -> PLUS expression .)
    CHAIN           reduce using rule 66 (expression -> PLUS expression .)
    STREAMSPLIT     reduce using rule 66 (expression -> PLUS expression .)
    STREAMMERGE     reduce using rule 66 (expression -> PLUS expression .)
    FEEDBACK        reduce using rule 66 (expression -> PLUS expression .)
    TO_STREAM       reduce using rule 66 (expression -> PLUS expression .)
    RPAREN          reduce using rule 66 (expression -> PLUS expression .)
    COMMA           reduce using rule 66 (expression -> PLUS expression .)

  ! PLUS            [ shift and go to state 37 ]
  ! MINUS           [ shift and go to state 38 ]
  ! MULTIPLY        [ shift and go to state 39 ]
  ! DIVIDE          [ shift and go to state 40 ]
  ! EQUALS          [ shift and go to state 41 ]
  ! MODULUS         [ shift and go to state 42 ]
  ! NE              [ shift and go to state 43 ]
  ! GT              [ shift and go to state 44 ]
  ! LT              [ shift and go to state 45 ]
  ! GE              [ shift and go to state 46 ]
  ! LE              [ shift and go to state 47 ]
  ! AND             [ shift and go to state 48 ]
  ! OR              [ shift and go to state 49 ]
  ! CHAIN           [ shift and go to state 50 ]
  ! STREAMSPLIT     [ shift and go to state 51 ]
  ! STREAMMERGE     [ shift and go to state 52 ]
  ! FEEDBACK        [ shift and go to state 53 ]
  ! TO_STREAM       [ shift and go to state 54 ]


state 61

    (78) expression -> IDENTIFIER .
    (9) function_call -> IDENTIFIER . LPAREN opt_arg_list RPAREN

    PLUS            reduce using rule 78 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 78 (expression -> IDENTIFIER .)
    MULTIPLY        reduce using rule 78 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 78 (expression -> IDENTIFIER .)
    EQUALS          reduce using rule 78 (expression -> IDENTIFIER .)
    MODULUS         reduce using rule 78 (expression -> IDENTIFIER .)
    NE              reduce using rule 78 (expression -> IDENTIFIER .)
    GT              reduce using rule 78 (expression -> IDENTIFIER .)
    LT              reduce using rule 78 (expression -> IDENTIFIER .)
    GE              reduce using rule 78 (expression -> IDENTIFIER .)
    LE              reduce using rule 78 (expression -> IDENTIFIER .)
    AND             reduce using rule 78 (expression -> IDENTIFIER .)
    OR              reduce using rule 78 (expression -> IDENTIFIER .)
    CHAIN           reduce using rule 78 (expression -> IDENTIFIER .)
    STREAMSPLIT     reduce using rule 78 (expression -> IDENTIFIER .)
    STREAMMERGE     reduce using rule 78 (expression -> IDENTIFIER .)
    FEEDBACK        reduce using rule 78 (expression -> IDENTIFIER .)
    TO_STREAM       reduce using rule 78 (expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 78 (expression -> IDENTIFIER .)
    RPAREN          reduce using rule 78 (expression -> IDENTIFIER .)
    COMMA           reduce using rule 78 (expression -> IDENTIFIER .)
    LPAREN          shift and go to state 72


state 62

    (18) lambda_function -> FN . LPAREN opt_param_list RPAREN LAMBDA block_statement
    (19) lambda_function -> FN . LPAREN opt_param_list RPAREN typehint LAMBDA block_statement

    LPAREN          shift and go to state 75


state 63

    (65) expression -> MINUS expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . MULTIPLY expression
    (51) expression -> expression . DIVIDE expression
    (52) expression -> expression . EQUALS expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . NE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . GE expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (61) expression -> expression . CHAIN expression
    (62) expression -> expression . STREAMSPLIT expression
    (63) expression -> expression . STREAMMERGE expression
    (64) expression -> expression . FEEDBACK expression
    (80) expression -> expression . TO_STREAM

    SEMICOLON       reduce using rule 65 (expression -> MINUS expression .)
    PLUS            reduce using rule 65 (expression -> MINUS expression .)
    MINUS           reduce using rule 65 (expression -> MINUS expression .)
    MULTIPLY        reduce using rule 65 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 65 (expression -> MINUS expression .)
    EQUALS          reduce using rule 65 (expression -> MINUS expression .)
    MODULUS         reduce using rule 65 (expression -> MINUS expression .)
    NE              reduce using rule 65 (expression -> MINUS expression .)
    GT              reduce using rule 65 (expression -> MINUS expression .)
    LT              reduce using rule 65 (expression -> MINUS expression .)
    GE              reduce using rule 65 (expression -> MINUS expression .)
    LE              reduce using rule 65 (expression -> MINUS expression .)
    AND             reduce using rule 65 (expression -> MINUS expression .)
    OR              reduce using rule 65 (expression -> MINUS expression .)
    CHAIN           reduce using rule 65 (expression -> MINUS expression .)
    STREAMSPLIT     reduce using rule 65 (expression -> MINUS expression .)
    STREAMMERGE     reduce using rule 65 (expression -> MINUS expression .)
    FEEDBACK        reduce using rule 65 (expression -> MINUS expression .)
    TO_STREAM       reduce using rule 65 (expression -> MINUS expression .)
    RPAREN          reduce using rule 65 (expression -> MINUS expression .)
    COMMA           reduce using rule 65 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 37 ]
  ! MINUS           [ shift and go to state 38 ]
  ! MULTIPLY        [ shift and go to state 39 ]
  ! DIVIDE          [ shift and go to state 40 ]
  ! EQUALS          [ shift and go to state 41 ]
  ! MODULUS         [ shift and go to state 42 ]
  ! NE              [ shift and go to state 43 ]
  ! GT              [ shift and go to state 44 ]
  ! LT              [ shift and go to state 45 ]
  ! GE              [ shift and go to state 46 ]
  ! LE              [ shift and go to state 47 ]
  ! AND             [ shift and go to state 48 ]
  ! OR              [ shift and go to state 49 ]
  ! CHAIN           [ shift and go to state 50 ]
  ! STREAMSPLIT     [ shift and go to state 51 ]
  ! STREAMMERGE     [ shift and go to state 52 ]
  ! FEEDBACK        [ shift and go to state 53 ]
  ! TO_STREAM       [ shift and go to state 54 ]


state 64

    (67) expression -> NOT expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . MULTIPLY expression
    (51) expression -> expression . DIVIDE expression
    (52) expression -> expression . EQUALS expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . NE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . GE expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (61) expression -> expression . CHAIN expression
    (62) expression -> expression . STREAMSPLIT expression
    (63) expression -> expression . STREAMMERGE expression
    (64) expression -> expression . FEEDBACK expression
    (80) expression -> expression . TO_STREAM

    SEMICOLON       reduce using rule 67 (expression -> NOT expression .)
    PLUS            reduce using rule 67 (expression -> NOT expression .)
    MINUS           reduce using rule 67 (expression -> NOT expression .)
    MULTIPLY        reduce using rule 67 (expression -> NOT expression .)
    DIVIDE          reduce using rule 67 (expression -> NOT expression .)
    EQUALS          reduce using rule 67 (expression -> NOT expression .)
    MODULUS         reduce using rule 67 (expression -> NOT expression .)
    NE              reduce using rule 67 (expression -> NOT expression .)
    GT              reduce using rule 67 (expression -> NOT expression .)
    LT              reduce using rule 67 (expression -> NOT expression .)
    GE              reduce using rule 67 (expression -> NOT expression .)
    LE              reduce using rule 67 (expression -> NOT expression .)
    AND             reduce using rule 67 (expression -> NOT expression .)
    OR              reduce using rule 67 (expression -> NOT expression .)
    CHAIN           reduce using rule 67 (expression -> NOT expression .)
    STREAMSPLIT     reduce using rule 67 (expression -> NOT expression .)
    STREAMMERGE     reduce using rule 67 (expression -> NOT expression .)
    FEEDBACK        reduce using rule 67 (expression -> NOT expression .)
    TO_STREAM       reduce using rule 67 (expression -> NOT expression .)
    RPAREN          reduce using rule 67 (expression -> NOT expression .)
    COMMA           reduce using rule 67 (expression -> NOT expression .)

  ! PLUS            [ shift and go to state 37 ]
  ! MINUS           [ shift and go to state 38 ]
  ! MULTIPLY        [ shift and go to state 39 ]
  ! DIVIDE          [ shift and go to state 40 ]
  ! EQUALS          [ shift and go to state 41 ]
  ! MODULUS         [ shift and go to state 42 ]
  ! NE              [ shift and go to state 43 ]
  ! GT              [ shift and go to state 44 ]
  ! LT              [ shift and go to state 45 ]
  ! GE              [ shift and go to state 46 ]
  ! LE              [ shift and go to state 47 ]
  ! AND             [ shift and go to state 48 ]
  ! OR              [ shift and go to state 49 ]
  ! CHAIN           [ shift and go to state 50 ]
  ! STREAMSPLIT     [ shift and go to state 51 ]
  ! STREAMMERGE     [ shift and go to state 52 ]
  ! FEEDBACK        [ shift and go to state 53 ]
  ! TO_STREAM       [ shift and go to state 54 ]


state 65

    (72) expression -> LPAREN expression . RPAREN
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . MULTIPLY expression
    (51) expression -> expression . DIVIDE expression
    (52) expression -> expression . EQUALS expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . NE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . GE expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (61) expression -> expression . CHAIN expression
    (62) expression -> expression . STREAMSPLIT expression
    (63) expression -> expression . STREAMMERGE expression
    (64) expression -> expression . FEEDBACK expression
    (80) expression -> expression . TO_STREAM

    RPAREN          shift and go to state 103
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    EQUALS          shift and go to state 41
    MODULUS         shift and go to state 42
    NE              shift and go to state 43
    GT              shift and go to state 44
    LT              shift and go to state 45
    GE              shift and go to state 46
    LE              shift and go to state 47
    AND             shift and go to state 48
    OR              shift and go to state 49
    CHAIN           shift and go to state 50
    STREAMSPLIT     shift and go to state 51
    STREAMMERGE     shift and go to state 52
    FEEDBACK        shift and go to state 53
    TO_STREAM       shift and go to state 54


state 66

    (20) lambda_function -> LPAREN opt_param_list . RPAREN LAMBDA block_statement
    (21) lambda_function -> LPAREN opt_param_list . RPAREN typehint LAMBDA block_statement
    (22) lambda_function -> LPAREN opt_param_list . RPAREN LAMBDA expression

    RPAREN          shift and go to state 104


state 67

    (78) expression -> IDENTIFIER .
    (9) function_call -> IDENTIFIER . LPAREN opt_arg_list RPAREN
    (27) param -> IDENTIFIER .
    (28) param -> IDENTIFIER . typehint
    (36) typehint -> . TYPEHINTCOLON type

  ! reduce/reduce conflict for RPAREN resolved using rule 27 (param -> IDENTIFIER .)
    PLUS            reduce using rule 78 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 78 (expression -> IDENTIFIER .)
    MULTIPLY        reduce using rule 78 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 78 (expression -> IDENTIFIER .)
    EQUALS          reduce using rule 78 (expression -> IDENTIFIER .)
    MODULUS         reduce using rule 78 (expression -> IDENTIFIER .)
    NE              reduce using rule 78 (expression -> IDENTIFIER .)
    GT              reduce using rule 78 (expression -> IDENTIFIER .)
    LT              reduce using rule 78 (expression -> IDENTIFIER .)
    GE              reduce using rule 78 (expression -> IDENTIFIER .)
    LE              reduce using rule 78 (expression -> IDENTIFIER .)
    AND             reduce using rule 78 (expression -> IDENTIFIER .)
    OR              reduce using rule 78 (expression -> IDENTIFIER .)
    CHAIN           reduce using rule 78 (expression -> IDENTIFIER .)
    STREAMSPLIT     reduce using rule 78 (expression -> IDENTIFIER .)
    STREAMMERGE     reduce using rule 78 (expression -> IDENTIFIER .)
    FEEDBACK        reduce using rule 78 (expression -> IDENTIFIER .)
    TO_STREAM       reduce using rule 78 (expression -> IDENTIFIER .)
    LPAREN          shift and go to state 72
    COMMA           reduce using rule 27 (param -> IDENTIFIER .)
    RPAREN          reduce using rule 27 (param -> IDENTIFIER .)
    TYPEHINTCOLON   shift and go to state 101

  ! RPAREN          [ reduce using rule 78 (expression -> IDENTIFIER .) ]

    typehint                       shift and go to state 105

state 68

    (23) opt_param_list -> param_list .
    (26) param_list -> param_list . COMMA param

    RPAREN          reduce using rule 23 (opt_param_list -> param_list .)
    COMMA           shift and go to state 106


state 69

    (24) opt_param_list -> empty .

    RPAREN          reduce using rule 24 (opt_param_list -> empty .)


state 70

    (25) param_list -> param .

    COMMA           reduce using rule 25 (param_list -> param .)
    RPAREN          reduce using rule 25 (param_list -> param .)


state 71

    (88) assignment -> IDENTIFIER ASSIGN . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression MULTIPLY expression
    (51) expression -> . expression DIVIDE expression
    (52) expression -> . expression EQUALS expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression NE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression GE expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . expression CHAIN expression
    (62) expression -> . expression STREAMSPLIT expression
    (63) expression -> . expression STREAMMERGE expression
    (64) expression -> . expression FEEDBACK expression
    (65) expression -> . MINUS expression
    (66) expression -> . PLUS expression
    (67) expression -> . NOT expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . INT
    (74) expression -> . FLOAT
    (75) expression -> . STRING
    (76) expression -> . TRUE
    (77) expression -> . FALSE
    (78) expression -> . IDENTIFIER
    (79) expression -> . function_call
    (80) expression -> . expression TO_STREAM
    (81) expression -> . lambda_function
    (9) function_call -> . IDENTIFIER LPAREN opt_arg_list RPAREN
    (18) lambda_function -> . FN LPAREN opt_param_list RPAREN LAMBDA block_statement
    (19) lambda_function -> . FN LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (20) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA block_statement
    (21) lambda_function -> . LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (22) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA expression

    MINUS           shift and go to state 13
    PLUS            shift and go to state 12
    NOT             shift and go to state 14
    LPAREN          shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    IDENTIFIER      shift and go to state 61
    FN              shift and go to state 62

    expression                     shift and go to state 107
    function_call                  shift and go to state 22
    lambda_function                shift and go to state 23

state 72

    (9) function_call -> IDENTIFIER LPAREN . opt_arg_list RPAREN
    (10) opt_arg_list -> . arg_list
    (11) opt_arg_list -> . empty
    (12) arg_list -> . expression
    (13) arg_list -> . arg_list COMMA expression
    (89) empty -> .
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression MULTIPLY expression
    (51) expression -> . expression DIVIDE expression
    (52) expression -> . expression EQUALS expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression NE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression GE expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . expression CHAIN expression
    (62) expression -> . expression STREAMSPLIT expression
    (63) expression -> . expression STREAMMERGE expression
    (64) expression -> . expression FEEDBACK expression
    (65) expression -> . MINUS expression
    (66) expression -> . PLUS expression
    (67) expression -> . NOT expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . INT
    (74) expression -> . FLOAT
    (75) expression -> . STRING
    (76) expression -> . TRUE
    (77) expression -> . FALSE
    (78) expression -> . IDENTIFIER
    (79) expression -> . function_call
    (80) expression -> . expression TO_STREAM
    (81) expression -> . lambda_function
    (9) function_call -> . IDENTIFIER LPAREN opt_arg_list RPAREN
    (18) lambda_function -> . FN LPAREN opt_param_list RPAREN LAMBDA block_statement
    (19) lambda_function -> . FN LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (20) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA block_statement
    (21) lambda_function -> . LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (22) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA expression

    RPAREN          reduce using rule 89 (empty -> .)
    MINUS           shift and go to state 13
    PLUS            shift and go to state 12
    NOT             shift and go to state 14
    LPAREN          shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    IDENTIFIER      shift and go to state 61
    FN              shift and go to state 62

    opt_arg_list                   shift and go to state 108
    arg_list                       shift and go to state 109
    empty                          shift and go to state 110
    expression                     shift and go to state 111
    function_call                  shift and go to state 22
    lambda_function                shift and go to state 23

state 73

    (16) return_statement -> RETURN expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . MULTIPLY expression
    (51) expression -> expression . DIVIDE expression
    (52) expression -> expression . EQUALS expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . NE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . GE expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (61) expression -> expression . CHAIN expression
    (62) expression -> expression . STREAMSPLIT expression
    (63) expression -> expression . STREAMMERGE expression
    (64) expression -> expression . FEEDBACK expression
    (80) expression -> expression . TO_STREAM

    SEMICOLON       reduce using rule 16 (return_statement -> RETURN expression .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    EQUALS          shift and go to state 41
    MODULUS         shift and go to state 42
    NE              shift and go to state 43
    GT              shift and go to state 44
    LT              shift and go to state 45
    GE              shift and go to state 46
    LE              shift and go to state 47
    AND             shift and go to state 48
    OR              shift and go to state 49
    CHAIN           shift and go to state 50
    STREAMSPLIT     shift and go to state 51
    STREAMMERGE     shift and go to state 52
    FEEDBACK        shift and go to state 53
    TO_STREAM       shift and go to state 54


state 74

    (14) function_definition -> FN IDENTIFIER . LPAREN opt_param_list RPAREN block_statement
    (15) function_definition -> FN IDENTIFIER . LPAREN opt_param_list RPAREN typehint block_statement

    LPAREN          shift and go to state 112


state 75

    (18) lambda_function -> FN LPAREN . opt_param_list RPAREN LAMBDA block_statement
    (19) lambda_function -> FN LPAREN . opt_param_list RPAREN typehint LAMBDA block_statement
    (23) opt_param_list -> . param_list
    (24) opt_param_list -> . empty
    (25) param_list -> . param
    (26) param_list -> . param_list COMMA param
    (89) empty -> .
    (27) param -> . IDENTIFIER
    (28) param -> . IDENTIFIER typehint

    RPAREN          reduce using rule 89 (empty -> .)
    IDENTIFIER      shift and go to state 114

    opt_param_list                 shift and go to state 113
    param_list                     shift and go to state 68
    empty                          shift and go to state 69
    param                          shift and go to state 70

state 76

    (82) conditional -> IF LPAREN . expression RPAREN block_statement ELSE block_statement
    (83) conditional -> IF LPAREN . expression RPAREN block_statement
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression MULTIPLY expression
    (51) expression -> . expression DIVIDE expression
    (52) expression -> . expression EQUALS expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression NE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression GE expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . expression CHAIN expression
    (62) expression -> . expression STREAMSPLIT expression
    (63) expression -> . expression STREAMMERGE expression
    (64) expression -> . expression FEEDBACK expression
    (65) expression -> . MINUS expression
    (66) expression -> . PLUS expression
    (67) expression -> . NOT expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . INT
    (74) expression -> . FLOAT
    (75) expression -> . STRING
    (76) expression -> . TRUE
    (77) expression -> . FALSE
    (78) expression -> . IDENTIFIER
    (79) expression -> . function_call
    (80) expression -> . expression TO_STREAM
    (81) expression -> . lambda_function
    (9) function_call -> . IDENTIFIER LPAREN opt_arg_list RPAREN
    (18) lambda_function -> . FN LPAREN opt_param_list RPAREN LAMBDA block_statement
    (19) lambda_function -> . FN LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (20) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA block_statement
    (21) lambda_function -> . LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (22) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA expression

    MINUS           shift and go to state 13
    PLUS            shift and go to state 12
    NOT             shift and go to state 14
    LPAREN          shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    IDENTIFIER      shift and go to state 61
    FN              shift and go to state 62

    expression                     shift and go to state 115
    function_call                  shift and go to state 22
    lambda_function                shift and go to state 23

state 77

    (84) loop -> FOR LPAREN . declaration SEMICOLON expression SEMICOLON expression RPAREN block_statement
    (29) declaration -> . VAR declaration_base SEMICOLON
    (30) declaration -> . CONST declaration_base SEMICOLON
    (31) declaration -> . function_definition
    (14) function_definition -> . FN IDENTIFIER LPAREN opt_param_list RPAREN block_statement
    (15) function_definition -> . FN IDENTIFIER LPAREN opt_param_list RPAREN typehint block_statement

    VAR             shift and go to state 9
    CONST           shift and go to state 10
    FN              shift and go to state 117

    declaration                    shift and go to state 116
    function_definition            shift and go to state 11

state 78

    (85) loop -> WHILE LPAREN . expression RPAREN block_statement
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression MULTIPLY expression
    (51) expression -> . expression DIVIDE expression
    (52) expression -> . expression EQUALS expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression NE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression GE expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . expression CHAIN expression
    (62) expression -> . expression STREAMSPLIT expression
    (63) expression -> . expression STREAMMERGE expression
    (64) expression -> . expression FEEDBACK expression
    (65) expression -> . MINUS expression
    (66) expression -> . PLUS expression
    (67) expression -> . NOT expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . INT
    (74) expression -> . FLOAT
    (75) expression -> . STRING
    (76) expression -> . TRUE
    (77) expression -> . FALSE
    (78) expression -> . IDENTIFIER
    (79) expression -> . function_call
    (80) expression -> . expression TO_STREAM
    (81) expression -> . lambda_function
    (9) function_call -> . IDENTIFIER LPAREN opt_arg_list RPAREN
    (18) lambda_function -> . FN LPAREN opt_param_list RPAREN LAMBDA block_statement
    (19) lambda_function -> . FN LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (20) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA block_statement
    (21) lambda_function -> . LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (22) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA expression

    MINUS           shift and go to state 13
    PLUS            shift and go to state 12
    NOT             shift and go to state 14
    LPAREN          shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    IDENTIFIER      shift and go to state 61
    FN              shift and go to state 62

    expression                     shift and go to state 118
    function_call                  shift and go to state 22
    lambda_function                shift and go to state 23

state 79

    (86) break -> BREAK SEMICOLON .

    VAR             reduce using rule 86 (break -> BREAK SEMICOLON .)
    CONST           reduce using rule 86 (break -> BREAK SEMICOLON .)
    MINUS           reduce using rule 86 (break -> BREAK SEMICOLON .)
    PLUS            reduce using rule 86 (break -> BREAK SEMICOLON .)
    NOT             reduce using rule 86 (break -> BREAK SEMICOLON .)
    LPAREN          reduce using rule 86 (break -> BREAK SEMICOLON .)
    INT             reduce using rule 86 (break -> BREAK SEMICOLON .)
    FLOAT           reduce using rule 86 (break -> BREAK SEMICOLON .)
    STRING          reduce using rule 86 (break -> BREAK SEMICOLON .)
    TRUE            reduce using rule 86 (break -> BREAK SEMICOLON .)
    FALSE           reduce using rule 86 (break -> BREAK SEMICOLON .)
    IDENTIFIER      reduce using rule 86 (break -> BREAK SEMICOLON .)
    RETURN          reduce using rule 86 (break -> BREAK SEMICOLON .)
    FN              reduce using rule 86 (break -> BREAK SEMICOLON .)
    IF              reduce using rule 86 (break -> BREAK SEMICOLON .)
    FOR             reduce using rule 86 (break -> BREAK SEMICOLON .)
    WHILE           reduce using rule 86 (break -> BREAK SEMICOLON .)
    BREAK           reduce using rule 86 (break -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 86 (break -> BREAK SEMICOLON .)
    $end            reduce using rule 86 (break -> BREAK SEMICOLON .)
    RBRACE          reduce using rule 86 (break -> BREAK SEMICOLON .)


state 80

    (87) continue -> CONTINUE SEMICOLON .

    VAR             reduce using rule 87 (continue -> CONTINUE SEMICOLON .)
    CONST           reduce using rule 87 (continue -> CONTINUE SEMICOLON .)
    MINUS           reduce using rule 87 (continue -> CONTINUE SEMICOLON .)
    PLUS            reduce using rule 87 (continue -> CONTINUE SEMICOLON .)
    NOT             reduce using rule 87 (continue -> CONTINUE SEMICOLON .)
    LPAREN          reduce using rule 87 (continue -> CONTINUE SEMICOLON .)
    INT             reduce using rule 87 (continue -> CONTINUE SEMICOLON .)
    FLOAT           reduce using rule 87 (continue -> CONTINUE SEMICOLON .)
    STRING          reduce using rule 87 (continue -> CONTINUE SEMICOLON .)
    TRUE            reduce using rule 87 (continue -> CONTINUE SEMICOLON .)
    FALSE           reduce using rule 87 (continue -> CONTINUE SEMICOLON .)
    IDENTIFIER      reduce using rule 87 (continue -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 87 (continue -> CONTINUE SEMICOLON .)
    FN              reduce using rule 87 (continue -> CONTINUE SEMICOLON .)
    IF              reduce using rule 87 (continue -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 87 (continue -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 87 (continue -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 87 (continue -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 87 (continue -> CONTINUE SEMICOLON .)
    $end            reduce using rule 87 (continue -> CONTINUE SEMICOLON .)
    RBRACE          reduce using rule 87 (continue -> CONTINUE SEMICOLON .)


state 81

    (48) expression -> expression PLUS expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . MULTIPLY expression
    (51) expression -> expression . DIVIDE expression
    (52) expression -> expression . EQUALS expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . NE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . GE expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (61) expression -> expression . CHAIN expression
    (62) expression -> expression . STREAMSPLIT expression
    (63) expression -> expression . STREAMMERGE expression
    (64) expression -> expression . FEEDBACK expression
    (80) expression -> expression . TO_STREAM

    SEMICOLON       reduce using rule 48 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 48 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 48 (expression -> expression PLUS expression .)
    EQUALS          reduce using rule 48 (expression -> expression PLUS expression .)
    NE              reduce using rule 48 (expression -> expression PLUS expression .)
    GT              reduce using rule 48 (expression -> expression PLUS expression .)
    LT              reduce using rule 48 (expression -> expression PLUS expression .)
    GE              reduce using rule 48 (expression -> expression PLUS expression .)
    LE              reduce using rule 48 (expression -> expression PLUS expression .)
    AND             reduce using rule 48 (expression -> expression PLUS expression .)
    OR              reduce using rule 48 (expression -> expression PLUS expression .)
    CHAIN           reduce using rule 48 (expression -> expression PLUS expression .)
    STREAMSPLIT     reduce using rule 48 (expression -> expression PLUS expression .)
    STREAMMERGE     reduce using rule 48 (expression -> expression PLUS expression .)
    FEEDBACK        reduce using rule 48 (expression -> expression PLUS expression .)
    TO_STREAM       reduce using rule 48 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 48 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 48 (expression -> expression PLUS expression .)
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    MODULUS         shift and go to state 42

  ! MULTIPLY        [ reduce using rule 48 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 48 (expression -> expression PLUS expression .) ]
  ! MODULUS         [ reduce using rule 48 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 37 ]
  ! MINUS           [ shift and go to state 38 ]
  ! EQUALS          [ shift and go to state 41 ]
  ! NE              [ shift and go to state 43 ]
  ! GT              [ shift and go to state 44 ]
  ! LT              [ shift and go to state 45 ]
  ! GE              [ shift and go to state 46 ]
  ! LE              [ shift and go to state 47 ]
  ! AND             [ shift and go to state 48 ]
  ! OR              [ shift and go to state 49 ]
  ! CHAIN           [ shift and go to state 50 ]
  ! STREAMSPLIT     [ shift and go to state 51 ]
  ! STREAMMERGE     [ shift and go to state 52 ]
  ! FEEDBACK        [ shift and go to state 53 ]
  ! TO_STREAM       [ shift and go to state 54 ]


state 82

    (49) expression -> expression MINUS expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . MULTIPLY expression
    (51) expression -> expression . DIVIDE expression
    (52) expression -> expression . EQUALS expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . NE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . GE expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (61) expression -> expression . CHAIN expression
    (62) expression -> expression . STREAMSPLIT expression
    (63) expression -> expression . STREAMMERGE expression
    (64) expression -> expression . FEEDBACK expression
    (80) expression -> expression . TO_STREAM

    SEMICOLON       reduce using rule 49 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 49 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 49 (expression -> expression MINUS expression .)
    EQUALS          reduce using rule 49 (expression -> expression MINUS expression .)
    NE              reduce using rule 49 (expression -> expression MINUS expression .)
    GT              reduce using rule 49 (expression -> expression MINUS expression .)
    LT              reduce using rule 49 (expression -> expression MINUS expression .)
    GE              reduce using rule 49 (expression -> expression MINUS expression .)
    LE              reduce using rule 49 (expression -> expression MINUS expression .)
    AND             reduce using rule 49 (expression -> expression MINUS expression .)
    OR              reduce using rule 49 (expression -> expression MINUS expression .)
    CHAIN           reduce using rule 49 (expression -> expression MINUS expression .)
    STREAMSPLIT     reduce using rule 49 (expression -> expression MINUS expression .)
    STREAMMERGE     reduce using rule 49 (expression -> expression MINUS expression .)
    FEEDBACK        reduce using rule 49 (expression -> expression MINUS expression .)
    TO_STREAM       reduce using rule 49 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 49 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 49 (expression -> expression MINUS expression .)
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    MODULUS         shift and go to state 42

  ! MULTIPLY        [ reduce using rule 49 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 49 (expression -> expression MINUS expression .) ]
  ! MODULUS         [ reduce using rule 49 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 37 ]
  ! MINUS           [ shift and go to state 38 ]
  ! EQUALS          [ shift and go to state 41 ]
  ! NE              [ shift and go to state 43 ]
  ! GT              [ shift and go to state 44 ]
  ! LT              [ shift and go to state 45 ]
  ! GE              [ shift and go to state 46 ]
  ! LE              [ shift and go to state 47 ]
  ! AND             [ shift and go to state 48 ]
  ! OR              [ shift and go to state 49 ]
  ! CHAIN           [ shift and go to state 50 ]
  ! STREAMSPLIT     [ shift and go to state 51 ]
  ! STREAMMERGE     [ shift and go to state 52 ]
  ! FEEDBACK        [ shift and go to state 53 ]
  ! TO_STREAM       [ shift and go to state 54 ]


state 83

    (50) expression -> expression MULTIPLY expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . MULTIPLY expression
    (51) expression -> expression . DIVIDE expression
    (52) expression -> expression . EQUALS expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . NE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . GE expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (61) expression -> expression . CHAIN expression
    (62) expression -> expression . STREAMSPLIT expression
    (63) expression -> expression . STREAMMERGE expression
    (64) expression -> expression . FEEDBACK expression
    (80) expression -> expression . TO_STREAM

    SEMICOLON       reduce using rule 50 (expression -> expression MULTIPLY expression .)
    PLUS            reduce using rule 50 (expression -> expression MULTIPLY expression .)
    MINUS           reduce using rule 50 (expression -> expression MULTIPLY expression .)
    MULTIPLY        reduce using rule 50 (expression -> expression MULTIPLY expression .)
    DIVIDE          reduce using rule 50 (expression -> expression MULTIPLY expression .)
    EQUALS          reduce using rule 50 (expression -> expression MULTIPLY expression .)
    MODULUS         reduce using rule 50 (expression -> expression MULTIPLY expression .)
    NE              reduce using rule 50 (expression -> expression MULTIPLY expression .)
    GT              reduce using rule 50 (expression -> expression MULTIPLY expression .)
    LT              reduce using rule 50 (expression -> expression MULTIPLY expression .)
    GE              reduce using rule 50 (expression -> expression MULTIPLY expression .)
    LE              reduce using rule 50 (expression -> expression MULTIPLY expression .)
    AND             reduce using rule 50 (expression -> expression MULTIPLY expression .)
    OR              reduce using rule 50 (expression -> expression MULTIPLY expression .)
    CHAIN           reduce using rule 50 (expression -> expression MULTIPLY expression .)
    STREAMSPLIT     reduce using rule 50 (expression -> expression MULTIPLY expression .)
    STREAMMERGE     reduce using rule 50 (expression -> expression MULTIPLY expression .)
    FEEDBACK        reduce using rule 50 (expression -> expression MULTIPLY expression .)
    TO_STREAM       reduce using rule 50 (expression -> expression MULTIPLY expression .)
    RPAREN          reduce using rule 50 (expression -> expression MULTIPLY expression .)
    COMMA           reduce using rule 50 (expression -> expression MULTIPLY expression .)

  ! PLUS            [ shift and go to state 37 ]
  ! MINUS           [ shift and go to state 38 ]
  ! MULTIPLY        [ shift and go to state 39 ]
  ! DIVIDE          [ shift and go to state 40 ]
  ! EQUALS          [ shift and go to state 41 ]
  ! MODULUS         [ shift and go to state 42 ]
  ! NE              [ shift and go to state 43 ]
  ! GT              [ shift and go to state 44 ]
  ! LT              [ shift and go to state 45 ]
  ! GE              [ shift and go to state 46 ]
  ! LE              [ shift and go to state 47 ]
  ! AND             [ shift and go to state 48 ]
  ! OR              [ shift and go to state 49 ]
  ! CHAIN           [ shift and go to state 50 ]
  ! STREAMSPLIT     [ shift and go to state 51 ]
  ! STREAMMERGE     [ shift and go to state 52 ]
  ! FEEDBACK        [ shift and go to state 53 ]
  ! TO_STREAM       [ shift and go to state 54 ]


state 84

    (51) expression -> expression DIVIDE expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . MULTIPLY expression
    (51) expression -> expression . DIVIDE expression
    (52) expression -> expression . EQUALS expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . NE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . GE expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (61) expression -> expression . CHAIN expression
    (62) expression -> expression . STREAMSPLIT expression
    (63) expression -> expression . STREAMMERGE expression
    (64) expression -> expression . FEEDBACK expression
    (80) expression -> expression . TO_STREAM

    SEMICOLON       reduce using rule 51 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 51 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 51 (expression -> expression DIVIDE expression .)
    MULTIPLY        reduce using rule 51 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 51 (expression -> expression DIVIDE expression .)
    EQUALS          reduce using rule 51 (expression -> expression DIVIDE expression .)
    MODULUS         reduce using rule 51 (expression -> expression DIVIDE expression .)
    NE              reduce using rule 51 (expression -> expression DIVIDE expression .)
    GT              reduce using rule 51 (expression -> expression DIVIDE expression .)
    LT              reduce using rule 51 (expression -> expression DIVIDE expression .)
    GE              reduce using rule 51 (expression -> expression DIVIDE expression .)
    LE              reduce using rule 51 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 51 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 51 (expression -> expression DIVIDE expression .)
    CHAIN           reduce using rule 51 (expression -> expression DIVIDE expression .)
    STREAMSPLIT     reduce using rule 51 (expression -> expression DIVIDE expression .)
    STREAMMERGE     reduce using rule 51 (expression -> expression DIVIDE expression .)
    FEEDBACK        reduce using rule 51 (expression -> expression DIVIDE expression .)
    TO_STREAM       reduce using rule 51 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 51 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 51 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 37 ]
  ! MINUS           [ shift and go to state 38 ]
  ! MULTIPLY        [ shift and go to state 39 ]
  ! DIVIDE          [ shift and go to state 40 ]
  ! EQUALS          [ shift and go to state 41 ]
  ! MODULUS         [ shift and go to state 42 ]
  ! NE              [ shift and go to state 43 ]
  ! GT              [ shift and go to state 44 ]
  ! LT              [ shift and go to state 45 ]
  ! GE              [ shift and go to state 46 ]
  ! LE              [ shift and go to state 47 ]
  ! AND             [ shift and go to state 48 ]
  ! OR              [ shift and go to state 49 ]
  ! CHAIN           [ shift and go to state 50 ]
  ! STREAMSPLIT     [ shift and go to state 51 ]
  ! STREAMMERGE     [ shift and go to state 52 ]
  ! FEEDBACK        [ shift and go to state 53 ]
  ! TO_STREAM       [ shift and go to state 54 ]


state 85

    (52) expression -> expression EQUALS expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . MULTIPLY expression
    (51) expression -> expression . DIVIDE expression
    (52) expression -> expression . EQUALS expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . NE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . GE expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (61) expression -> expression . CHAIN expression
    (62) expression -> expression . STREAMSPLIT expression
    (63) expression -> expression . STREAMMERGE expression
    (64) expression -> expression . FEEDBACK expression
    (80) expression -> expression . TO_STREAM

    SEMICOLON       reduce using rule 52 (expression -> expression EQUALS expression .)
    EQUALS          reduce using rule 52 (expression -> expression EQUALS expression .)
    NE              reduce using rule 52 (expression -> expression EQUALS expression .)
    GT              reduce using rule 52 (expression -> expression EQUALS expression .)
    LT              reduce using rule 52 (expression -> expression EQUALS expression .)
    GE              reduce using rule 52 (expression -> expression EQUALS expression .)
    LE              reduce using rule 52 (expression -> expression EQUALS expression .)
    AND             reduce using rule 52 (expression -> expression EQUALS expression .)
    OR              reduce using rule 52 (expression -> expression EQUALS expression .)
    CHAIN           reduce using rule 52 (expression -> expression EQUALS expression .)
    STREAMSPLIT     reduce using rule 52 (expression -> expression EQUALS expression .)
    STREAMMERGE     reduce using rule 52 (expression -> expression EQUALS expression .)
    FEEDBACK        reduce using rule 52 (expression -> expression EQUALS expression .)
    TO_STREAM       reduce using rule 52 (expression -> expression EQUALS expression .)
    RPAREN          reduce using rule 52 (expression -> expression EQUALS expression .)
    COMMA           reduce using rule 52 (expression -> expression EQUALS expression .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    MODULUS         shift and go to state 42

  ! PLUS            [ reduce using rule 52 (expression -> expression EQUALS expression .) ]
  ! MINUS           [ reduce using rule 52 (expression -> expression EQUALS expression .) ]
  ! MULTIPLY        [ reduce using rule 52 (expression -> expression EQUALS expression .) ]
  ! DIVIDE          [ reduce using rule 52 (expression -> expression EQUALS expression .) ]
  ! MODULUS         [ reduce using rule 52 (expression -> expression EQUALS expression .) ]
  ! EQUALS          [ shift and go to state 41 ]
  ! NE              [ shift and go to state 43 ]
  ! GT              [ shift and go to state 44 ]
  ! LT              [ shift and go to state 45 ]
  ! GE              [ shift and go to state 46 ]
  ! LE              [ shift and go to state 47 ]
  ! AND             [ shift and go to state 48 ]
  ! OR              [ shift and go to state 49 ]
  ! CHAIN           [ shift and go to state 50 ]
  ! STREAMSPLIT     [ shift and go to state 51 ]
  ! STREAMMERGE     [ shift and go to state 52 ]
  ! FEEDBACK        [ shift and go to state 53 ]
  ! TO_STREAM       [ shift and go to state 54 ]


state 86

    (53) expression -> expression MODULUS expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . MULTIPLY expression
    (51) expression -> expression . DIVIDE expression
    (52) expression -> expression . EQUALS expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . NE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . GE expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (61) expression -> expression . CHAIN expression
    (62) expression -> expression . STREAMSPLIT expression
    (63) expression -> expression . STREAMMERGE expression
    (64) expression -> expression . FEEDBACK expression
    (80) expression -> expression . TO_STREAM

    SEMICOLON       reduce using rule 53 (expression -> expression MODULUS expression .)
    PLUS            reduce using rule 53 (expression -> expression MODULUS expression .)
    MINUS           reduce using rule 53 (expression -> expression MODULUS expression .)
    MULTIPLY        reduce using rule 53 (expression -> expression MODULUS expression .)
    DIVIDE          reduce using rule 53 (expression -> expression MODULUS expression .)
    EQUALS          reduce using rule 53 (expression -> expression MODULUS expression .)
    MODULUS         reduce using rule 53 (expression -> expression MODULUS expression .)
    NE              reduce using rule 53 (expression -> expression MODULUS expression .)
    GT              reduce using rule 53 (expression -> expression MODULUS expression .)
    LT              reduce using rule 53 (expression -> expression MODULUS expression .)
    GE              reduce using rule 53 (expression -> expression MODULUS expression .)
    LE              reduce using rule 53 (expression -> expression MODULUS expression .)
    AND             reduce using rule 53 (expression -> expression MODULUS expression .)
    OR              reduce using rule 53 (expression -> expression MODULUS expression .)
    CHAIN           reduce using rule 53 (expression -> expression MODULUS expression .)
    STREAMSPLIT     reduce using rule 53 (expression -> expression MODULUS expression .)
    STREAMMERGE     reduce using rule 53 (expression -> expression MODULUS expression .)
    FEEDBACK        reduce using rule 53 (expression -> expression MODULUS expression .)
    TO_STREAM       reduce using rule 53 (expression -> expression MODULUS expression .)
    RPAREN          reduce using rule 53 (expression -> expression MODULUS expression .)
    COMMA           reduce using rule 53 (expression -> expression MODULUS expression .)

  ! PLUS            [ shift and go to state 37 ]
  ! MINUS           [ shift and go to state 38 ]
  ! MULTIPLY        [ shift and go to state 39 ]
  ! DIVIDE          [ shift and go to state 40 ]
  ! EQUALS          [ shift and go to state 41 ]
  ! MODULUS         [ shift and go to state 42 ]
  ! NE              [ shift and go to state 43 ]
  ! GT              [ shift and go to state 44 ]
  ! LT              [ shift and go to state 45 ]
  ! GE              [ shift and go to state 46 ]
  ! LE              [ shift and go to state 47 ]
  ! AND             [ shift and go to state 48 ]
  ! OR              [ shift and go to state 49 ]
  ! CHAIN           [ shift and go to state 50 ]
  ! STREAMSPLIT     [ shift and go to state 51 ]
  ! STREAMMERGE     [ shift and go to state 52 ]
  ! FEEDBACK        [ shift and go to state 53 ]
  ! TO_STREAM       [ shift and go to state 54 ]


state 87

    (54) expression -> expression NE expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . MULTIPLY expression
    (51) expression -> expression . DIVIDE expression
    (52) expression -> expression . EQUALS expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . NE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . GE expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (61) expression -> expression . CHAIN expression
    (62) expression -> expression . STREAMSPLIT expression
    (63) expression -> expression . STREAMMERGE expression
    (64) expression -> expression . FEEDBACK expression
    (80) expression -> expression . TO_STREAM

    SEMICOLON       reduce using rule 54 (expression -> expression NE expression .)
    EQUALS          reduce using rule 54 (expression -> expression NE expression .)
    NE              reduce using rule 54 (expression -> expression NE expression .)
    GT              reduce using rule 54 (expression -> expression NE expression .)
    LT              reduce using rule 54 (expression -> expression NE expression .)
    GE              reduce using rule 54 (expression -> expression NE expression .)
    LE              reduce using rule 54 (expression -> expression NE expression .)
    AND             reduce using rule 54 (expression -> expression NE expression .)
    OR              reduce using rule 54 (expression -> expression NE expression .)
    CHAIN           reduce using rule 54 (expression -> expression NE expression .)
    STREAMSPLIT     reduce using rule 54 (expression -> expression NE expression .)
    STREAMMERGE     reduce using rule 54 (expression -> expression NE expression .)
    FEEDBACK        reduce using rule 54 (expression -> expression NE expression .)
    TO_STREAM       reduce using rule 54 (expression -> expression NE expression .)
    RPAREN          reduce using rule 54 (expression -> expression NE expression .)
    COMMA           reduce using rule 54 (expression -> expression NE expression .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    MODULUS         shift and go to state 42

  ! PLUS            [ reduce using rule 54 (expression -> expression NE expression .) ]
  ! MINUS           [ reduce using rule 54 (expression -> expression NE expression .) ]
  ! MULTIPLY        [ reduce using rule 54 (expression -> expression NE expression .) ]
  ! DIVIDE          [ reduce using rule 54 (expression -> expression NE expression .) ]
  ! MODULUS         [ reduce using rule 54 (expression -> expression NE expression .) ]
  ! EQUALS          [ shift and go to state 41 ]
  ! NE              [ shift and go to state 43 ]
  ! GT              [ shift and go to state 44 ]
  ! LT              [ shift and go to state 45 ]
  ! GE              [ shift and go to state 46 ]
  ! LE              [ shift and go to state 47 ]
  ! AND             [ shift and go to state 48 ]
  ! OR              [ shift and go to state 49 ]
  ! CHAIN           [ shift and go to state 50 ]
  ! STREAMSPLIT     [ shift and go to state 51 ]
  ! STREAMMERGE     [ shift and go to state 52 ]
  ! FEEDBACK        [ shift and go to state 53 ]
  ! TO_STREAM       [ shift and go to state 54 ]


state 88

    (55) expression -> expression GT expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . MULTIPLY expression
    (51) expression -> expression . DIVIDE expression
    (52) expression -> expression . EQUALS expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . NE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . GE expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (61) expression -> expression . CHAIN expression
    (62) expression -> expression . STREAMSPLIT expression
    (63) expression -> expression . STREAMMERGE expression
    (64) expression -> expression . FEEDBACK expression
    (80) expression -> expression . TO_STREAM

    SEMICOLON       reduce using rule 55 (expression -> expression GT expression .)
    EQUALS          reduce using rule 55 (expression -> expression GT expression .)
    NE              reduce using rule 55 (expression -> expression GT expression .)
    GT              reduce using rule 55 (expression -> expression GT expression .)
    LT              reduce using rule 55 (expression -> expression GT expression .)
    GE              reduce using rule 55 (expression -> expression GT expression .)
    LE              reduce using rule 55 (expression -> expression GT expression .)
    AND             reduce using rule 55 (expression -> expression GT expression .)
    OR              reduce using rule 55 (expression -> expression GT expression .)
    CHAIN           reduce using rule 55 (expression -> expression GT expression .)
    STREAMSPLIT     reduce using rule 55 (expression -> expression GT expression .)
    STREAMMERGE     reduce using rule 55 (expression -> expression GT expression .)
    FEEDBACK        reduce using rule 55 (expression -> expression GT expression .)
    TO_STREAM       reduce using rule 55 (expression -> expression GT expression .)
    RPAREN          reduce using rule 55 (expression -> expression GT expression .)
    COMMA           reduce using rule 55 (expression -> expression GT expression .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    MODULUS         shift and go to state 42

  ! PLUS            [ reduce using rule 55 (expression -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 55 (expression -> expression GT expression .) ]
  ! MULTIPLY        [ reduce using rule 55 (expression -> expression GT expression .) ]
  ! DIVIDE          [ reduce using rule 55 (expression -> expression GT expression .) ]
  ! MODULUS         [ reduce using rule 55 (expression -> expression GT expression .) ]
  ! EQUALS          [ shift and go to state 41 ]
  ! NE              [ shift and go to state 43 ]
  ! GT              [ shift and go to state 44 ]
  ! LT              [ shift and go to state 45 ]
  ! GE              [ shift and go to state 46 ]
  ! LE              [ shift and go to state 47 ]
  ! AND             [ shift and go to state 48 ]
  ! OR              [ shift and go to state 49 ]
  ! CHAIN           [ shift and go to state 50 ]
  ! STREAMSPLIT     [ shift and go to state 51 ]
  ! STREAMMERGE     [ shift and go to state 52 ]
  ! FEEDBACK        [ shift and go to state 53 ]
  ! TO_STREAM       [ shift and go to state 54 ]


state 89

    (56) expression -> expression LT expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . MULTIPLY expression
    (51) expression -> expression . DIVIDE expression
    (52) expression -> expression . EQUALS expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . NE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . GE expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (61) expression -> expression . CHAIN expression
    (62) expression -> expression . STREAMSPLIT expression
    (63) expression -> expression . STREAMMERGE expression
    (64) expression -> expression . FEEDBACK expression
    (80) expression -> expression . TO_STREAM

    SEMICOLON       reduce using rule 56 (expression -> expression LT expression .)
    EQUALS          reduce using rule 56 (expression -> expression LT expression .)
    NE              reduce using rule 56 (expression -> expression LT expression .)
    GT              reduce using rule 56 (expression -> expression LT expression .)
    LT              reduce using rule 56 (expression -> expression LT expression .)
    GE              reduce using rule 56 (expression -> expression LT expression .)
    LE              reduce using rule 56 (expression -> expression LT expression .)
    AND             reduce using rule 56 (expression -> expression LT expression .)
    OR              reduce using rule 56 (expression -> expression LT expression .)
    CHAIN           reduce using rule 56 (expression -> expression LT expression .)
    STREAMSPLIT     reduce using rule 56 (expression -> expression LT expression .)
    STREAMMERGE     reduce using rule 56 (expression -> expression LT expression .)
    FEEDBACK        reduce using rule 56 (expression -> expression LT expression .)
    TO_STREAM       reduce using rule 56 (expression -> expression LT expression .)
    RPAREN          reduce using rule 56 (expression -> expression LT expression .)
    COMMA           reduce using rule 56 (expression -> expression LT expression .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    MODULUS         shift and go to state 42

  ! PLUS            [ reduce using rule 56 (expression -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 56 (expression -> expression LT expression .) ]
  ! MULTIPLY        [ reduce using rule 56 (expression -> expression LT expression .) ]
  ! DIVIDE          [ reduce using rule 56 (expression -> expression LT expression .) ]
  ! MODULUS         [ reduce using rule 56 (expression -> expression LT expression .) ]
  ! EQUALS          [ shift and go to state 41 ]
  ! NE              [ shift and go to state 43 ]
  ! GT              [ shift and go to state 44 ]
  ! LT              [ shift and go to state 45 ]
  ! GE              [ shift and go to state 46 ]
  ! LE              [ shift and go to state 47 ]
  ! AND             [ shift and go to state 48 ]
  ! OR              [ shift and go to state 49 ]
  ! CHAIN           [ shift and go to state 50 ]
  ! STREAMSPLIT     [ shift and go to state 51 ]
  ! STREAMMERGE     [ shift and go to state 52 ]
  ! FEEDBACK        [ shift and go to state 53 ]
  ! TO_STREAM       [ shift and go to state 54 ]


state 90

    (57) expression -> expression GE expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . MULTIPLY expression
    (51) expression -> expression . DIVIDE expression
    (52) expression -> expression . EQUALS expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . NE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . GE expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (61) expression -> expression . CHAIN expression
    (62) expression -> expression . STREAMSPLIT expression
    (63) expression -> expression . STREAMMERGE expression
    (64) expression -> expression . FEEDBACK expression
    (80) expression -> expression . TO_STREAM

    SEMICOLON       reduce using rule 57 (expression -> expression GE expression .)
    EQUALS          reduce using rule 57 (expression -> expression GE expression .)
    NE              reduce using rule 57 (expression -> expression GE expression .)
    GT              reduce using rule 57 (expression -> expression GE expression .)
    LT              reduce using rule 57 (expression -> expression GE expression .)
    GE              reduce using rule 57 (expression -> expression GE expression .)
    LE              reduce using rule 57 (expression -> expression GE expression .)
    AND             reduce using rule 57 (expression -> expression GE expression .)
    OR              reduce using rule 57 (expression -> expression GE expression .)
    CHAIN           reduce using rule 57 (expression -> expression GE expression .)
    STREAMSPLIT     reduce using rule 57 (expression -> expression GE expression .)
    STREAMMERGE     reduce using rule 57 (expression -> expression GE expression .)
    FEEDBACK        reduce using rule 57 (expression -> expression GE expression .)
    TO_STREAM       reduce using rule 57 (expression -> expression GE expression .)
    RPAREN          reduce using rule 57 (expression -> expression GE expression .)
    COMMA           reduce using rule 57 (expression -> expression GE expression .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    MODULUS         shift and go to state 42

  ! PLUS            [ reduce using rule 57 (expression -> expression GE expression .) ]
  ! MINUS           [ reduce using rule 57 (expression -> expression GE expression .) ]
  ! MULTIPLY        [ reduce using rule 57 (expression -> expression GE expression .) ]
  ! DIVIDE          [ reduce using rule 57 (expression -> expression GE expression .) ]
  ! MODULUS         [ reduce using rule 57 (expression -> expression GE expression .) ]
  ! EQUALS          [ shift and go to state 41 ]
  ! NE              [ shift and go to state 43 ]
  ! GT              [ shift and go to state 44 ]
  ! LT              [ shift and go to state 45 ]
  ! GE              [ shift and go to state 46 ]
  ! LE              [ shift and go to state 47 ]
  ! AND             [ shift and go to state 48 ]
  ! OR              [ shift and go to state 49 ]
  ! CHAIN           [ shift and go to state 50 ]
  ! STREAMSPLIT     [ shift and go to state 51 ]
  ! STREAMMERGE     [ shift and go to state 52 ]
  ! FEEDBACK        [ shift and go to state 53 ]
  ! TO_STREAM       [ shift and go to state 54 ]


state 91

    (58) expression -> expression LE expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . MULTIPLY expression
    (51) expression -> expression . DIVIDE expression
    (52) expression -> expression . EQUALS expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . NE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . GE expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (61) expression -> expression . CHAIN expression
    (62) expression -> expression . STREAMSPLIT expression
    (63) expression -> expression . STREAMMERGE expression
    (64) expression -> expression . FEEDBACK expression
    (80) expression -> expression . TO_STREAM

    SEMICOLON       reduce using rule 58 (expression -> expression LE expression .)
    EQUALS          reduce using rule 58 (expression -> expression LE expression .)
    NE              reduce using rule 58 (expression -> expression LE expression .)
    GT              reduce using rule 58 (expression -> expression LE expression .)
    LT              reduce using rule 58 (expression -> expression LE expression .)
    GE              reduce using rule 58 (expression -> expression LE expression .)
    LE              reduce using rule 58 (expression -> expression LE expression .)
    AND             reduce using rule 58 (expression -> expression LE expression .)
    OR              reduce using rule 58 (expression -> expression LE expression .)
    CHAIN           reduce using rule 58 (expression -> expression LE expression .)
    STREAMSPLIT     reduce using rule 58 (expression -> expression LE expression .)
    STREAMMERGE     reduce using rule 58 (expression -> expression LE expression .)
    FEEDBACK        reduce using rule 58 (expression -> expression LE expression .)
    TO_STREAM       reduce using rule 58 (expression -> expression LE expression .)
    RPAREN          reduce using rule 58 (expression -> expression LE expression .)
    COMMA           reduce using rule 58 (expression -> expression LE expression .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    MODULUS         shift and go to state 42

  ! PLUS            [ reduce using rule 58 (expression -> expression LE expression .) ]
  ! MINUS           [ reduce using rule 58 (expression -> expression LE expression .) ]
  ! MULTIPLY        [ reduce using rule 58 (expression -> expression LE expression .) ]
  ! DIVIDE          [ reduce using rule 58 (expression -> expression LE expression .) ]
  ! MODULUS         [ reduce using rule 58 (expression -> expression LE expression .) ]
  ! EQUALS          [ shift and go to state 41 ]
  ! NE              [ shift and go to state 43 ]
  ! GT              [ shift and go to state 44 ]
  ! LT              [ shift and go to state 45 ]
  ! GE              [ shift and go to state 46 ]
  ! LE              [ shift and go to state 47 ]
  ! AND             [ shift and go to state 48 ]
  ! OR              [ shift and go to state 49 ]
  ! CHAIN           [ shift and go to state 50 ]
  ! STREAMSPLIT     [ shift and go to state 51 ]
  ! STREAMMERGE     [ shift and go to state 52 ]
  ! FEEDBACK        [ shift and go to state 53 ]
  ! TO_STREAM       [ shift and go to state 54 ]


state 92

    (59) expression -> expression AND expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . MULTIPLY expression
    (51) expression -> expression . DIVIDE expression
    (52) expression -> expression . EQUALS expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . NE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . GE expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (61) expression -> expression . CHAIN expression
    (62) expression -> expression . STREAMSPLIT expression
    (63) expression -> expression . STREAMMERGE expression
    (64) expression -> expression . FEEDBACK expression
    (80) expression -> expression . TO_STREAM

    SEMICOLON       reduce using rule 59 (expression -> expression AND expression .)
    AND             reduce using rule 59 (expression -> expression AND expression .)
    OR              reduce using rule 59 (expression -> expression AND expression .)
    CHAIN           reduce using rule 59 (expression -> expression AND expression .)
    STREAMSPLIT     reduce using rule 59 (expression -> expression AND expression .)
    STREAMMERGE     reduce using rule 59 (expression -> expression AND expression .)
    FEEDBACK        reduce using rule 59 (expression -> expression AND expression .)
    TO_STREAM       reduce using rule 59 (expression -> expression AND expression .)
    RPAREN          reduce using rule 59 (expression -> expression AND expression .)
    COMMA           reduce using rule 59 (expression -> expression AND expression .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    EQUALS          shift and go to state 41
    MODULUS         shift and go to state 42
    NE              shift and go to state 43
    GT              shift and go to state 44
    LT              shift and go to state 45
    GE              shift and go to state 46
    LE              shift and go to state 47

  ! PLUS            [ reduce using rule 59 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 59 (expression -> expression AND expression .) ]
  ! MULTIPLY        [ reduce using rule 59 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 59 (expression -> expression AND expression .) ]
  ! EQUALS          [ reduce using rule 59 (expression -> expression AND expression .) ]
  ! MODULUS         [ reduce using rule 59 (expression -> expression AND expression .) ]
  ! NE              [ reduce using rule 59 (expression -> expression AND expression .) ]
  ! GT              [ reduce using rule 59 (expression -> expression AND expression .) ]
  ! LT              [ reduce using rule 59 (expression -> expression AND expression .) ]
  ! GE              [ reduce using rule 59 (expression -> expression AND expression .) ]
  ! LE              [ reduce using rule 59 (expression -> expression AND expression .) ]
  ! AND             [ shift and go to state 48 ]
  ! OR              [ shift and go to state 49 ]
  ! CHAIN           [ shift and go to state 50 ]
  ! STREAMSPLIT     [ shift and go to state 51 ]
  ! STREAMMERGE     [ shift and go to state 52 ]
  ! FEEDBACK        [ shift and go to state 53 ]
  ! TO_STREAM       [ shift and go to state 54 ]


state 93

    (60) expression -> expression OR expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . MULTIPLY expression
    (51) expression -> expression . DIVIDE expression
    (52) expression -> expression . EQUALS expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . NE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . GE expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (61) expression -> expression . CHAIN expression
    (62) expression -> expression . STREAMSPLIT expression
    (63) expression -> expression . STREAMMERGE expression
    (64) expression -> expression . FEEDBACK expression
    (80) expression -> expression . TO_STREAM

    SEMICOLON       reduce using rule 60 (expression -> expression OR expression .)
    OR              reduce using rule 60 (expression -> expression OR expression .)
    CHAIN           reduce using rule 60 (expression -> expression OR expression .)
    STREAMSPLIT     reduce using rule 60 (expression -> expression OR expression .)
    STREAMMERGE     reduce using rule 60 (expression -> expression OR expression .)
    FEEDBACK        reduce using rule 60 (expression -> expression OR expression .)
    TO_STREAM       reduce using rule 60 (expression -> expression OR expression .)
    RPAREN          reduce using rule 60 (expression -> expression OR expression .)
    COMMA           reduce using rule 60 (expression -> expression OR expression .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    EQUALS          shift and go to state 41
    MODULUS         shift and go to state 42
    NE              shift and go to state 43
    GT              shift and go to state 44
    LT              shift and go to state 45
    GE              shift and go to state 46
    LE              shift and go to state 47
    AND             shift and go to state 48

  ! PLUS            [ reduce using rule 60 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 60 (expression -> expression OR expression .) ]
  ! MULTIPLY        [ reduce using rule 60 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 60 (expression -> expression OR expression .) ]
  ! EQUALS          [ reduce using rule 60 (expression -> expression OR expression .) ]
  ! MODULUS         [ reduce using rule 60 (expression -> expression OR expression .) ]
  ! NE              [ reduce using rule 60 (expression -> expression OR expression .) ]
  ! GT              [ reduce using rule 60 (expression -> expression OR expression .) ]
  ! LT              [ reduce using rule 60 (expression -> expression OR expression .) ]
  ! GE              [ reduce using rule 60 (expression -> expression OR expression .) ]
  ! LE              [ reduce using rule 60 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 60 (expression -> expression OR expression .) ]
  ! OR              [ shift and go to state 49 ]
  ! CHAIN           [ shift and go to state 50 ]
  ! STREAMSPLIT     [ shift and go to state 51 ]
  ! STREAMMERGE     [ shift and go to state 52 ]
  ! FEEDBACK        [ shift and go to state 53 ]
  ! TO_STREAM       [ shift and go to state 54 ]


state 94

    (61) expression -> expression CHAIN expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . MULTIPLY expression
    (51) expression -> expression . DIVIDE expression
    (52) expression -> expression . EQUALS expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . NE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . GE expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (61) expression -> expression . CHAIN expression
    (62) expression -> expression . STREAMSPLIT expression
    (63) expression -> expression . STREAMMERGE expression
    (64) expression -> expression . FEEDBACK expression
    (80) expression -> expression . TO_STREAM

    SEMICOLON       reduce using rule 61 (expression -> expression CHAIN expression .)
    CHAIN           reduce using rule 61 (expression -> expression CHAIN expression .)
    STREAMMERGE     reduce using rule 61 (expression -> expression CHAIN expression .)
    FEEDBACK        reduce using rule 61 (expression -> expression CHAIN expression .)
    TO_STREAM       reduce using rule 61 (expression -> expression CHAIN expression .)
    RPAREN          reduce using rule 61 (expression -> expression CHAIN expression .)
    COMMA           reduce using rule 61 (expression -> expression CHAIN expression .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    EQUALS          shift and go to state 41
    MODULUS         shift and go to state 42
    NE              shift and go to state 43
    GT              shift and go to state 44
    LT              shift and go to state 45
    GE              shift and go to state 46
    LE              shift and go to state 47
    AND             shift and go to state 48
    OR              shift and go to state 49
    STREAMSPLIT     shift and go to state 51

  ! PLUS            [ reduce using rule 61 (expression -> expression CHAIN expression .) ]
  ! MINUS           [ reduce using rule 61 (expression -> expression CHAIN expression .) ]
  ! MULTIPLY        [ reduce using rule 61 (expression -> expression CHAIN expression .) ]
  ! DIVIDE          [ reduce using rule 61 (expression -> expression CHAIN expression .) ]
  ! EQUALS          [ reduce using rule 61 (expression -> expression CHAIN expression .) ]
  ! MODULUS         [ reduce using rule 61 (expression -> expression CHAIN expression .) ]
  ! NE              [ reduce using rule 61 (expression -> expression CHAIN expression .) ]
  ! GT              [ reduce using rule 61 (expression -> expression CHAIN expression .) ]
  ! LT              [ reduce using rule 61 (expression -> expression CHAIN expression .) ]
  ! GE              [ reduce using rule 61 (expression -> expression CHAIN expression .) ]
  ! LE              [ reduce using rule 61 (expression -> expression CHAIN expression .) ]
  ! AND             [ reduce using rule 61 (expression -> expression CHAIN expression .) ]
  ! OR              [ reduce using rule 61 (expression -> expression CHAIN expression .) ]
  ! STREAMSPLIT     [ reduce using rule 61 (expression -> expression CHAIN expression .) ]
  ! CHAIN           [ shift and go to state 50 ]
  ! STREAMMERGE     [ shift and go to state 52 ]
  ! FEEDBACK        [ shift and go to state 53 ]
  ! TO_STREAM       [ shift and go to state 54 ]


state 95

    (62) expression -> expression STREAMSPLIT expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . MULTIPLY expression
    (51) expression -> expression . DIVIDE expression
    (52) expression -> expression . EQUALS expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . NE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . GE expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (61) expression -> expression . CHAIN expression
    (62) expression -> expression . STREAMSPLIT expression
    (63) expression -> expression . STREAMMERGE expression
    (64) expression -> expression . FEEDBACK expression
    (80) expression -> expression . TO_STREAM

    SEMICOLON       reduce using rule 62 (expression -> expression STREAMSPLIT expression .)
    CHAIN           reduce using rule 62 (expression -> expression STREAMSPLIT expression .)
    STREAMSPLIT     reduce using rule 62 (expression -> expression STREAMSPLIT expression .)
    STREAMMERGE     reduce using rule 62 (expression -> expression STREAMSPLIT expression .)
    FEEDBACK        reduce using rule 62 (expression -> expression STREAMSPLIT expression .)
    TO_STREAM       reduce using rule 62 (expression -> expression STREAMSPLIT expression .)
    RPAREN          reduce using rule 62 (expression -> expression STREAMSPLIT expression .)
    COMMA           reduce using rule 62 (expression -> expression STREAMSPLIT expression .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    EQUALS          shift and go to state 41
    MODULUS         shift and go to state 42
    NE              shift and go to state 43
    GT              shift and go to state 44
    LT              shift and go to state 45
    GE              shift and go to state 46
    LE              shift and go to state 47
    AND             shift and go to state 48
    OR              shift and go to state 49

  ! PLUS            [ reduce using rule 62 (expression -> expression STREAMSPLIT expression .) ]
  ! MINUS           [ reduce using rule 62 (expression -> expression STREAMSPLIT expression .) ]
  ! MULTIPLY        [ reduce using rule 62 (expression -> expression STREAMSPLIT expression .) ]
  ! DIVIDE          [ reduce using rule 62 (expression -> expression STREAMSPLIT expression .) ]
  ! EQUALS          [ reduce using rule 62 (expression -> expression STREAMSPLIT expression .) ]
  ! MODULUS         [ reduce using rule 62 (expression -> expression STREAMSPLIT expression .) ]
  ! NE              [ reduce using rule 62 (expression -> expression STREAMSPLIT expression .) ]
  ! GT              [ reduce using rule 62 (expression -> expression STREAMSPLIT expression .) ]
  ! LT              [ reduce using rule 62 (expression -> expression STREAMSPLIT expression .) ]
  ! GE              [ reduce using rule 62 (expression -> expression STREAMSPLIT expression .) ]
  ! LE              [ reduce using rule 62 (expression -> expression STREAMSPLIT expression .) ]
  ! AND             [ reduce using rule 62 (expression -> expression STREAMSPLIT expression .) ]
  ! OR              [ reduce using rule 62 (expression -> expression STREAMSPLIT expression .) ]
  ! CHAIN           [ shift and go to state 50 ]
  ! STREAMSPLIT     [ shift and go to state 51 ]
  ! STREAMMERGE     [ shift and go to state 52 ]
  ! FEEDBACK        [ shift and go to state 53 ]
  ! TO_STREAM       [ shift and go to state 54 ]


state 96

    (63) expression -> expression STREAMMERGE expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . MULTIPLY expression
    (51) expression -> expression . DIVIDE expression
    (52) expression -> expression . EQUALS expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . NE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . GE expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (61) expression -> expression . CHAIN expression
    (62) expression -> expression . STREAMSPLIT expression
    (63) expression -> expression . STREAMMERGE expression
    (64) expression -> expression . FEEDBACK expression
    (80) expression -> expression . TO_STREAM

    SEMICOLON       reduce using rule 63 (expression -> expression STREAMMERGE expression .)
    STREAMMERGE     reduce using rule 63 (expression -> expression STREAMMERGE expression .)
    FEEDBACK        reduce using rule 63 (expression -> expression STREAMMERGE expression .)
    TO_STREAM       reduce using rule 63 (expression -> expression STREAMMERGE expression .)
    RPAREN          reduce using rule 63 (expression -> expression STREAMMERGE expression .)
    COMMA           reduce using rule 63 (expression -> expression STREAMMERGE expression .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    EQUALS          shift and go to state 41
    MODULUS         shift and go to state 42
    NE              shift and go to state 43
    GT              shift and go to state 44
    LT              shift and go to state 45
    GE              shift and go to state 46
    LE              shift and go to state 47
    AND             shift and go to state 48
    OR              shift and go to state 49
    CHAIN           shift and go to state 50
    STREAMSPLIT     shift and go to state 51

  ! PLUS            [ reduce using rule 63 (expression -> expression STREAMMERGE expression .) ]
  ! MINUS           [ reduce using rule 63 (expression -> expression STREAMMERGE expression .) ]
  ! MULTIPLY        [ reduce using rule 63 (expression -> expression STREAMMERGE expression .) ]
  ! DIVIDE          [ reduce using rule 63 (expression -> expression STREAMMERGE expression .) ]
  ! EQUALS          [ reduce using rule 63 (expression -> expression STREAMMERGE expression .) ]
  ! MODULUS         [ reduce using rule 63 (expression -> expression STREAMMERGE expression .) ]
  ! NE              [ reduce using rule 63 (expression -> expression STREAMMERGE expression .) ]
  ! GT              [ reduce using rule 63 (expression -> expression STREAMMERGE expression .) ]
  ! LT              [ reduce using rule 63 (expression -> expression STREAMMERGE expression .) ]
  ! GE              [ reduce using rule 63 (expression -> expression STREAMMERGE expression .) ]
  ! LE              [ reduce using rule 63 (expression -> expression STREAMMERGE expression .) ]
  ! AND             [ reduce using rule 63 (expression -> expression STREAMMERGE expression .) ]
  ! OR              [ reduce using rule 63 (expression -> expression STREAMMERGE expression .) ]
  ! CHAIN           [ reduce using rule 63 (expression -> expression STREAMMERGE expression .) ]
  ! STREAMSPLIT     [ reduce using rule 63 (expression -> expression STREAMMERGE expression .) ]
  ! STREAMMERGE     [ shift and go to state 52 ]
  ! FEEDBACK        [ shift and go to state 53 ]
  ! TO_STREAM       [ shift and go to state 54 ]


state 97

    (64) expression -> expression FEEDBACK expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . MULTIPLY expression
    (51) expression -> expression . DIVIDE expression
    (52) expression -> expression . EQUALS expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . NE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . GE expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (61) expression -> expression . CHAIN expression
    (62) expression -> expression . STREAMSPLIT expression
    (63) expression -> expression . STREAMMERGE expression
    (64) expression -> expression . FEEDBACK expression
    (80) expression -> expression . TO_STREAM

    SEMICOLON       reduce using rule 64 (expression -> expression FEEDBACK expression .)
    FEEDBACK        reduce using rule 64 (expression -> expression FEEDBACK expression .)
    TO_STREAM       reduce using rule 64 (expression -> expression FEEDBACK expression .)
    RPAREN          reduce using rule 64 (expression -> expression FEEDBACK expression .)
    COMMA           reduce using rule 64 (expression -> expression FEEDBACK expression .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    EQUALS          shift and go to state 41
    MODULUS         shift and go to state 42
    NE              shift and go to state 43
    GT              shift and go to state 44
    LT              shift and go to state 45
    GE              shift and go to state 46
    LE              shift and go to state 47
    AND             shift and go to state 48
    OR              shift and go to state 49
    CHAIN           shift and go to state 50
    STREAMSPLIT     shift and go to state 51
    STREAMMERGE     shift and go to state 52

  ! PLUS            [ reduce using rule 64 (expression -> expression FEEDBACK expression .) ]
  ! MINUS           [ reduce using rule 64 (expression -> expression FEEDBACK expression .) ]
  ! MULTIPLY        [ reduce using rule 64 (expression -> expression FEEDBACK expression .) ]
  ! DIVIDE          [ reduce using rule 64 (expression -> expression FEEDBACK expression .) ]
  ! EQUALS          [ reduce using rule 64 (expression -> expression FEEDBACK expression .) ]
  ! MODULUS         [ reduce using rule 64 (expression -> expression FEEDBACK expression .) ]
  ! NE              [ reduce using rule 64 (expression -> expression FEEDBACK expression .) ]
  ! GT              [ reduce using rule 64 (expression -> expression FEEDBACK expression .) ]
  ! LT              [ reduce using rule 64 (expression -> expression FEEDBACK expression .) ]
  ! GE              [ reduce using rule 64 (expression -> expression FEEDBACK expression .) ]
  ! LE              [ reduce using rule 64 (expression -> expression FEEDBACK expression .) ]
  ! AND             [ reduce using rule 64 (expression -> expression FEEDBACK expression .) ]
  ! OR              [ reduce using rule 64 (expression -> expression FEEDBACK expression .) ]
  ! CHAIN           [ reduce using rule 64 (expression -> expression FEEDBACK expression .) ]
  ! STREAMSPLIT     [ reduce using rule 64 (expression -> expression FEEDBACK expression .) ]
  ! STREAMMERGE     [ reduce using rule 64 (expression -> expression FEEDBACK expression .) ]
  ! FEEDBACK        [ shift and go to state 53 ]
  ! TO_STREAM       [ shift and go to state 54 ]


state 98

    (29) declaration -> VAR declaration_base SEMICOLON .

    VAR             reduce using rule 29 (declaration -> VAR declaration_base SEMICOLON .)
    CONST           reduce using rule 29 (declaration -> VAR declaration_base SEMICOLON .)
    MINUS           reduce using rule 29 (declaration -> VAR declaration_base SEMICOLON .)
    PLUS            reduce using rule 29 (declaration -> VAR declaration_base SEMICOLON .)
    NOT             reduce using rule 29 (declaration -> VAR declaration_base SEMICOLON .)
    LPAREN          reduce using rule 29 (declaration -> VAR declaration_base SEMICOLON .)
    INT             reduce using rule 29 (declaration -> VAR declaration_base SEMICOLON .)
    FLOAT           reduce using rule 29 (declaration -> VAR declaration_base SEMICOLON .)
    STRING          reduce using rule 29 (declaration -> VAR declaration_base SEMICOLON .)
    TRUE            reduce using rule 29 (declaration -> VAR declaration_base SEMICOLON .)
    FALSE           reduce using rule 29 (declaration -> VAR declaration_base SEMICOLON .)
    IDENTIFIER      reduce using rule 29 (declaration -> VAR declaration_base SEMICOLON .)
    RETURN          reduce using rule 29 (declaration -> VAR declaration_base SEMICOLON .)
    FN              reduce using rule 29 (declaration -> VAR declaration_base SEMICOLON .)
    IF              reduce using rule 29 (declaration -> VAR declaration_base SEMICOLON .)
    FOR             reduce using rule 29 (declaration -> VAR declaration_base SEMICOLON .)
    WHILE           reduce using rule 29 (declaration -> VAR declaration_base SEMICOLON .)
    BREAK           reduce using rule 29 (declaration -> VAR declaration_base SEMICOLON .)
    CONTINUE        reduce using rule 29 (declaration -> VAR declaration_base SEMICOLON .)
    $end            reduce using rule 29 (declaration -> VAR declaration_base SEMICOLON .)
    SEMICOLON       reduce using rule 29 (declaration -> VAR declaration_base SEMICOLON .)
    RBRACE          reduce using rule 29 (declaration -> VAR declaration_base SEMICOLON .)


state 99

    (33) declaration_base -> IDENTIFIER ASSIGN . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression MULTIPLY expression
    (51) expression -> . expression DIVIDE expression
    (52) expression -> . expression EQUALS expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression NE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression GE expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . expression CHAIN expression
    (62) expression -> . expression STREAMSPLIT expression
    (63) expression -> . expression STREAMMERGE expression
    (64) expression -> . expression FEEDBACK expression
    (65) expression -> . MINUS expression
    (66) expression -> . PLUS expression
    (67) expression -> . NOT expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . INT
    (74) expression -> . FLOAT
    (75) expression -> . STRING
    (76) expression -> . TRUE
    (77) expression -> . FALSE
    (78) expression -> . IDENTIFIER
    (79) expression -> . function_call
    (80) expression -> . expression TO_STREAM
    (81) expression -> . lambda_function
    (9) function_call -> . IDENTIFIER LPAREN opt_arg_list RPAREN
    (18) lambda_function -> . FN LPAREN opt_param_list RPAREN LAMBDA block_statement
    (19) lambda_function -> . FN LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (20) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA block_statement
    (21) lambda_function -> . LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (22) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA expression

    MINUS           shift and go to state 13
    PLUS            shift and go to state 12
    NOT             shift and go to state 14
    LPAREN          shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    IDENTIFIER      shift and go to state 61
    FN              shift and go to state 62

    expression                     shift and go to state 119
    function_call                  shift and go to state 22
    lambda_function                shift and go to state 23

state 100

    (34) declaration_base -> IDENTIFIER typehint .
    (35) declaration_base -> IDENTIFIER typehint . ASSIGN expression

    SEMICOLON       reduce using rule 34 (declaration_base -> IDENTIFIER typehint .)
    ASSIGN          shift and go to state 120


state 101

    (36) typehint -> TYPEHINTCOLON . type
    (37) type -> . SINT
    (38) type -> . SFLOAT
    (39) type -> . SSTRING
    (40) type -> . SBOOL
    (41) type -> . SSTREAM
    (42) type -> . SEVENT

    SINT            shift and go to state 122
    SFLOAT          shift and go to state 123
    SSTRING         shift and go to state 124
    SBOOL           shift and go to state 125
    SSTREAM         shift and go to state 126
    SEVENT          shift and go to state 127

    type                           shift and go to state 121

state 102

    (30) declaration -> CONST declaration_base SEMICOLON .

    VAR             reduce using rule 30 (declaration -> CONST declaration_base SEMICOLON .)
    CONST           reduce using rule 30 (declaration -> CONST declaration_base SEMICOLON .)
    MINUS           reduce using rule 30 (declaration -> CONST declaration_base SEMICOLON .)
    PLUS            reduce using rule 30 (declaration -> CONST declaration_base SEMICOLON .)
    NOT             reduce using rule 30 (declaration -> CONST declaration_base SEMICOLON .)
    LPAREN          reduce using rule 30 (declaration -> CONST declaration_base SEMICOLON .)
    INT             reduce using rule 30 (declaration -> CONST declaration_base SEMICOLON .)
    FLOAT           reduce using rule 30 (declaration -> CONST declaration_base SEMICOLON .)
    STRING          reduce using rule 30 (declaration -> CONST declaration_base SEMICOLON .)
    TRUE            reduce using rule 30 (declaration -> CONST declaration_base SEMICOLON .)
    FALSE           reduce using rule 30 (declaration -> CONST declaration_base SEMICOLON .)
    IDENTIFIER      reduce using rule 30 (declaration -> CONST declaration_base SEMICOLON .)
    RETURN          reduce using rule 30 (declaration -> CONST declaration_base SEMICOLON .)
    FN              reduce using rule 30 (declaration -> CONST declaration_base SEMICOLON .)
    IF              reduce using rule 30 (declaration -> CONST declaration_base SEMICOLON .)
    FOR             reduce using rule 30 (declaration -> CONST declaration_base SEMICOLON .)
    WHILE           reduce using rule 30 (declaration -> CONST declaration_base SEMICOLON .)
    BREAK           reduce using rule 30 (declaration -> CONST declaration_base SEMICOLON .)
    CONTINUE        reduce using rule 30 (declaration -> CONST declaration_base SEMICOLON .)
    $end            reduce using rule 30 (declaration -> CONST declaration_base SEMICOLON .)
    SEMICOLON       reduce using rule 30 (declaration -> CONST declaration_base SEMICOLON .)
    RBRACE          reduce using rule 30 (declaration -> CONST declaration_base SEMICOLON .)


state 103

    (72) expression -> LPAREN expression RPAREN .

    SEMICOLON       reduce using rule 72 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 72 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 72 (expression -> LPAREN expression RPAREN .)
    MULTIPLY        reduce using rule 72 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 72 (expression -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 72 (expression -> LPAREN expression RPAREN .)
    MODULUS         reduce using rule 72 (expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 72 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 72 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 72 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 72 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 72 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 72 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 72 (expression -> LPAREN expression RPAREN .)
    CHAIN           reduce using rule 72 (expression -> LPAREN expression RPAREN .)
    STREAMSPLIT     reduce using rule 72 (expression -> LPAREN expression RPAREN .)
    STREAMMERGE     reduce using rule 72 (expression -> LPAREN expression RPAREN .)
    FEEDBACK        reduce using rule 72 (expression -> LPAREN expression RPAREN .)
    TO_STREAM       reduce using rule 72 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 72 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 72 (expression -> LPAREN expression RPAREN .)


state 104

    (20) lambda_function -> LPAREN opt_param_list RPAREN . LAMBDA block_statement
    (21) lambda_function -> LPAREN opt_param_list RPAREN . typehint LAMBDA block_statement
    (22) lambda_function -> LPAREN opt_param_list RPAREN . LAMBDA expression
    (36) typehint -> . TYPEHINTCOLON type

    LAMBDA          shift and go to state 128
    TYPEHINTCOLON   shift and go to state 101

    typehint                       shift and go to state 129

state 105

    (28) param -> IDENTIFIER typehint .

    COMMA           reduce using rule 28 (param -> IDENTIFIER typehint .)
    RPAREN          reduce using rule 28 (param -> IDENTIFIER typehint .)


state 106

    (26) param_list -> param_list COMMA . param
    (27) param -> . IDENTIFIER
    (28) param -> . IDENTIFIER typehint

    IDENTIFIER      shift and go to state 114

    param                          shift and go to state 130

state 107

    (88) assignment -> IDENTIFIER ASSIGN expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . MULTIPLY expression
    (51) expression -> expression . DIVIDE expression
    (52) expression -> expression . EQUALS expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . NE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . GE expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (61) expression -> expression . CHAIN expression
    (62) expression -> expression . STREAMSPLIT expression
    (63) expression -> expression . STREAMMERGE expression
    (64) expression -> expression . FEEDBACK expression
    (80) expression -> expression . TO_STREAM

    SEMICOLON       reduce using rule 88 (assignment -> IDENTIFIER ASSIGN expression .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    EQUALS          shift and go to state 41
    MODULUS         shift and go to state 42
    NE              shift and go to state 43
    GT              shift and go to state 44
    LT              shift and go to state 45
    GE              shift and go to state 46
    LE              shift and go to state 47
    AND             shift and go to state 48
    OR              shift and go to state 49
    CHAIN           shift and go to state 50
    STREAMSPLIT     shift and go to state 51
    STREAMMERGE     shift and go to state 52
    FEEDBACK        shift and go to state 53
    TO_STREAM       shift and go to state 54


state 108

    (9) function_call -> IDENTIFIER LPAREN opt_arg_list . RPAREN

    RPAREN          shift and go to state 131


state 109

    (10) opt_arg_list -> arg_list .
    (13) arg_list -> arg_list . COMMA expression

    RPAREN          reduce using rule 10 (opt_arg_list -> arg_list .)
    COMMA           shift and go to state 132


state 110

    (11) opt_arg_list -> empty .

    RPAREN          reduce using rule 11 (opt_arg_list -> empty .)


state 111

    (12) arg_list -> expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . MULTIPLY expression
    (51) expression -> expression . DIVIDE expression
    (52) expression -> expression . EQUALS expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . NE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . GE expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (61) expression -> expression . CHAIN expression
    (62) expression -> expression . STREAMSPLIT expression
    (63) expression -> expression . STREAMMERGE expression
    (64) expression -> expression . FEEDBACK expression
    (80) expression -> expression . TO_STREAM

    COMMA           reduce using rule 12 (arg_list -> expression .)
    RPAREN          reduce using rule 12 (arg_list -> expression .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    EQUALS          shift and go to state 41
    MODULUS         shift and go to state 42
    NE              shift and go to state 43
    GT              shift and go to state 44
    LT              shift and go to state 45
    GE              shift and go to state 46
    LE              shift and go to state 47
    AND             shift and go to state 48
    OR              shift and go to state 49
    CHAIN           shift and go to state 50
    STREAMSPLIT     shift and go to state 51
    STREAMMERGE     shift and go to state 52
    FEEDBACK        shift and go to state 53
    TO_STREAM       shift and go to state 54


state 112

    (14) function_definition -> FN IDENTIFIER LPAREN . opt_param_list RPAREN block_statement
    (15) function_definition -> FN IDENTIFIER LPAREN . opt_param_list RPAREN typehint block_statement
    (23) opt_param_list -> . param_list
    (24) opt_param_list -> . empty
    (25) param_list -> . param
    (26) param_list -> . param_list COMMA param
    (89) empty -> .
    (27) param -> . IDENTIFIER
    (28) param -> . IDENTIFIER typehint

    RPAREN          reduce using rule 89 (empty -> .)
    IDENTIFIER      shift and go to state 114

    opt_param_list                 shift and go to state 133
    param_list                     shift and go to state 68
    empty                          shift and go to state 69
    param                          shift and go to state 70

state 113

    (18) lambda_function -> FN LPAREN opt_param_list . RPAREN LAMBDA block_statement
    (19) lambda_function -> FN LPAREN opt_param_list . RPAREN typehint LAMBDA block_statement

    RPAREN          shift and go to state 134


state 114

    (27) param -> IDENTIFIER .
    (28) param -> IDENTIFIER . typehint
    (36) typehint -> . TYPEHINTCOLON type

    COMMA           reduce using rule 27 (param -> IDENTIFIER .)
    RPAREN          reduce using rule 27 (param -> IDENTIFIER .)
    TYPEHINTCOLON   shift and go to state 101

    typehint                       shift and go to state 105

state 115

    (82) conditional -> IF LPAREN expression . RPAREN block_statement ELSE block_statement
    (83) conditional -> IF LPAREN expression . RPAREN block_statement
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . MULTIPLY expression
    (51) expression -> expression . DIVIDE expression
    (52) expression -> expression . EQUALS expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . NE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . GE expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (61) expression -> expression . CHAIN expression
    (62) expression -> expression . STREAMSPLIT expression
    (63) expression -> expression . STREAMMERGE expression
    (64) expression -> expression . FEEDBACK expression
    (80) expression -> expression . TO_STREAM

    RPAREN          shift and go to state 135
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    EQUALS          shift and go to state 41
    MODULUS         shift and go to state 42
    NE              shift and go to state 43
    GT              shift and go to state 44
    LT              shift and go to state 45
    GE              shift and go to state 46
    LE              shift and go to state 47
    AND             shift and go to state 48
    OR              shift and go to state 49
    CHAIN           shift and go to state 50
    STREAMSPLIT     shift and go to state 51
    STREAMMERGE     shift and go to state 52
    FEEDBACK        shift and go to state 53
    TO_STREAM       shift and go to state 54


state 116

    (84) loop -> FOR LPAREN declaration . SEMICOLON expression SEMICOLON expression RPAREN block_statement

    SEMICOLON       shift and go to state 136


state 117

    (14) function_definition -> FN . IDENTIFIER LPAREN opt_param_list RPAREN block_statement
    (15) function_definition -> FN . IDENTIFIER LPAREN opt_param_list RPAREN typehint block_statement

    IDENTIFIER      shift and go to state 74


state 118

    (85) loop -> WHILE LPAREN expression . RPAREN block_statement
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . MULTIPLY expression
    (51) expression -> expression . DIVIDE expression
    (52) expression -> expression . EQUALS expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . NE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . GE expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (61) expression -> expression . CHAIN expression
    (62) expression -> expression . STREAMSPLIT expression
    (63) expression -> expression . STREAMMERGE expression
    (64) expression -> expression . FEEDBACK expression
    (80) expression -> expression . TO_STREAM

    RPAREN          shift and go to state 137
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    EQUALS          shift and go to state 41
    MODULUS         shift and go to state 42
    NE              shift and go to state 43
    GT              shift and go to state 44
    LT              shift and go to state 45
    GE              shift and go to state 46
    LE              shift and go to state 47
    AND             shift and go to state 48
    OR              shift and go to state 49
    CHAIN           shift and go to state 50
    STREAMSPLIT     shift and go to state 51
    STREAMMERGE     shift and go to state 52
    FEEDBACK        shift and go to state 53
    TO_STREAM       shift and go to state 54


state 119

    (33) declaration_base -> IDENTIFIER ASSIGN expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . MULTIPLY expression
    (51) expression -> expression . DIVIDE expression
    (52) expression -> expression . EQUALS expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . NE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . GE expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (61) expression -> expression . CHAIN expression
    (62) expression -> expression . STREAMSPLIT expression
    (63) expression -> expression . STREAMMERGE expression
    (64) expression -> expression . FEEDBACK expression
    (80) expression -> expression . TO_STREAM

    SEMICOLON       reduce using rule 33 (declaration_base -> IDENTIFIER ASSIGN expression .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    EQUALS          shift and go to state 41
    MODULUS         shift and go to state 42
    NE              shift and go to state 43
    GT              shift and go to state 44
    LT              shift and go to state 45
    GE              shift and go to state 46
    LE              shift and go to state 47
    AND             shift and go to state 48
    OR              shift and go to state 49
    CHAIN           shift and go to state 50
    STREAMSPLIT     shift and go to state 51
    STREAMMERGE     shift and go to state 52
    FEEDBACK        shift and go to state 53
    TO_STREAM       shift and go to state 54


state 120

    (35) declaration_base -> IDENTIFIER typehint ASSIGN . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression MULTIPLY expression
    (51) expression -> . expression DIVIDE expression
    (52) expression -> . expression EQUALS expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression NE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression GE expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . expression CHAIN expression
    (62) expression -> . expression STREAMSPLIT expression
    (63) expression -> . expression STREAMMERGE expression
    (64) expression -> . expression FEEDBACK expression
    (65) expression -> . MINUS expression
    (66) expression -> . PLUS expression
    (67) expression -> . NOT expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . INT
    (74) expression -> . FLOAT
    (75) expression -> . STRING
    (76) expression -> . TRUE
    (77) expression -> . FALSE
    (78) expression -> . IDENTIFIER
    (79) expression -> . function_call
    (80) expression -> . expression TO_STREAM
    (81) expression -> . lambda_function
    (9) function_call -> . IDENTIFIER LPAREN opt_arg_list RPAREN
    (18) lambda_function -> . FN LPAREN opt_param_list RPAREN LAMBDA block_statement
    (19) lambda_function -> . FN LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (20) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA block_statement
    (21) lambda_function -> . LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (22) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA expression

    MINUS           shift and go to state 13
    PLUS            shift and go to state 12
    NOT             shift and go to state 14
    LPAREN          shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    IDENTIFIER      shift and go to state 61
    FN              shift and go to state 62

    expression                     shift and go to state 138
    function_call                  shift and go to state 22
    lambda_function                shift and go to state 23

state 121

    (36) typehint -> TYPEHINTCOLON type .

    ASSIGN          reduce using rule 36 (typehint -> TYPEHINTCOLON type .)
    SEMICOLON       reduce using rule 36 (typehint -> TYPEHINTCOLON type .)
    COMMA           reduce using rule 36 (typehint -> TYPEHINTCOLON type .)
    RPAREN          reduce using rule 36 (typehint -> TYPEHINTCOLON type .)
    LAMBDA          reduce using rule 36 (typehint -> TYPEHINTCOLON type .)
    LBRACE          reduce using rule 36 (typehint -> TYPEHINTCOLON type .)


state 122

    (37) type -> SINT .

    ASSIGN          reduce using rule 37 (type -> SINT .)
    SEMICOLON       reduce using rule 37 (type -> SINT .)
    COMMA           reduce using rule 37 (type -> SINT .)
    RPAREN          reduce using rule 37 (type -> SINT .)
    LAMBDA          reduce using rule 37 (type -> SINT .)
    LBRACE          reduce using rule 37 (type -> SINT .)


state 123

    (38) type -> SFLOAT .

    ASSIGN          reduce using rule 38 (type -> SFLOAT .)
    SEMICOLON       reduce using rule 38 (type -> SFLOAT .)
    COMMA           reduce using rule 38 (type -> SFLOAT .)
    RPAREN          reduce using rule 38 (type -> SFLOAT .)
    LAMBDA          reduce using rule 38 (type -> SFLOAT .)
    LBRACE          reduce using rule 38 (type -> SFLOAT .)


state 124

    (39) type -> SSTRING .

    ASSIGN          reduce using rule 39 (type -> SSTRING .)
    SEMICOLON       reduce using rule 39 (type -> SSTRING .)
    COMMA           reduce using rule 39 (type -> SSTRING .)
    RPAREN          reduce using rule 39 (type -> SSTRING .)
    LAMBDA          reduce using rule 39 (type -> SSTRING .)
    LBRACE          reduce using rule 39 (type -> SSTRING .)


state 125

    (40) type -> SBOOL .

    ASSIGN          reduce using rule 40 (type -> SBOOL .)
    SEMICOLON       reduce using rule 40 (type -> SBOOL .)
    COMMA           reduce using rule 40 (type -> SBOOL .)
    RPAREN          reduce using rule 40 (type -> SBOOL .)
    LAMBDA          reduce using rule 40 (type -> SBOOL .)
    LBRACE          reduce using rule 40 (type -> SBOOL .)


state 126

    (41) type -> SSTREAM .

    ASSIGN          reduce using rule 41 (type -> SSTREAM .)
    SEMICOLON       reduce using rule 41 (type -> SSTREAM .)
    COMMA           reduce using rule 41 (type -> SSTREAM .)
    RPAREN          reduce using rule 41 (type -> SSTREAM .)
    LAMBDA          reduce using rule 41 (type -> SSTREAM .)
    LBRACE          reduce using rule 41 (type -> SSTREAM .)


state 127

    (42) type -> SEVENT .

    ASSIGN          reduce using rule 42 (type -> SEVENT .)
    SEMICOLON       reduce using rule 42 (type -> SEVENT .)
    COMMA           reduce using rule 42 (type -> SEVENT .)
    RPAREN          reduce using rule 42 (type -> SEVENT .)
    LAMBDA          reduce using rule 42 (type -> SEVENT .)
    LBRACE          reduce using rule 42 (type -> SEVENT .)


state 128

    (20) lambda_function -> LPAREN opt_param_list RPAREN LAMBDA . block_statement
    (22) lambda_function -> LPAREN opt_param_list RPAREN LAMBDA . expression
    (17) block_statement -> . LBRACE statement_list RBRACE
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression MULTIPLY expression
    (51) expression -> . expression DIVIDE expression
    (52) expression -> . expression EQUALS expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression NE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression GE expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . expression CHAIN expression
    (62) expression -> . expression STREAMSPLIT expression
    (63) expression -> . expression STREAMMERGE expression
    (64) expression -> . expression FEEDBACK expression
    (65) expression -> . MINUS expression
    (66) expression -> . PLUS expression
    (67) expression -> . NOT expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . INT
    (74) expression -> . FLOAT
    (75) expression -> . STRING
    (76) expression -> . TRUE
    (77) expression -> . FALSE
    (78) expression -> . IDENTIFIER
    (79) expression -> . function_call
    (80) expression -> . expression TO_STREAM
    (81) expression -> . lambda_function
    (9) function_call -> . IDENTIFIER LPAREN opt_arg_list RPAREN
    (18) lambda_function -> . FN LPAREN opt_param_list RPAREN LAMBDA block_statement
    (19) lambda_function -> . FN LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (20) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA block_statement
    (21) lambda_function -> . LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (22) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA expression

    LBRACE          shift and go to state 141
    MINUS           shift and go to state 13
    PLUS            shift and go to state 12
    NOT             shift and go to state 14
    LPAREN          shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    IDENTIFIER      shift and go to state 61
    FN              shift and go to state 62

    block_statement                shift and go to state 139
    expression                     shift and go to state 140
    function_call                  shift and go to state 22
    lambda_function                shift and go to state 23

state 129

    (21) lambda_function -> LPAREN opt_param_list RPAREN typehint . LAMBDA block_statement

    LAMBDA          shift and go to state 142


state 130

    (26) param_list -> param_list COMMA param .

    COMMA           reduce using rule 26 (param_list -> param_list COMMA param .)
    RPAREN          reduce using rule 26 (param_list -> param_list COMMA param .)


state 131

    (9) function_call -> IDENTIFIER LPAREN opt_arg_list RPAREN .

    SEMICOLON       reduce using rule 9 (function_call -> IDENTIFIER LPAREN opt_arg_list RPAREN .)
    PLUS            reduce using rule 9 (function_call -> IDENTIFIER LPAREN opt_arg_list RPAREN .)
    MINUS           reduce using rule 9 (function_call -> IDENTIFIER LPAREN opt_arg_list RPAREN .)
    MULTIPLY        reduce using rule 9 (function_call -> IDENTIFIER LPAREN opt_arg_list RPAREN .)
    DIVIDE          reduce using rule 9 (function_call -> IDENTIFIER LPAREN opt_arg_list RPAREN .)
    EQUALS          reduce using rule 9 (function_call -> IDENTIFIER LPAREN opt_arg_list RPAREN .)
    MODULUS         reduce using rule 9 (function_call -> IDENTIFIER LPAREN opt_arg_list RPAREN .)
    NE              reduce using rule 9 (function_call -> IDENTIFIER LPAREN opt_arg_list RPAREN .)
    GT              reduce using rule 9 (function_call -> IDENTIFIER LPAREN opt_arg_list RPAREN .)
    LT              reduce using rule 9 (function_call -> IDENTIFIER LPAREN opt_arg_list RPAREN .)
    GE              reduce using rule 9 (function_call -> IDENTIFIER LPAREN opt_arg_list RPAREN .)
    LE              reduce using rule 9 (function_call -> IDENTIFIER LPAREN opt_arg_list RPAREN .)
    AND             reduce using rule 9 (function_call -> IDENTIFIER LPAREN opt_arg_list RPAREN .)
    OR              reduce using rule 9 (function_call -> IDENTIFIER LPAREN opt_arg_list RPAREN .)
    CHAIN           reduce using rule 9 (function_call -> IDENTIFIER LPAREN opt_arg_list RPAREN .)
    STREAMSPLIT     reduce using rule 9 (function_call -> IDENTIFIER LPAREN opt_arg_list RPAREN .)
    STREAMMERGE     reduce using rule 9 (function_call -> IDENTIFIER LPAREN opt_arg_list RPAREN .)
    FEEDBACK        reduce using rule 9 (function_call -> IDENTIFIER LPAREN opt_arg_list RPAREN .)
    TO_STREAM       reduce using rule 9 (function_call -> IDENTIFIER LPAREN opt_arg_list RPAREN .)
    RPAREN          reduce using rule 9 (function_call -> IDENTIFIER LPAREN opt_arg_list RPAREN .)
    COMMA           reduce using rule 9 (function_call -> IDENTIFIER LPAREN opt_arg_list RPAREN .)


state 132

    (13) arg_list -> arg_list COMMA . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression MULTIPLY expression
    (51) expression -> . expression DIVIDE expression
    (52) expression -> . expression EQUALS expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression NE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression GE expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . expression CHAIN expression
    (62) expression -> . expression STREAMSPLIT expression
    (63) expression -> . expression STREAMMERGE expression
    (64) expression -> . expression FEEDBACK expression
    (65) expression -> . MINUS expression
    (66) expression -> . PLUS expression
    (67) expression -> . NOT expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . INT
    (74) expression -> . FLOAT
    (75) expression -> . STRING
    (76) expression -> . TRUE
    (77) expression -> . FALSE
    (78) expression -> . IDENTIFIER
    (79) expression -> . function_call
    (80) expression -> . expression TO_STREAM
    (81) expression -> . lambda_function
    (9) function_call -> . IDENTIFIER LPAREN opt_arg_list RPAREN
    (18) lambda_function -> . FN LPAREN opt_param_list RPAREN LAMBDA block_statement
    (19) lambda_function -> . FN LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (20) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA block_statement
    (21) lambda_function -> . LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (22) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA expression

    MINUS           shift and go to state 13
    PLUS            shift and go to state 12
    NOT             shift and go to state 14
    LPAREN          shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    IDENTIFIER      shift and go to state 61
    FN              shift and go to state 62

    expression                     shift and go to state 143
    function_call                  shift and go to state 22
    lambda_function                shift and go to state 23

state 133

    (14) function_definition -> FN IDENTIFIER LPAREN opt_param_list . RPAREN block_statement
    (15) function_definition -> FN IDENTIFIER LPAREN opt_param_list . RPAREN typehint block_statement

    RPAREN          shift and go to state 144


state 134

    (18) lambda_function -> FN LPAREN opt_param_list RPAREN . LAMBDA block_statement
    (19) lambda_function -> FN LPAREN opt_param_list RPAREN . typehint LAMBDA block_statement
    (36) typehint -> . TYPEHINTCOLON type

    LAMBDA          shift and go to state 145
    TYPEHINTCOLON   shift and go to state 101

    typehint                       shift and go to state 146

state 135

    (82) conditional -> IF LPAREN expression RPAREN . block_statement ELSE block_statement
    (83) conditional -> IF LPAREN expression RPAREN . block_statement
    (17) block_statement -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 141

    block_statement                shift and go to state 147

state 136

    (84) loop -> FOR LPAREN declaration SEMICOLON . expression SEMICOLON expression RPAREN block_statement
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression MULTIPLY expression
    (51) expression -> . expression DIVIDE expression
    (52) expression -> . expression EQUALS expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression NE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression GE expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . expression CHAIN expression
    (62) expression -> . expression STREAMSPLIT expression
    (63) expression -> . expression STREAMMERGE expression
    (64) expression -> . expression FEEDBACK expression
    (65) expression -> . MINUS expression
    (66) expression -> . PLUS expression
    (67) expression -> . NOT expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . INT
    (74) expression -> . FLOAT
    (75) expression -> . STRING
    (76) expression -> . TRUE
    (77) expression -> . FALSE
    (78) expression -> . IDENTIFIER
    (79) expression -> . function_call
    (80) expression -> . expression TO_STREAM
    (81) expression -> . lambda_function
    (9) function_call -> . IDENTIFIER LPAREN opt_arg_list RPAREN
    (18) lambda_function -> . FN LPAREN opt_param_list RPAREN LAMBDA block_statement
    (19) lambda_function -> . FN LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (20) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA block_statement
    (21) lambda_function -> . LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (22) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA expression

    MINUS           shift and go to state 13
    PLUS            shift and go to state 12
    NOT             shift and go to state 14
    LPAREN          shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    IDENTIFIER      shift and go to state 61
    FN              shift and go to state 62

    expression                     shift and go to state 148
    function_call                  shift and go to state 22
    lambda_function                shift and go to state 23

state 137

    (85) loop -> WHILE LPAREN expression RPAREN . block_statement
    (17) block_statement -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 141

    block_statement                shift and go to state 149

state 138

    (35) declaration_base -> IDENTIFIER typehint ASSIGN expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . MULTIPLY expression
    (51) expression -> expression . DIVIDE expression
    (52) expression -> expression . EQUALS expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . NE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . GE expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (61) expression -> expression . CHAIN expression
    (62) expression -> expression . STREAMSPLIT expression
    (63) expression -> expression . STREAMMERGE expression
    (64) expression -> expression . FEEDBACK expression
    (80) expression -> expression . TO_STREAM

    SEMICOLON       reduce using rule 35 (declaration_base -> IDENTIFIER typehint ASSIGN expression .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    EQUALS          shift and go to state 41
    MODULUS         shift and go to state 42
    NE              shift and go to state 43
    GT              shift and go to state 44
    LT              shift and go to state 45
    GE              shift and go to state 46
    LE              shift and go to state 47
    AND             shift and go to state 48
    OR              shift and go to state 49
    CHAIN           shift and go to state 50
    STREAMSPLIT     shift and go to state 51
    STREAMMERGE     shift and go to state 52
    FEEDBACK        shift and go to state 53
    TO_STREAM       shift and go to state 54


state 139

    (20) lambda_function -> LPAREN opt_param_list RPAREN LAMBDA block_statement .

    SEMICOLON       reduce using rule 20 (lambda_function -> LPAREN opt_param_list RPAREN LAMBDA block_statement .)
    PLUS            reduce using rule 20 (lambda_function -> LPAREN opt_param_list RPAREN LAMBDA block_statement .)
    MINUS           reduce using rule 20 (lambda_function -> LPAREN opt_param_list RPAREN LAMBDA block_statement .)
    MULTIPLY        reduce using rule 20 (lambda_function -> LPAREN opt_param_list RPAREN LAMBDA block_statement .)
    DIVIDE          reduce using rule 20 (lambda_function -> LPAREN opt_param_list RPAREN LAMBDA block_statement .)
    EQUALS          reduce using rule 20 (lambda_function -> LPAREN opt_param_list RPAREN LAMBDA block_statement .)
    MODULUS         reduce using rule 20 (lambda_function -> LPAREN opt_param_list RPAREN LAMBDA block_statement .)
    NE              reduce using rule 20 (lambda_function -> LPAREN opt_param_list RPAREN LAMBDA block_statement .)
    GT              reduce using rule 20 (lambda_function -> LPAREN opt_param_list RPAREN LAMBDA block_statement .)
    LT              reduce using rule 20 (lambda_function -> LPAREN opt_param_list RPAREN LAMBDA block_statement .)
    GE              reduce using rule 20 (lambda_function -> LPAREN opt_param_list RPAREN LAMBDA block_statement .)
    LE              reduce using rule 20 (lambda_function -> LPAREN opt_param_list RPAREN LAMBDA block_statement .)
    AND             reduce using rule 20 (lambda_function -> LPAREN opt_param_list RPAREN LAMBDA block_statement .)
    OR              reduce using rule 20 (lambda_function -> LPAREN opt_param_list RPAREN LAMBDA block_statement .)
    CHAIN           reduce using rule 20 (lambda_function -> LPAREN opt_param_list RPAREN LAMBDA block_statement .)
    STREAMSPLIT     reduce using rule 20 (lambda_function -> LPAREN opt_param_list RPAREN LAMBDA block_statement .)
    STREAMMERGE     reduce using rule 20 (lambda_function -> LPAREN opt_param_list RPAREN LAMBDA block_statement .)
    FEEDBACK        reduce using rule 20 (lambda_function -> LPAREN opt_param_list RPAREN LAMBDA block_statement .)
    TO_STREAM       reduce using rule 20 (lambda_function -> LPAREN opt_param_list RPAREN LAMBDA block_statement .)
    RPAREN          reduce using rule 20 (lambda_function -> LPAREN opt_param_list RPAREN LAMBDA block_statement .)
    COMMA           reduce using rule 20 (lambda_function -> LPAREN opt_param_list RPAREN LAMBDA block_statement .)


state 140

    (22) lambda_function -> LPAREN opt_param_list RPAREN LAMBDA expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . MULTIPLY expression
    (51) expression -> expression . DIVIDE expression
    (52) expression -> expression . EQUALS expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . NE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . GE expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (61) expression -> expression . CHAIN expression
    (62) expression -> expression . STREAMSPLIT expression
    (63) expression -> expression . STREAMMERGE expression
    (64) expression -> expression . FEEDBACK expression
    (80) expression -> expression . TO_STREAM

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for CHAIN resolved as shift
  ! shift/reduce conflict for STREAMSPLIT resolved as shift
  ! shift/reduce conflict for STREAMMERGE resolved as shift
  ! shift/reduce conflict for FEEDBACK resolved as shift
  ! shift/reduce conflict for TO_STREAM resolved as shift
    SEMICOLON       reduce using rule 22 (lambda_function -> LPAREN opt_param_list RPAREN LAMBDA expression .)
    RPAREN          reduce using rule 22 (lambda_function -> LPAREN opt_param_list RPAREN LAMBDA expression .)
    COMMA           reduce using rule 22 (lambda_function -> LPAREN opt_param_list RPAREN LAMBDA expression .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    EQUALS          shift and go to state 41
    MODULUS         shift and go to state 42
    NE              shift and go to state 43
    GT              shift and go to state 44
    LT              shift and go to state 45
    GE              shift and go to state 46
    LE              shift and go to state 47
    AND             shift and go to state 48
    OR              shift and go to state 49
    CHAIN           shift and go to state 50
    STREAMSPLIT     shift and go to state 51
    STREAMMERGE     shift and go to state 52
    FEEDBACK        shift and go to state 53
    TO_STREAM       shift and go to state 54

  ! PLUS            [ reduce using rule 22 (lambda_function -> LPAREN opt_param_list RPAREN LAMBDA expression .) ]
  ! MINUS           [ reduce using rule 22 (lambda_function -> LPAREN opt_param_list RPAREN LAMBDA expression .) ]
  ! MULTIPLY        [ reduce using rule 22 (lambda_function -> LPAREN opt_param_list RPAREN LAMBDA expression .) ]
  ! DIVIDE          [ reduce using rule 22 (lambda_function -> LPAREN opt_param_list RPAREN LAMBDA expression .) ]
  ! EQUALS          [ reduce using rule 22 (lambda_function -> LPAREN opt_param_list RPAREN LAMBDA expression .) ]
  ! MODULUS         [ reduce using rule 22 (lambda_function -> LPAREN opt_param_list RPAREN LAMBDA expression .) ]
  ! NE              [ reduce using rule 22 (lambda_function -> LPAREN opt_param_list RPAREN LAMBDA expression .) ]
  ! GT              [ reduce using rule 22 (lambda_function -> LPAREN opt_param_list RPAREN LAMBDA expression .) ]
  ! LT              [ reduce using rule 22 (lambda_function -> LPAREN opt_param_list RPAREN LAMBDA expression .) ]
  ! GE              [ reduce using rule 22 (lambda_function -> LPAREN opt_param_list RPAREN LAMBDA expression .) ]
  ! LE              [ reduce using rule 22 (lambda_function -> LPAREN opt_param_list RPAREN LAMBDA expression .) ]
  ! AND             [ reduce using rule 22 (lambda_function -> LPAREN opt_param_list RPAREN LAMBDA expression .) ]
  ! OR              [ reduce using rule 22 (lambda_function -> LPAREN opt_param_list RPAREN LAMBDA expression .) ]
  ! CHAIN           [ reduce using rule 22 (lambda_function -> LPAREN opt_param_list RPAREN LAMBDA expression .) ]
  ! STREAMSPLIT     [ reduce using rule 22 (lambda_function -> LPAREN opt_param_list RPAREN LAMBDA expression .) ]
  ! STREAMMERGE     [ reduce using rule 22 (lambda_function -> LPAREN opt_param_list RPAREN LAMBDA expression .) ]
  ! FEEDBACK        [ reduce using rule 22 (lambda_function -> LPAREN opt_param_list RPAREN LAMBDA expression .) ]
  ! TO_STREAM       [ reduce using rule 22 (lambda_function -> LPAREN opt_param_list RPAREN LAMBDA expression .) ]


state 141

    (17) block_statement -> LBRACE . statement_list RBRACE
    (7) statement_list -> . statement
    (8) statement_list -> . statement_list statement
    (2) statement -> . declaration
    (3) statement -> . expression SEMICOLON
    (4) statement -> . return_statement SEMICOLON
    (5) statement -> . control_flow
    (6) statement -> . assignment SEMICOLON
    (29) declaration -> . VAR declaration_base SEMICOLON
    (30) declaration -> . CONST declaration_base SEMICOLON
    (31) declaration -> . function_definition
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression MULTIPLY expression
    (51) expression -> . expression DIVIDE expression
    (52) expression -> . expression EQUALS expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression NE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression GE expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . expression CHAIN expression
    (62) expression -> . expression STREAMSPLIT expression
    (63) expression -> . expression STREAMMERGE expression
    (64) expression -> . expression FEEDBACK expression
    (65) expression -> . MINUS expression
    (66) expression -> . PLUS expression
    (67) expression -> . NOT expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . INT
    (74) expression -> . FLOAT
    (75) expression -> . STRING
    (76) expression -> . TRUE
    (77) expression -> . FALSE
    (78) expression -> . IDENTIFIER
    (79) expression -> . function_call
    (80) expression -> . expression TO_STREAM
    (81) expression -> . lambda_function
    (16) return_statement -> . RETURN expression
    (68) control_flow -> . conditional
    (69) control_flow -> . loop
    (70) control_flow -> . break
    (71) control_flow -> . continue
    (88) assignment -> . IDENTIFIER ASSIGN expression
    (14) function_definition -> . FN IDENTIFIER LPAREN opt_param_list RPAREN block_statement
    (15) function_definition -> . FN IDENTIFIER LPAREN opt_param_list RPAREN typehint block_statement
    (9) function_call -> . IDENTIFIER LPAREN opt_arg_list RPAREN
    (18) lambda_function -> . FN LPAREN opt_param_list RPAREN LAMBDA block_statement
    (19) lambda_function -> . FN LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (20) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA block_statement
    (21) lambda_function -> . LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (22) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA expression
    (82) conditional -> . IF LPAREN expression RPAREN block_statement ELSE block_statement
    (83) conditional -> . IF LPAREN expression RPAREN block_statement
    (84) loop -> . FOR LPAREN declaration SEMICOLON expression SEMICOLON expression RPAREN block_statement
    (85) loop -> . WHILE LPAREN expression RPAREN block_statement
    (86) break -> . BREAK SEMICOLON
    (87) continue -> . CONTINUE SEMICOLON

    VAR             shift and go to state 9
    CONST           shift and go to state 10
    MINUS           shift and go to state 13
    PLUS            shift and go to state 12
    NOT             shift and go to state 14
    LPAREN          shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    IDENTIFIER      shift and go to state 21
    RETURN          shift and go to state 24
    FN              shift and go to state 29
    IF              shift and go to state 30
    FOR             shift and go to state 31
    WHILE           shift and go to state 32
    BREAK           shift and go to state 33
    CONTINUE        shift and go to state 34

    statement_list                 shift and go to state 150
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    expression                     shift and go to state 5
    return_statement               shift and go to state 6
    control_flow                   shift and go to state 7
    assignment                     shift and go to state 8
    function_definition            shift and go to state 11
    function_call                  shift and go to state 22
    lambda_function                shift and go to state 23
    conditional                    shift and go to state 25
    loop                           shift and go to state 26
    break                          shift and go to state 27
    continue                       shift and go to state 28

state 142

    (21) lambda_function -> LPAREN opt_param_list RPAREN typehint LAMBDA . block_statement
    (17) block_statement -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 141

    block_statement                shift and go to state 151

state 143

    (13) arg_list -> arg_list COMMA expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . MULTIPLY expression
    (51) expression -> expression . DIVIDE expression
    (52) expression -> expression . EQUALS expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . NE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . GE expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (61) expression -> expression . CHAIN expression
    (62) expression -> expression . STREAMSPLIT expression
    (63) expression -> expression . STREAMMERGE expression
    (64) expression -> expression . FEEDBACK expression
    (80) expression -> expression . TO_STREAM

    COMMA           reduce using rule 13 (arg_list -> arg_list COMMA expression .)
    RPAREN          reduce using rule 13 (arg_list -> arg_list COMMA expression .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    EQUALS          shift and go to state 41
    MODULUS         shift and go to state 42
    NE              shift and go to state 43
    GT              shift and go to state 44
    LT              shift and go to state 45
    GE              shift and go to state 46
    LE              shift and go to state 47
    AND             shift and go to state 48
    OR              shift and go to state 49
    CHAIN           shift and go to state 50
    STREAMSPLIT     shift and go to state 51
    STREAMMERGE     shift and go to state 52
    FEEDBACK        shift and go to state 53
    TO_STREAM       shift and go to state 54


state 144

    (14) function_definition -> FN IDENTIFIER LPAREN opt_param_list RPAREN . block_statement
    (15) function_definition -> FN IDENTIFIER LPAREN opt_param_list RPAREN . typehint block_statement
    (17) block_statement -> . LBRACE statement_list RBRACE
    (36) typehint -> . TYPEHINTCOLON type

    LBRACE          shift and go to state 141
    TYPEHINTCOLON   shift and go to state 101

    block_statement                shift and go to state 152
    typehint                       shift and go to state 153

state 145

    (18) lambda_function -> FN LPAREN opt_param_list RPAREN LAMBDA . block_statement
    (17) block_statement -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 141

    block_statement                shift and go to state 154

state 146

    (19) lambda_function -> FN LPAREN opt_param_list RPAREN typehint . LAMBDA block_statement

    LAMBDA          shift and go to state 155


state 147

    (82) conditional -> IF LPAREN expression RPAREN block_statement . ELSE block_statement
    (83) conditional -> IF LPAREN expression RPAREN block_statement .

    ELSE            shift and go to state 156
    VAR             reduce using rule 83 (conditional -> IF LPAREN expression RPAREN block_statement .)
    CONST           reduce using rule 83 (conditional -> IF LPAREN expression RPAREN block_statement .)
    MINUS           reduce using rule 83 (conditional -> IF LPAREN expression RPAREN block_statement .)
    PLUS            reduce using rule 83 (conditional -> IF LPAREN expression RPAREN block_statement .)
    NOT             reduce using rule 83 (conditional -> IF LPAREN expression RPAREN block_statement .)
    LPAREN          reduce using rule 83 (conditional -> IF LPAREN expression RPAREN block_statement .)
    INT             reduce using rule 83 (conditional -> IF LPAREN expression RPAREN block_statement .)
    FLOAT           reduce using rule 83 (conditional -> IF LPAREN expression RPAREN block_statement .)
    STRING          reduce using rule 83 (conditional -> IF LPAREN expression RPAREN block_statement .)
    TRUE            reduce using rule 83 (conditional -> IF LPAREN expression RPAREN block_statement .)
    FALSE           reduce using rule 83 (conditional -> IF LPAREN expression RPAREN block_statement .)
    IDENTIFIER      reduce using rule 83 (conditional -> IF LPAREN expression RPAREN block_statement .)
    RETURN          reduce using rule 83 (conditional -> IF LPAREN expression RPAREN block_statement .)
    FN              reduce using rule 83 (conditional -> IF LPAREN expression RPAREN block_statement .)
    IF              reduce using rule 83 (conditional -> IF LPAREN expression RPAREN block_statement .)
    FOR             reduce using rule 83 (conditional -> IF LPAREN expression RPAREN block_statement .)
    WHILE           reduce using rule 83 (conditional -> IF LPAREN expression RPAREN block_statement .)
    BREAK           reduce using rule 83 (conditional -> IF LPAREN expression RPAREN block_statement .)
    CONTINUE        reduce using rule 83 (conditional -> IF LPAREN expression RPAREN block_statement .)
    $end            reduce using rule 83 (conditional -> IF LPAREN expression RPAREN block_statement .)
    RBRACE          reduce using rule 83 (conditional -> IF LPAREN expression RPAREN block_statement .)


state 148

    (84) loop -> FOR LPAREN declaration SEMICOLON expression . SEMICOLON expression RPAREN block_statement
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . MULTIPLY expression
    (51) expression -> expression . DIVIDE expression
    (52) expression -> expression . EQUALS expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . NE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . GE expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (61) expression -> expression . CHAIN expression
    (62) expression -> expression . STREAMSPLIT expression
    (63) expression -> expression . STREAMMERGE expression
    (64) expression -> expression . FEEDBACK expression
    (80) expression -> expression . TO_STREAM

    SEMICOLON       shift and go to state 157
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    EQUALS          shift and go to state 41
    MODULUS         shift and go to state 42
    NE              shift and go to state 43
    GT              shift and go to state 44
    LT              shift and go to state 45
    GE              shift and go to state 46
    LE              shift and go to state 47
    AND             shift and go to state 48
    OR              shift and go to state 49
    CHAIN           shift and go to state 50
    STREAMSPLIT     shift and go to state 51
    STREAMMERGE     shift and go to state 52
    FEEDBACK        shift and go to state 53
    TO_STREAM       shift and go to state 54


state 149

    (85) loop -> WHILE LPAREN expression RPAREN block_statement .

    VAR             reduce using rule 85 (loop -> WHILE LPAREN expression RPAREN block_statement .)
    CONST           reduce using rule 85 (loop -> WHILE LPAREN expression RPAREN block_statement .)
    MINUS           reduce using rule 85 (loop -> WHILE LPAREN expression RPAREN block_statement .)
    PLUS            reduce using rule 85 (loop -> WHILE LPAREN expression RPAREN block_statement .)
    NOT             reduce using rule 85 (loop -> WHILE LPAREN expression RPAREN block_statement .)
    LPAREN          reduce using rule 85 (loop -> WHILE LPAREN expression RPAREN block_statement .)
    INT             reduce using rule 85 (loop -> WHILE LPAREN expression RPAREN block_statement .)
    FLOAT           reduce using rule 85 (loop -> WHILE LPAREN expression RPAREN block_statement .)
    STRING          reduce using rule 85 (loop -> WHILE LPAREN expression RPAREN block_statement .)
    TRUE            reduce using rule 85 (loop -> WHILE LPAREN expression RPAREN block_statement .)
    FALSE           reduce using rule 85 (loop -> WHILE LPAREN expression RPAREN block_statement .)
    IDENTIFIER      reduce using rule 85 (loop -> WHILE LPAREN expression RPAREN block_statement .)
    RETURN          reduce using rule 85 (loop -> WHILE LPAREN expression RPAREN block_statement .)
    FN              reduce using rule 85 (loop -> WHILE LPAREN expression RPAREN block_statement .)
    IF              reduce using rule 85 (loop -> WHILE LPAREN expression RPAREN block_statement .)
    FOR             reduce using rule 85 (loop -> WHILE LPAREN expression RPAREN block_statement .)
    WHILE           reduce using rule 85 (loop -> WHILE LPAREN expression RPAREN block_statement .)
    BREAK           reduce using rule 85 (loop -> WHILE LPAREN expression RPAREN block_statement .)
    CONTINUE        reduce using rule 85 (loop -> WHILE LPAREN expression RPAREN block_statement .)
    $end            reduce using rule 85 (loop -> WHILE LPAREN expression RPAREN block_statement .)
    RBRACE          reduce using rule 85 (loop -> WHILE LPAREN expression RPAREN block_statement .)


state 150

    (17) block_statement -> LBRACE statement_list . RBRACE
    (8) statement_list -> statement_list . statement
    (2) statement -> . declaration
    (3) statement -> . expression SEMICOLON
    (4) statement -> . return_statement SEMICOLON
    (5) statement -> . control_flow
    (6) statement -> . assignment SEMICOLON
    (29) declaration -> . VAR declaration_base SEMICOLON
    (30) declaration -> . CONST declaration_base SEMICOLON
    (31) declaration -> . function_definition
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression MULTIPLY expression
    (51) expression -> . expression DIVIDE expression
    (52) expression -> . expression EQUALS expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression NE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression GE expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . expression CHAIN expression
    (62) expression -> . expression STREAMSPLIT expression
    (63) expression -> . expression STREAMMERGE expression
    (64) expression -> . expression FEEDBACK expression
    (65) expression -> . MINUS expression
    (66) expression -> . PLUS expression
    (67) expression -> . NOT expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . INT
    (74) expression -> . FLOAT
    (75) expression -> . STRING
    (76) expression -> . TRUE
    (77) expression -> . FALSE
    (78) expression -> . IDENTIFIER
    (79) expression -> . function_call
    (80) expression -> . expression TO_STREAM
    (81) expression -> . lambda_function
    (16) return_statement -> . RETURN expression
    (68) control_flow -> . conditional
    (69) control_flow -> . loop
    (70) control_flow -> . break
    (71) control_flow -> . continue
    (88) assignment -> . IDENTIFIER ASSIGN expression
    (14) function_definition -> . FN IDENTIFIER LPAREN opt_param_list RPAREN block_statement
    (15) function_definition -> . FN IDENTIFIER LPAREN opt_param_list RPAREN typehint block_statement
    (9) function_call -> . IDENTIFIER LPAREN opt_arg_list RPAREN
    (18) lambda_function -> . FN LPAREN opt_param_list RPAREN LAMBDA block_statement
    (19) lambda_function -> . FN LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (20) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA block_statement
    (21) lambda_function -> . LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (22) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA expression
    (82) conditional -> . IF LPAREN expression RPAREN block_statement ELSE block_statement
    (83) conditional -> . IF LPAREN expression RPAREN block_statement
    (84) loop -> . FOR LPAREN declaration SEMICOLON expression SEMICOLON expression RPAREN block_statement
    (85) loop -> . WHILE LPAREN expression RPAREN block_statement
    (86) break -> . BREAK SEMICOLON
    (87) continue -> . CONTINUE SEMICOLON

    RBRACE          shift and go to state 158
    VAR             shift and go to state 9
    CONST           shift and go to state 10
    MINUS           shift and go to state 13
    PLUS            shift and go to state 12
    NOT             shift and go to state 14
    LPAREN          shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    IDENTIFIER      shift and go to state 21
    RETURN          shift and go to state 24
    FN              shift and go to state 29
    IF              shift and go to state 30
    FOR             shift and go to state 31
    WHILE           shift and go to state 32
    BREAK           shift and go to state 33
    CONTINUE        shift and go to state 34

    statement                      shift and go to state 35
    declaration                    shift and go to state 4
    expression                     shift and go to state 5
    return_statement               shift and go to state 6
    control_flow                   shift and go to state 7
    assignment                     shift and go to state 8
    function_definition            shift and go to state 11
    function_call                  shift and go to state 22
    lambda_function                shift and go to state 23
    conditional                    shift and go to state 25
    loop                           shift and go to state 26
    break                          shift and go to state 27
    continue                       shift and go to state 28

state 151

    (21) lambda_function -> LPAREN opt_param_list RPAREN typehint LAMBDA block_statement .

    SEMICOLON       reduce using rule 21 (lambda_function -> LPAREN opt_param_list RPAREN typehint LAMBDA block_statement .)
    PLUS            reduce using rule 21 (lambda_function -> LPAREN opt_param_list RPAREN typehint LAMBDA block_statement .)
    MINUS           reduce using rule 21 (lambda_function -> LPAREN opt_param_list RPAREN typehint LAMBDA block_statement .)
    MULTIPLY        reduce using rule 21 (lambda_function -> LPAREN opt_param_list RPAREN typehint LAMBDA block_statement .)
    DIVIDE          reduce using rule 21 (lambda_function -> LPAREN opt_param_list RPAREN typehint LAMBDA block_statement .)
    EQUALS          reduce using rule 21 (lambda_function -> LPAREN opt_param_list RPAREN typehint LAMBDA block_statement .)
    MODULUS         reduce using rule 21 (lambda_function -> LPAREN opt_param_list RPAREN typehint LAMBDA block_statement .)
    NE              reduce using rule 21 (lambda_function -> LPAREN opt_param_list RPAREN typehint LAMBDA block_statement .)
    GT              reduce using rule 21 (lambda_function -> LPAREN opt_param_list RPAREN typehint LAMBDA block_statement .)
    LT              reduce using rule 21 (lambda_function -> LPAREN opt_param_list RPAREN typehint LAMBDA block_statement .)
    GE              reduce using rule 21 (lambda_function -> LPAREN opt_param_list RPAREN typehint LAMBDA block_statement .)
    LE              reduce using rule 21 (lambda_function -> LPAREN opt_param_list RPAREN typehint LAMBDA block_statement .)
    AND             reduce using rule 21 (lambda_function -> LPAREN opt_param_list RPAREN typehint LAMBDA block_statement .)
    OR              reduce using rule 21 (lambda_function -> LPAREN opt_param_list RPAREN typehint LAMBDA block_statement .)
    CHAIN           reduce using rule 21 (lambda_function -> LPAREN opt_param_list RPAREN typehint LAMBDA block_statement .)
    STREAMSPLIT     reduce using rule 21 (lambda_function -> LPAREN opt_param_list RPAREN typehint LAMBDA block_statement .)
    STREAMMERGE     reduce using rule 21 (lambda_function -> LPAREN opt_param_list RPAREN typehint LAMBDA block_statement .)
    FEEDBACK        reduce using rule 21 (lambda_function -> LPAREN opt_param_list RPAREN typehint LAMBDA block_statement .)
    TO_STREAM       reduce using rule 21 (lambda_function -> LPAREN opt_param_list RPAREN typehint LAMBDA block_statement .)
    RPAREN          reduce using rule 21 (lambda_function -> LPAREN opt_param_list RPAREN typehint LAMBDA block_statement .)
    COMMA           reduce using rule 21 (lambda_function -> LPAREN opt_param_list RPAREN typehint LAMBDA block_statement .)


state 152

    (14) function_definition -> FN IDENTIFIER LPAREN opt_param_list RPAREN block_statement .

    VAR             reduce using rule 14 (function_definition -> FN IDENTIFIER LPAREN opt_param_list RPAREN block_statement .)
    CONST           reduce using rule 14 (function_definition -> FN IDENTIFIER LPAREN opt_param_list RPAREN block_statement .)
    MINUS           reduce using rule 14 (function_definition -> FN IDENTIFIER LPAREN opt_param_list RPAREN block_statement .)
    PLUS            reduce using rule 14 (function_definition -> FN IDENTIFIER LPAREN opt_param_list RPAREN block_statement .)
    NOT             reduce using rule 14 (function_definition -> FN IDENTIFIER LPAREN opt_param_list RPAREN block_statement .)
    LPAREN          reduce using rule 14 (function_definition -> FN IDENTIFIER LPAREN opt_param_list RPAREN block_statement .)
    INT             reduce using rule 14 (function_definition -> FN IDENTIFIER LPAREN opt_param_list RPAREN block_statement .)
    FLOAT           reduce using rule 14 (function_definition -> FN IDENTIFIER LPAREN opt_param_list RPAREN block_statement .)
    STRING          reduce using rule 14 (function_definition -> FN IDENTIFIER LPAREN opt_param_list RPAREN block_statement .)
    TRUE            reduce using rule 14 (function_definition -> FN IDENTIFIER LPAREN opt_param_list RPAREN block_statement .)
    FALSE           reduce using rule 14 (function_definition -> FN IDENTIFIER LPAREN opt_param_list RPAREN block_statement .)
    IDENTIFIER      reduce using rule 14 (function_definition -> FN IDENTIFIER LPAREN opt_param_list RPAREN block_statement .)
    RETURN          reduce using rule 14 (function_definition -> FN IDENTIFIER LPAREN opt_param_list RPAREN block_statement .)
    FN              reduce using rule 14 (function_definition -> FN IDENTIFIER LPAREN opt_param_list RPAREN block_statement .)
    IF              reduce using rule 14 (function_definition -> FN IDENTIFIER LPAREN opt_param_list RPAREN block_statement .)
    FOR             reduce using rule 14 (function_definition -> FN IDENTIFIER LPAREN opt_param_list RPAREN block_statement .)
    WHILE           reduce using rule 14 (function_definition -> FN IDENTIFIER LPAREN opt_param_list RPAREN block_statement .)
    BREAK           reduce using rule 14 (function_definition -> FN IDENTIFIER LPAREN opt_param_list RPAREN block_statement .)
    CONTINUE        reduce using rule 14 (function_definition -> FN IDENTIFIER LPAREN opt_param_list RPAREN block_statement .)
    $end            reduce using rule 14 (function_definition -> FN IDENTIFIER LPAREN opt_param_list RPAREN block_statement .)
    SEMICOLON       reduce using rule 14 (function_definition -> FN IDENTIFIER LPAREN opt_param_list RPAREN block_statement .)
    RBRACE          reduce using rule 14 (function_definition -> FN IDENTIFIER LPAREN opt_param_list RPAREN block_statement .)


state 153

    (15) function_definition -> FN IDENTIFIER LPAREN opt_param_list RPAREN typehint . block_statement
    (17) block_statement -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 141

    block_statement                shift and go to state 159

state 154

    (18) lambda_function -> FN LPAREN opt_param_list RPAREN LAMBDA block_statement .

    SEMICOLON       reduce using rule 18 (lambda_function -> FN LPAREN opt_param_list RPAREN LAMBDA block_statement .)
    PLUS            reduce using rule 18 (lambda_function -> FN LPAREN opt_param_list RPAREN LAMBDA block_statement .)
    MINUS           reduce using rule 18 (lambda_function -> FN LPAREN opt_param_list RPAREN LAMBDA block_statement .)
    MULTIPLY        reduce using rule 18 (lambda_function -> FN LPAREN opt_param_list RPAREN LAMBDA block_statement .)
    DIVIDE          reduce using rule 18 (lambda_function -> FN LPAREN opt_param_list RPAREN LAMBDA block_statement .)
    EQUALS          reduce using rule 18 (lambda_function -> FN LPAREN opt_param_list RPAREN LAMBDA block_statement .)
    MODULUS         reduce using rule 18 (lambda_function -> FN LPAREN opt_param_list RPAREN LAMBDA block_statement .)
    NE              reduce using rule 18 (lambda_function -> FN LPAREN opt_param_list RPAREN LAMBDA block_statement .)
    GT              reduce using rule 18 (lambda_function -> FN LPAREN opt_param_list RPAREN LAMBDA block_statement .)
    LT              reduce using rule 18 (lambda_function -> FN LPAREN opt_param_list RPAREN LAMBDA block_statement .)
    GE              reduce using rule 18 (lambda_function -> FN LPAREN opt_param_list RPAREN LAMBDA block_statement .)
    LE              reduce using rule 18 (lambda_function -> FN LPAREN opt_param_list RPAREN LAMBDA block_statement .)
    AND             reduce using rule 18 (lambda_function -> FN LPAREN opt_param_list RPAREN LAMBDA block_statement .)
    OR              reduce using rule 18 (lambda_function -> FN LPAREN opt_param_list RPAREN LAMBDA block_statement .)
    CHAIN           reduce using rule 18 (lambda_function -> FN LPAREN opt_param_list RPAREN LAMBDA block_statement .)
    STREAMSPLIT     reduce using rule 18 (lambda_function -> FN LPAREN opt_param_list RPAREN LAMBDA block_statement .)
    STREAMMERGE     reduce using rule 18 (lambda_function -> FN LPAREN opt_param_list RPAREN LAMBDA block_statement .)
    FEEDBACK        reduce using rule 18 (lambda_function -> FN LPAREN opt_param_list RPAREN LAMBDA block_statement .)
    TO_STREAM       reduce using rule 18 (lambda_function -> FN LPAREN opt_param_list RPAREN LAMBDA block_statement .)
    RPAREN          reduce using rule 18 (lambda_function -> FN LPAREN opt_param_list RPAREN LAMBDA block_statement .)
    COMMA           reduce using rule 18 (lambda_function -> FN LPAREN opt_param_list RPAREN LAMBDA block_statement .)


state 155

    (19) lambda_function -> FN LPAREN opt_param_list RPAREN typehint LAMBDA . block_statement
    (17) block_statement -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 141

    block_statement                shift and go to state 160

state 156

    (82) conditional -> IF LPAREN expression RPAREN block_statement ELSE . block_statement
    (17) block_statement -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 141

    block_statement                shift and go to state 161

state 157

    (84) loop -> FOR LPAREN declaration SEMICOLON expression SEMICOLON . expression RPAREN block_statement
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression MULTIPLY expression
    (51) expression -> . expression DIVIDE expression
    (52) expression -> . expression EQUALS expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression NE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression GE expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . expression CHAIN expression
    (62) expression -> . expression STREAMSPLIT expression
    (63) expression -> . expression STREAMMERGE expression
    (64) expression -> . expression FEEDBACK expression
    (65) expression -> . MINUS expression
    (66) expression -> . PLUS expression
    (67) expression -> . NOT expression
    (72) expression -> . LPAREN expression RPAREN
    (73) expression -> . INT
    (74) expression -> . FLOAT
    (75) expression -> . STRING
    (76) expression -> . TRUE
    (77) expression -> . FALSE
    (78) expression -> . IDENTIFIER
    (79) expression -> . function_call
    (80) expression -> . expression TO_STREAM
    (81) expression -> . lambda_function
    (9) function_call -> . IDENTIFIER LPAREN opt_arg_list RPAREN
    (18) lambda_function -> . FN LPAREN opt_param_list RPAREN LAMBDA block_statement
    (19) lambda_function -> . FN LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (20) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA block_statement
    (21) lambda_function -> . LPAREN opt_param_list RPAREN typehint LAMBDA block_statement
    (22) lambda_function -> . LPAREN opt_param_list RPAREN LAMBDA expression

    MINUS           shift and go to state 13
    PLUS            shift and go to state 12
    NOT             shift and go to state 14
    LPAREN          shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    IDENTIFIER      shift and go to state 61
    FN              shift and go to state 62

    expression                     shift and go to state 162
    function_call                  shift and go to state 22
    lambda_function                shift and go to state 23

state 158

    (17) block_statement -> LBRACE statement_list RBRACE .

    SEMICOLON       reduce using rule 17 (block_statement -> LBRACE statement_list RBRACE .)
    PLUS            reduce using rule 17 (block_statement -> LBRACE statement_list RBRACE .)
    MINUS           reduce using rule 17 (block_statement -> LBRACE statement_list RBRACE .)
    MULTIPLY        reduce using rule 17 (block_statement -> LBRACE statement_list RBRACE .)
    DIVIDE          reduce using rule 17 (block_statement -> LBRACE statement_list RBRACE .)
    EQUALS          reduce using rule 17 (block_statement -> LBRACE statement_list RBRACE .)
    MODULUS         reduce using rule 17 (block_statement -> LBRACE statement_list RBRACE .)
    NE              reduce using rule 17 (block_statement -> LBRACE statement_list RBRACE .)
    GT              reduce using rule 17 (block_statement -> LBRACE statement_list RBRACE .)
    LT              reduce using rule 17 (block_statement -> LBRACE statement_list RBRACE .)
    GE              reduce using rule 17 (block_statement -> LBRACE statement_list RBRACE .)
    LE              reduce using rule 17 (block_statement -> LBRACE statement_list RBRACE .)
    AND             reduce using rule 17 (block_statement -> LBRACE statement_list RBRACE .)
    OR              reduce using rule 17 (block_statement -> LBRACE statement_list RBRACE .)
    CHAIN           reduce using rule 17 (block_statement -> LBRACE statement_list RBRACE .)
    STREAMSPLIT     reduce using rule 17 (block_statement -> LBRACE statement_list RBRACE .)
    STREAMMERGE     reduce using rule 17 (block_statement -> LBRACE statement_list RBRACE .)
    FEEDBACK        reduce using rule 17 (block_statement -> LBRACE statement_list RBRACE .)
    TO_STREAM       reduce using rule 17 (block_statement -> LBRACE statement_list RBRACE .)
    RPAREN          reduce using rule 17 (block_statement -> LBRACE statement_list RBRACE .)
    COMMA           reduce using rule 17 (block_statement -> LBRACE statement_list RBRACE .)
    ELSE            reduce using rule 17 (block_statement -> LBRACE statement_list RBRACE .)
    VAR             reduce using rule 17 (block_statement -> LBRACE statement_list RBRACE .)
    CONST           reduce using rule 17 (block_statement -> LBRACE statement_list RBRACE .)
    NOT             reduce using rule 17 (block_statement -> LBRACE statement_list RBRACE .)
    LPAREN          reduce using rule 17 (block_statement -> LBRACE statement_list RBRACE .)
    INT             reduce using rule 17 (block_statement -> LBRACE statement_list RBRACE .)
    FLOAT           reduce using rule 17 (block_statement -> LBRACE statement_list RBRACE .)
    STRING          reduce using rule 17 (block_statement -> LBRACE statement_list RBRACE .)
    TRUE            reduce using rule 17 (block_statement -> LBRACE statement_list RBRACE .)
    FALSE           reduce using rule 17 (block_statement -> LBRACE statement_list RBRACE .)
    IDENTIFIER      reduce using rule 17 (block_statement -> LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 17 (block_statement -> LBRACE statement_list RBRACE .)
    FN              reduce using rule 17 (block_statement -> LBRACE statement_list RBRACE .)
    IF              reduce using rule 17 (block_statement -> LBRACE statement_list RBRACE .)
    FOR             reduce using rule 17 (block_statement -> LBRACE statement_list RBRACE .)
    WHILE           reduce using rule 17 (block_statement -> LBRACE statement_list RBRACE .)
    BREAK           reduce using rule 17 (block_statement -> LBRACE statement_list RBRACE .)
    CONTINUE        reduce using rule 17 (block_statement -> LBRACE statement_list RBRACE .)
    $end            reduce using rule 17 (block_statement -> LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 17 (block_statement -> LBRACE statement_list RBRACE .)


state 159

    (15) function_definition -> FN IDENTIFIER LPAREN opt_param_list RPAREN typehint block_statement .

    VAR             reduce using rule 15 (function_definition -> FN IDENTIFIER LPAREN opt_param_list RPAREN typehint block_statement .)
    CONST           reduce using rule 15 (function_definition -> FN IDENTIFIER LPAREN opt_param_list RPAREN typehint block_statement .)
    MINUS           reduce using rule 15 (function_definition -> FN IDENTIFIER LPAREN opt_param_list RPAREN typehint block_statement .)
    PLUS            reduce using rule 15 (function_definition -> FN IDENTIFIER LPAREN opt_param_list RPAREN typehint block_statement .)
    NOT             reduce using rule 15 (function_definition -> FN IDENTIFIER LPAREN opt_param_list RPAREN typehint block_statement .)
    LPAREN          reduce using rule 15 (function_definition -> FN IDENTIFIER LPAREN opt_param_list RPAREN typehint block_statement .)
    INT             reduce using rule 15 (function_definition -> FN IDENTIFIER LPAREN opt_param_list RPAREN typehint block_statement .)
    FLOAT           reduce using rule 15 (function_definition -> FN IDENTIFIER LPAREN opt_param_list RPAREN typehint block_statement .)
    STRING          reduce using rule 15 (function_definition -> FN IDENTIFIER LPAREN opt_param_list RPAREN typehint block_statement .)
    TRUE            reduce using rule 15 (function_definition -> FN IDENTIFIER LPAREN opt_param_list RPAREN typehint block_statement .)
    FALSE           reduce using rule 15 (function_definition -> FN IDENTIFIER LPAREN opt_param_list RPAREN typehint block_statement .)
    IDENTIFIER      reduce using rule 15 (function_definition -> FN IDENTIFIER LPAREN opt_param_list RPAREN typehint block_statement .)
    RETURN          reduce using rule 15 (function_definition -> FN IDENTIFIER LPAREN opt_param_list RPAREN typehint block_statement .)
    FN              reduce using rule 15 (function_definition -> FN IDENTIFIER LPAREN opt_param_list RPAREN typehint block_statement .)
    IF              reduce using rule 15 (function_definition -> FN IDENTIFIER LPAREN opt_param_list RPAREN typehint block_statement .)
    FOR             reduce using rule 15 (function_definition -> FN IDENTIFIER LPAREN opt_param_list RPAREN typehint block_statement .)
    WHILE           reduce using rule 15 (function_definition -> FN IDENTIFIER LPAREN opt_param_list RPAREN typehint block_statement .)
    BREAK           reduce using rule 15 (function_definition -> FN IDENTIFIER LPAREN opt_param_list RPAREN typehint block_statement .)
    CONTINUE        reduce using rule 15 (function_definition -> FN IDENTIFIER LPAREN opt_param_list RPAREN typehint block_statement .)
    $end            reduce using rule 15 (function_definition -> FN IDENTIFIER LPAREN opt_param_list RPAREN typehint block_statement .)
    SEMICOLON       reduce using rule 15 (function_definition -> FN IDENTIFIER LPAREN opt_param_list RPAREN typehint block_statement .)
    RBRACE          reduce using rule 15 (function_definition -> FN IDENTIFIER LPAREN opt_param_list RPAREN typehint block_statement .)


state 160

    (19) lambda_function -> FN LPAREN opt_param_list RPAREN typehint LAMBDA block_statement .

    SEMICOLON       reduce using rule 19 (lambda_function -> FN LPAREN opt_param_list RPAREN typehint LAMBDA block_statement .)
    PLUS            reduce using rule 19 (lambda_function -> FN LPAREN opt_param_list RPAREN typehint LAMBDA block_statement .)
    MINUS           reduce using rule 19 (lambda_function -> FN LPAREN opt_param_list RPAREN typehint LAMBDA block_statement .)
    MULTIPLY        reduce using rule 19 (lambda_function -> FN LPAREN opt_param_list RPAREN typehint LAMBDA block_statement .)
    DIVIDE          reduce using rule 19 (lambda_function -> FN LPAREN opt_param_list RPAREN typehint LAMBDA block_statement .)
    EQUALS          reduce using rule 19 (lambda_function -> FN LPAREN opt_param_list RPAREN typehint LAMBDA block_statement .)
    MODULUS         reduce using rule 19 (lambda_function -> FN LPAREN opt_param_list RPAREN typehint LAMBDA block_statement .)
    NE              reduce using rule 19 (lambda_function -> FN LPAREN opt_param_list RPAREN typehint LAMBDA block_statement .)
    GT              reduce using rule 19 (lambda_function -> FN LPAREN opt_param_list RPAREN typehint LAMBDA block_statement .)
    LT              reduce using rule 19 (lambda_function -> FN LPAREN opt_param_list RPAREN typehint LAMBDA block_statement .)
    GE              reduce using rule 19 (lambda_function -> FN LPAREN opt_param_list RPAREN typehint LAMBDA block_statement .)
    LE              reduce using rule 19 (lambda_function -> FN LPAREN opt_param_list RPAREN typehint LAMBDA block_statement .)
    AND             reduce using rule 19 (lambda_function -> FN LPAREN opt_param_list RPAREN typehint LAMBDA block_statement .)
    OR              reduce using rule 19 (lambda_function -> FN LPAREN opt_param_list RPAREN typehint LAMBDA block_statement .)
    CHAIN           reduce using rule 19 (lambda_function -> FN LPAREN opt_param_list RPAREN typehint LAMBDA block_statement .)
    STREAMSPLIT     reduce using rule 19 (lambda_function -> FN LPAREN opt_param_list RPAREN typehint LAMBDA block_statement .)
    STREAMMERGE     reduce using rule 19 (lambda_function -> FN LPAREN opt_param_list RPAREN typehint LAMBDA block_statement .)
    FEEDBACK        reduce using rule 19 (lambda_function -> FN LPAREN opt_param_list RPAREN typehint LAMBDA block_statement .)
    TO_STREAM       reduce using rule 19 (lambda_function -> FN LPAREN opt_param_list RPAREN typehint LAMBDA block_statement .)
    RPAREN          reduce using rule 19 (lambda_function -> FN LPAREN opt_param_list RPAREN typehint LAMBDA block_statement .)
    COMMA           reduce using rule 19 (lambda_function -> FN LPAREN opt_param_list RPAREN typehint LAMBDA block_statement .)


state 161

    (82) conditional -> IF LPAREN expression RPAREN block_statement ELSE block_statement .

    VAR             reduce using rule 82 (conditional -> IF LPAREN expression RPAREN block_statement ELSE block_statement .)
    CONST           reduce using rule 82 (conditional -> IF LPAREN expression RPAREN block_statement ELSE block_statement .)
    MINUS           reduce using rule 82 (conditional -> IF LPAREN expression RPAREN block_statement ELSE block_statement .)
    PLUS            reduce using rule 82 (conditional -> IF LPAREN expression RPAREN block_statement ELSE block_statement .)
    NOT             reduce using rule 82 (conditional -> IF LPAREN expression RPAREN block_statement ELSE block_statement .)
    LPAREN          reduce using rule 82 (conditional -> IF LPAREN expression RPAREN block_statement ELSE block_statement .)
    INT             reduce using rule 82 (conditional -> IF LPAREN expression RPAREN block_statement ELSE block_statement .)
    FLOAT           reduce using rule 82 (conditional -> IF LPAREN expression RPAREN block_statement ELSE block_statement .)
    STRING          reduce using rule 82 (conditional -> IF LPAREN expression RPAREN block_statement ELSE block_statement .)
    TRUE            reduce using rule 82 (conditional -> IF LPAREN expression RPAREN block_statement ELSE block_statement .)
    FALSE           reduce using rule 82 (conditional -> IF LPAREN expression RPAREN block_statement ELSE block_statement .)
    IDENTIFIER      reduce using rule 82 (conditional -> IF LPAREN expression RPAREN block_statement ELSE block_statement .)
    RETURN          reduce using rule 82 (conditional -> IF LPAREN expression RPAREN block_statement ELSE block_statement .)
    FN              reduce using rule 82 (conditional -> IF LPAREN expression RPAREN block_statement ELSE block_statement .)
    IF              reduce using rule 82 (conditional -> IF LPAREN expression RPAREN block_statement ELSE block_statement .)
    FOR             reduce using rule 82 (conditional -> IF LPAREN expression RPAREN block_statement ELSE block_statement .)
    WHILE           reduce using rule 82 (conditional -> IF LPAREN expression RPAREN block_statement ELSE block_statement .)
    BREAK           reduce using rule 82 (conditional -> IF LPAREN expression RPAREN block_statement ELSE block_statement .)
    CONTINUE        reduce using rule 82 (conditional -> IF LPAREN expression RPAREN block_statement ELSE block_statement .)
    $end            reduce using rule 82 (conditional -> IF LPAREN expression RPAREN block_statement ELSE block_statement .)
    RBRACE          reduce using rule 82 (conditional -> IF LPAREN expression RPAREN block_statement ELSE block_statement .)


state 162

    (84) loop -> FOR LPAREN declaration SEMICOLON expression SEMICOLON expression . RPAREN block_statement
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . MULTIPLY expression
    (51) expression -> expression . DIVIDE expression
    (52) expression -> expression . EQUALS expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . NE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . GE expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (61) expression -> expression . CHAIN expression
    (62) expression -> expression . STREAMSPLIT expression
    (63) expression -> expression . STREAMMERGE expression
    (64) expression -> expression . FEEDBACK expression
    (80) expression -> expression . TO_STREAM

    RPAREN          shift and go to state 163
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    EQUALS          shift and go to state 41
    MODULUS         shift and go to state 42
    NE              shift and go to state 43
    GT              shift and go to state 44
    LT              shift and go to state 45
    GE              shift and go to state 46
    LE              shift and go to state 47
    AND             shift and go to state 48
    OR              shift and go to state 49
    CHAIN           shift and go to state 50
    STREAMSPLIT     shift and go to state 51
    STREAMMERGE     shift and go to state 52
    FEEDBACK        shift and go to state 53
    TO_STREAM       shift and go to state 54


state 163

    (84) loop -> FOR LPAREN declaration SEMICOLON expression SEMICOLON expression RPAREN . block_statement
    (17) block_statement -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 141

    block_statement                shift and go to state 164

state 164

    (84) loop -> FOR LPAREN declaration SEMICOLON expression SEMICOLON expression RPAREN block_statement .

    VAR             reduce using rule 84 (loop -> FOR LPAREN declaration SEMICOLON expression SEMICOLON expression RPAREN block_statement .)
    CONST           reduce using rule 84 (loop -> FOR LPAREN declaration SEMICOLON expression SEMICOLON expression RPAREN block_statement .)
    MINUS           reduce using rule 84 (loop -> FOR LPAREN declaration SEMICOLON expression SEMICOLON expression RPAREN block_statement .)
    PLUS            reduce using rule 84 (loop -> FOR LPAREN declaration SEMICOLON expression SEMICOLON expression RPAREN block_statement .)
    NOT             reduce using rule 84 (loop -> FOR LPAREN declaration SEMICOLON expression SEMICOLON expression RPAREN block_statement .)
    LPAREN          reduce using rule 84 (loop -> FOR LPAREN declaration SEMICOLON expression SEMICOLON expression RPAREN block_statement .)
    INT             reduce using rule 84 (loop -> FOR LPAREN declaration SEMICOLON expression SEMICOLON expression RPAREN block_statement .)
    FLOAT           reduce using rule 84 (loop -> FOR LPAREN declaration SEMICOLON expression SEMICOLON expression RPAREN block_statement .)
    STRING          reduce using rule 84 (loop -> FOR LPAREN declaration SEMICOLON expression SEMICOLON expression RPAREN block_statement .)
    TRUE            reduce using rule 84 (loop -> FOR LPAREN declaration SEMICOLON expression SEMICOLON expression RPAREN block_statement .)
    FALSE           reduce using rule 84 (loop -> FOR LPAREN declaration SEMICOLON expression SEMICOLON expression RPAREN block_statement .)
    IDENTIFIER      reduce using rule 84 (loop -> FOR LPAREN declaration SEMICOLON expression SEMICOLON expression RPAREN block_statement .)
    RETURN          reduce using rule 84 (loop -> FOR LPAREN declaration SEMICOLON expression SEMICOLON expression RPAREN block_statement .)
    FN              reduce using rule 84 (loop -> FOR LPAREN declaration SEMICOLON expression SEMICOLON expression RPAREN block_statement .)
    IF              reduce using rule 84 (loop -> FOR LPAREN declaration SEMICOLON expression SEMICOLON expression RPAREN block_statement .)
    FOR             reduce using rule 84 (loop -> FOR LPAREN declaration SEMICOLON expression SEMICOLON expression RPAREN block_statement .)
    WHILE           reduce using rule 84 (loop -> FOR LPAREN declaration SEMICOLON expression SEMICOLON expression RPAREN block_statement .)
    BREAK           reduce using rule 84 (loop -> FOR LPAREN declaration SEMICOLON expression SEMICOLON expression RPAREN block_statement .)
    CONTINUE        reduce using rule 84 (loop -> FOR LPAREN declaration SEMICOLON expression SEMICOLON expression RPAREN block_statement .)
    $end            reduce using rule 84 (loop -> FOR LPAREN declaration SEMICOLON expression SEMICOLON expression RPAREN block_statement .)
    RBRACE          reduce using rule 84 (loop -> FOR LPAREN declaration SEMICOLON expression SEMICOLON expression RPAREN block_statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 140 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 140 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 140 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 140 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 140 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 140 resolved as shift
WARNING: shift/reduce conflict for NE in state 140 resolved as shift
WARNING: shift/reduce conflict for GT in state 140 resolved as shift
WARNING: shift/reduce conflict for LT in state 140 resolved as shift
WARNING: shift/reduce conflict for GE in state 140 resolved as shift
WARNING: shift/reduce conflict for LE in state 140 resolved as shift
WARNING: shift/reduce conflict for AND in state 140 resolved as shift
WARNING: shift/reduce conflict for OR in state 140 resolved as shift
WARNING: shift/reduce conflict for CHAIN in state 140 resolved as shift
WARNING: shift/reduce conflict for STREAMSPLIT in state 140 resolved as shift
WARNING: shift/reduce conflict for STREAMMERGE in state 140 resolved as shift
WARNING: shift/reduce conflict for FEEDBACK in state 140 resolved as shift
WARNING: shift/reduce conflict for TO_STREAM in state 140 resolved as shift
WARNING: reduce/reduce conflict in state 67 resolved using rule (param -> IDENTIFIER)
WARNING: rejected rule (expression -> IDENTIFIER) in state 67
